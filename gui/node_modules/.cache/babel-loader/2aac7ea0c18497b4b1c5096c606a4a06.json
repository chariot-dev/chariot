{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Juan Garcia Lopez\\\\Desktop\\\\seniorDesign\\\\chariot\\\\gui\\\\src\\\\components\\\\deviceManagement\\\\ManageDeviceConfiguration.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport ConfirmationModalBody from '../shared/ConfirmationModalBody';\nimport SuccessModalBody from '../shared/SuccessModalBody';\nconst getDeviceConfigurationBaseUrl = 'http://localhost:5000/chariot/api/v1.0/network/device';\nconst modifyDeviceConfigurationBaseUrl = 'http://localhost:5000/chariot/api/v1.0/network/device';\nconst deleteDeviceBaseUrl = 'http://localhost:5000/chariot/api/v1.0/network/device';\n\nclass ManageDeviceConfiguration extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.createDeviceConfigurationFields = () => {\n      var configurationFields = [];\n\n      for (var key in this.state.originalDeviceProperties) {\n        configurationFields.push(React.createElement(\"div\", {\n          className: \"form-group\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }, key, \": \", React.createElement(\"input\", {\n          className: \"form-control\",\n          id: key,\n          name: key,\n          defaultValue: this.state.originalDeviceProperties[key],\n          onChange: this.handleChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        })));\n      }\n\n      return configurationFields;\n    };\n\n    this.toggleDeletionConfirmationModal = () => {\n      this.setState({\n        deleteConfirmIsOpen: !this.state.deleteConfirmIsOpen\n      });\n    };\n\n    this.toggleModifyConfirmationModal = () => {\n      this.setState({\n        saveConfirmIsOpen: !this.state.saveConfirmIsOpen\n      });\n    };\n\n    this.modifyDevice = () => {\n      var data = {};\n      var temp = [this.state.newDeviceProperties['Tag Population']]; // ======= When creating fields, no reference to field type, so some fields are would be sent as strings when they need to be ints. Also antenna beeds array. Need to fix ========\n\n      if (this.state.originalDeviceName === this.state.newDeviceProperties[\"Device Name\"]) {\n        data = {\n          \"networkName\": this.state.originalNetworkName,\n          \"deviceId\": this.state.newDeviceProperties['Device Name'],\n          //\"newDeviceId\": this.state.newDeviceProperties['IP Address'], // Not needed because not changing name\n          \"ipAddress\": this.state.newDeviceProperties['IP Address'],\n          \"pollDelay\": this.state.newDeviceProperties['Poll Delay'],\n          \"antennas\": temp,\n          \"tag_population\": this.state.newDeviceProperties['Tag Population'],\n          \"report_every_n_tags\": this.state.newDeviceProperties['Report Every n Tags'],\n          \"tx_power\": this.state.newDeviceProperties['Tx Power'],\n          \"session\": this.state.newDeviceProperties['Session'],\n          \"start_inventory\": this.state.newDeviceProperties['Start Inventory'],\n          \"mode_identifier\": this.state.newDeviceProperties['Mode Identifier'],\n          \"EnableROSpecID\": this.state.newDeviceProperties['Enable ROS Spec ID'],\n          \"EnableSpecIndex\": this.state.newDeviceProperties['Enable Spec Index'],\n          \"EnableInventoryParameterSpecID\": this.state.newDeviceProperties['Enable Inventory Parameter Spec ID'],\n          \"EnableRFPhaseAngle\": this.state.newDeviceProperties['Enable RF Phase Angle']\n        };\n      } else {\n        data = {\n          \"networkName\": this.state.originalNetworkName,\n          \"deviceId\": this.state.originalDeviceName,\n          \"newDeviceId\": this.state.newDeviceProperties['Device Name'],\n          // Needed because changing name\n          \"ipAddress\": this.state.newDeviceProperties['IP Address'],\n          \"pollDelay\": this.state.newDeviceProperties['Poll Delay'],\n          \"antennas\": temp,\n          \"tag_population\": this.state.newDeviceProperties['Tag Population'],\n          \"report_every_n_tags\": this.state.newDeviceProperties['Report Every n Tags'],\n          \"tx_power\": this.state.newDeviceProperties['Tx Power'],\n          \"session\": this.state.newDeviceProperties['Session'],\n          \"start_inventory\": this.state.newDeviceProperties['Start Inventory'],\n          \"mode_identifier\": this.state.newDeviceProperties['Mode Identifier'],\n          \"EnableROSpecID\": this.state.newDeviceProperties['Enable ROS Spec ID'],\n          \"EnableSpecIndex\": this.state.newDeviceProperties['Enable Spec Index'],\n          \"EnableInventoryParameterSpecID\": this.state.newDeviceProperties['Enable Inventory Parameter Spec ID'],\n          \"EnableRFPhaseAngle\": this.state.newDeviceProperties['Enable RF Phase Angle']\n        };\n      } // Put request options\n\n\n      const requestOptions = {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      };\n      fetch(modifyDeviceConfigurationBaseUrl + \"?networkName=\" + this.state.originalNetworkName + \"&deviceId=\" + this.state.originalDeviceName, requestOptions).then(() => {\n        this.setState({\n          saveConfirmIsOpen: false\n        });\n        this.setState({\n          saveSuccessIsOpen: !this.state.successIsOpen\n        });\n      }, // If put was unsuccessful, update state and display error modal\n      error => {\n        console.log(error.message);\n        /*\n          Have an error modal for being unable to get network fields. Once button on the error modal is clicked, Chariot goes back to welcome screen\n        */\n      });\n    };\n\n    this.toggleDeletionSuccessModal = () => {\n      // Delete request options\n      const requestOptions = {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      fetch(deleteDeviceBaseUrl + \"?networkName=\" + this.state.originalNetworkName + \"&deviceId=\" + this.state.originalDeviceName, requestOptions).then(res => res.json()) // On success\n      .then(() => {\n        this.setState({\n          deleteConfirmIsOpen: false\n        });\n        this.setState({\n          deleteSuccessIsOpen: !this.state.saveSuccessIsOpen\n        });\n      }, // On error\n      error => {\n        console.log(error.message);\n        /*\n          Have an error modal for being unable to get network fields. Once button on the error modal is clicked, Chariot goes back to welcome screen\n        */\n      });\n    };\n\n    this.hideSaveConfirmModal = () => {\n      this.setState({\n        saveConfirmIsOpen: false\n      });\n    };\n\n    this.hideDeleteConfirmModal = () => {\n      this.setState({\n        deleteConfirmIsOpen: false\n      });\n    };\n\n    this.state = {\n      // These two state values are used to execute the GET call to get the device's original properties/configuration\n      originalDeviceName: this.props.location.networkProps[\"Device Name\"],\n      // this.props.location.deviceProps obtained from prop passed through from Link in ManageExistingNetworks jsx element\n      originalNetworkName: this.props.location.networkProps[\"Network Name\"],\n      originalDeviceProperties: {},\n      // Filled by componentDidMount()\n      newDeviceProperties: {},\n      saveConfirmIsOpen: false,\n      saveSuccessIsOpen: false,\n      deleteConfirmIsOpen: false,\n      deleteSuccessIsOpen: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    var updatedDeviceProperties = this.state.newDeviceProperties; // Store from current state\n\n    updatedDeviceProperties[event.target.name] = event.target.value; // Update the json\n\n    this.setState({\n      newDeviceProperties: updatedDeviceProperties\n    }); // Update the state\n  } // Gets run upon initial component render to load the default values of the text fields  \n\n\n  componentDidMount() {\n    fetch(getDeviceConfigurationBaseUrl + '?networkName=' + this.state.originalNetworkName + '&deviceId=' + this.state.originalDeviceName).then(res => res.json()).then( // If post was successful, update state and display success modal\n    result => {\n      var responseJsonArray = result; // Response is a dictionary\n\n      var properties = {};\n      properties[\"Device Name\"] = this.state.originalDeviceName;\n      properties[\"IP Address\"] = responseJsonArray[\"ipAddress\"];\n      properties[\"Report Every n Tags\"] = responseJsonArray[\"report_every_n_tags\"];\n      properties[\"Session\"] = responseJsonArray[\"session\"];\n      properties[\"Start Inventory\"] = responseJsonArray[\"start_inventory\"];\n      properties[\"Mode Identifier\"] = responseJsonArray[\"mode_identifier\"];\n      properties[\"Tag Population\"] = responseJsonArray[\"tag_population\"];\n      properties[\"Poll Delay\"] = responseJsonArray[\"pollDelay\"];\n      properties[\"Tx Power\"] = responseJsonArray[\"tx_power\"];\n      properties[\"Enable Inventory Parameter Spec ID\"] = responseJsonArray[\"EnableInventoryParameterSpecID\"];\n      properties[\"Enable ROS Spec ID\"] = responseJsonArray[\"EnableROSpecID\"];\n      properties[\"Enable Spec Index\"] = responseJsonArray[\"EnableSpecIndex\"];\n      this.setState({\n        originalDeviceProperties: properties\n      }); // Initialize all to-be-saved properties to be the original, in the event not all properties are modified so can still be saved\n\n      this.setState({\n        newDeviceProperties: properties\n      });\n      console.log(properties);\n      console.log(responseJsonArray);\n    }, // On error\n    error => {\n      console.log(error.message);\n      /*\n        Have an error modal for being unable to get device fields. Once button on the error modal is clicked, Chariot goes back to welcome screen\n      */\n    });\n  }\n\n  render() {\n    console.log(this.state.newDeviceProperties);\n    return [React.createElement(\"div\", {\n      className: \"container\",\n      key: \"manageDeviceConfigurationScreen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, this.state.originalDeviceName, \" - Device Configuration\"), React.createElement(\"p\", {\n      className: \"screenInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, \"Modifying configuration settings of \", this.state.originalDeviceName, \" for \", this.state.originalNetworkName, \".\"), React.createElement(\"form\", {\n      id: \"modifyDeviceForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, Object.keys(this.state.newDeviceProperties).length === 0 ? null : this.createDeviceConfigurationFields()), React.createElement(Link, {\n      to: \"/manageExistingNetworks\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left footer-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"Back\")), React.createElement(Button, {\n      variant: \"danger\",\n      className: \"footer-button button-mid-bottom\",\n      onClick: this.toggleDeletionConfirmationModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, \"Delete Device\"), React.createElement(Button, {\n      variant: \"success\",\n      className: \"float-right footer-button\",\n      onClick: this.toggleModifyConfirmationModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, \"Save\")), React.createElement(Modal, {\n      show: this.state.saveConfirmIsOpen,\n      key: \"deviceSaveConfirmModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(ConfirmationModalBody, {\n      confirmationQuestion: \"Is the modified device configuration displayed below correct?\",\n      confirmationData: this.state.newDeviceProperties,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left\",\n      onClick: this.hideSaveConfirmModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, \"No\"), React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right\",\n      onClick: this.modifyDevice,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, \"Yes\"))), React.createElement(Modal, {\n      show: this.state.saveSuccessIsOpen,\n      key: \"deviceSaveSuccessModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(SuccessModalBody, {\n      successMessage: this.state.newDeviceProperties['Device Name'] + ' has successfully been modified.',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/welcome\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, \"Continue\")))), React.createElement(Modal, {\n      show: this.state.deleteConfirmIsOpen,\n      key: \"deviceDeletionConfirmModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, \"To confirm the deletion of the device, \", this.state.originalDeviceName, \", click 'Yes'.\"), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left\",\n      onClick: this.hideDeleteConfirmModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, \"No\"), React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right\",\n      onClick: this.toggleDeletionSuccessModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \"Yes\"))), React.createElement(Modal, {\n      show: this.state.deleteSuccessIsOpen,\n      key: \"deviceDeletionSuccessModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, React.createElement(SuccessModalBody, {\n      successMessage: this.state.originalDeviceName + \" has been successfully removed from \" + this.state.originalNetworkName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/welcome\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, \"Continue\"))))];\n  }\n\n}\n\nexport default ManageDeviceConfiguration;","map":{"version":3,"sources":["C:\\Users\\Juan Garcia Lopez\\Desktop\\seniorDesign\\chariot\\gui\\src\\components\\deviceManagement\\ManageDeviceConfiguration.js"],"names":["React","Link","Button","Modal","ConfirmationModalBody","SuccessModalBody","getDeviceConfigurationBaseUrl","modifyDeviceConfigurationBaseUrl","deleteDeviceBaseUrl","ManageDeviceConfiguration","Component","constructor","props","createDeviceConfigurationFields","configurationFields","key","state","originalDeviceProperties","push","handleChange","toggleDeletionConfirmationModal","setState","deleteConfirmIsOpen","toggleModifyConfirmationModal","saveConfirmIsOpen","modifyDevice","data","temp","newDeviceProperties","originalDeviceName","originalNetworkName","requestOptions","method","headers","body","JSON","stringify","fetch","then","saveSuccessIsOpen","successIsOpen","error","console","log","message","toggleDeletionSuccessModal","res","json","deleteSuccessIsOpen","hideSaveConfirmModal","hideDeleteConfirmModal","location","networkProps","bind","event","updatedDeviceProperties","target","name","value","componentDidMount","result","responseJsonArray","properties","render","Object","keys","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\n\nimport ConfirmationModalBody from '../shared/ConfirmationModalBody';\nimport SuccessModalBody from '../shared/SuccessModalBody';\n\nconst getDeviceConfigurationBaseUrl = 'http://localhost:5000/chariot/api/v1.0/network/device';\nconst modifyDeviceConfigurationBaseUrl = 'http://localhost:5000/chariot/api/v1.0/network/device';\nconst deleteDeviceBaseUrl = 'http://localhost:5000/chariot/api/v1.0/network/device';\n\n\nclass ManageDeviceConfiguration extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // These two state values are used to execute the GET call to get the device's original properties/configuration\n      originalDeviceName : this.props.location.networkProps[\"Device Name\"], // this.props.location.deviceProps obtained from prop passed through from Link in ManageExistingNetworks jsx element\n      originalNetworkName : this.props.location.networkProps[\"Network Name\"],\n      originalDeviceProperties: {}, // Filled by componentDidMount()\n      newDeviceProperties: {},\n      saveConfirmIsOpen: false,\n      saveSuccessIsOpen: false,\n      deleteConfirmIsOpen: false,\n      deleteSuccessIsOpen: false\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    var updatedDeviceProperties = this.state.newDeviceProperties; // Store from current state\n    updatedDeviceProperties[event.target.name] = event.target.value; // Update the json\n    \n    this.setState({ newDeviceProperties: updatedDeviceProperties }); // Update the state\n  }\n\n\n  // Gets run upon initial component render to load the default values of the text fields  \n  componentDidMount() {\n   fetch(getDeviceConfigurationBaseUrl + '?networkName=' + this.state.originalNetworkName + '&deviceId=' + this.state.originalDeviceName)\n   .then(res => res.json())\n   .then(\n      // If post was successful, update state and display success modal\n      (result) => {\n        var responseJsonArray = result; // Response is a dictionary\n        \n        var properties = {};\n        properties[\"Device Name\"] = this.state.originalDeviceName;\n        properties[\"IP Address\"] = responseJsonArray[\"ipAddress\"];\n        properties[\"Report Every n Tags\"] = responseJsonArray[\"report_every_n_tags\"];\n        properties[\"Session\"] = responseJsonArray[\"session\"];\n        properties[\"Start Inventory\"] = responseJsonArray[\"start_inventory\"];\n        properties[\"Mode Identifier\"] = responseJsonArray[\"mode_identifier\"];\n        properties[\"Tag Population\"] = responseJsonArray[\"tag_population\"]; \n        properties[\"Poll Delay\"] = responseJsonArray[\"pollDelay\"];\n        properties[\"Tx Power\"] = responseJsonArray[\"tx_power\"];\n        properties[\"Enable Inventory Parameter Spec ID\"] = responseJsonArray[\"EnableInventoryParameterSpecID\"];\n        properties[\"Enable ROS Spec ID\"] = responseJsonArray[\"EnableROSpecID\"];\n        properties[\"Enable Spec Index\"] = responseJsonArray[\"EnableSpecIndex\"]; \n\n        this.setState({originalDeviceProperties: properties});\n\n        // Initialize all to-be-saved properties to be the original, in the event not all properties are modified so can still be saved\n        this.setState({newDeviceProperties: properties});\n        console.log(properties);\n        console.log(responseJsonArray);\n      },\n      // On error\n      (error) => {\n        console.log(error.message);\n\n    \n        /*\n          Have an error modal for being unable to get device fields. Once button on the error modal is clicked, Chariot goes back to welcome screen\n        */ \n      }\n   )\n\n  }\n\n\n  createDeviceConfigurationFields = () => {\n    var configurationFields = [];\n\n    for (var key in this.state.originalDeviceProperties) {\n      configurationFields.push(\n        <div className=\"form-group\">\n          {key}: <input className=\"form-control\" id={key} name={key} defaultValue={this.state.originalDeviceProperties[key]} onChange={this.handleChange}/>\n        </div>\n      ); \n    }\n\n    return configurationFields;\n  }\n\n\n  toggleDeletionConfirmationModal = () => {\n    this.setState({deleteConfirmIsOpen: !this.state.deleteConfirmIsOpen});\n  }\n\n\n  toggleModifyConfirmationModal = () => {\n    this.setState({saveConfirmIsOpen: !this.state.saveConfirmIsOpen});\n  }\n\n  \n  modifyDevice = () => {\n    var data = {};\n    var temp = [this.state.newDeviceProperties['Tag Population']];\n\n    // ======= When creating fields, no reference to field type, so some fields are would be sent as strings when they need to be ints. Also antenna beeds array. Need to fix ========\n\n    if (this.state.originalDeviceName === this.state.newDeviceProperties[\"Device Name\"]) {\n      data = {\n        \"networkName\": this.state.originalNetworkName,\n        \"deviceId\": this.state.newDeviceProperties['Device Name'],\n        //\"newDeviceId\": this.state.newDeviceProperties['IP Address'], // Not needed because not changing name\n        \"ipAddress\": this.state.newDeviceProperties['IP Address'],\n        \"pollDelay\": this.state.newDeviceProperties['Poll Delay'],\n        \"antennas\": temp,\n        \"tag_population\": this.state.newDeviceProperties['Tag Population'],\n        \"report_every_n_tags\": this.state.newDeviceProperties['Report Every n Tags'],\n        \"tx_power\": this.state.newDeviceProperties['Tx Power'],\n        \"session\": this.state.newDeviceProperties['Session'],\n        \"start_inventory\": this.state.newDeviceProperties['Start Inventory'],\n        \"mode_identifier\": this.state.newDeviceProperties['Mode Identifier'],\n        \"EnableROSpecID\": this.state.newDeviceProperties['Enable ROS Spec ID'],\n        \"EnableSpecIndex\": this.state.newDeviceProperties['Enable Spec Index'],\n        \"EnableInventoryParameterSpecID\": this.state.newDeviceProperties['Enable Inventory Parameter Spec ID'],\n        \"EnableRFPhaseAngle\": this.state.newDeviceProperties['Enable RF Phase Angle']\n      }\n    }\n    else {\n      data = {\n        \"networkName\": this.state.originalNetworkName,\n        \"deviceId\": this.state.originalDeviceName,\n        \"newDeviceId\": this.state.newDeviceProperties['Device Name'], // Needed because changing name\n        \"ipAddress\": this.state.newDeviceProperties['IP Address'],\n        \"pollDelay\": this.state.newDeviceProperties['Poll Delay'],\n        \"antennas\": temp,\n        \"tag_population\": this.state.newDeviceProperties['Tag Population'],\n        \"report_every_n_tags\": this.state.newDeviceProperties['Report Every n Tags'],\n        \"tx_power\": this.state.newDeviceProperties['Tx Power'],\n        \"session\": this.state.newDeviceProperties['Session'],\n        \"start_inventory\": this.state.newDeviceProperties['Start Inventory'],\n        \"mode_identifier\": this.state.newDeviceProperties['Mode Identifier'],\n        \"EnableROSpecID\": this.state.newDeviceProperties['Enable ROS Spec ID'],\n        \"EnableSpecIndex\": this.state.newDeviceProperties['Enable Spec Index'],\n        \"EnableInventoryParameterSpecID\": this.state.newDeviceProperties['Enable Inventory Parameter Spec ID'],\n        \"EnableRFPhaseAngle\": this.state.newDeviceProperties['Enable RF Phase Angle']\n      }\n    }  \n    \n    // Put request options\n    const requestOptions = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data)\n    };\n\n    fetch(modifyDeviceConfigurationBaseUrl + \"?networkName=\" + this.state.originalNetworkName + \"&deviceId=\" + this.state.originalDeviceName, requestOptions)\n    .then(\n      () => {\n        this.setState({\n          saveConfirmIsOpen: false\n        });\n        this.setState({\n          saveSuccessIsOpen: !this.state.successIsOpen\n        });   \n      },\n      // If put was unsuccessful, update state and display error modal\n      (error) => {\n        console.log(error.message);\n\n      \n        /*\n          Have an error modal for being unable to get network fields. Once button on the error modal is clicked, Chariot goes back to welcome screen\n        */ \n      }\n    )\n  }\n\n\n  toggleDeletionSuccessModal = () => {\n    // Delete request options\n    const requestOptions = {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' }\n    };\n\n    fetch(deleteDeviceBaseUrl + \"?networkName=\" + this.state.originalNetworkName + \"&deviceId=\" + this.state.originalDeviceName, requestOptions)\n    .then(res => res.json())\n    // On success\n    .then(\n      () => {\n        this.setState({\n          deleteConfirmIsOpen: false\n        });\n        this.setState({\n          deleteSuccessIsOpen: !this.state.saveSuccessIsOpen\n        });         \n      },\n      // On error\n      (error) => {\n        console.log(error.message);\n\n    \n        /*\n          Have an error modal for being unable to get network fields. Once button on the error modal is clicked, Chariot goes back to welcome screen\n        */ \n      }\n    )\n  }\n  \n  \n  hideSaveConfirmModal = () => {\n    this.setState({saveConfirmIsOpen: false});\n  }\n\n  hideDeleteConfirmModal = () => {\n    this.setState({deleteConfirmIsOpen: false});\n  }\n\n\n  render() {\n    console.log(this.state.newDeviceProperties);\n\n    return [\n      <div className=\"container\" key=\"manageDeviceConfigurationScreen\">\n        <h1>{this.state.originalDeviceName} - Device Configuration</h1>\n        <p className=\"screenInfo\">Modifying configuration settings of {this.state.originalDeviceName} for {this.state.originalNetworkName}.</p>\n\n        <form id=\"modifyDeviceForm\">\n          {Object.keys(this.state.newDeviceProperties).length === 0 ? null : this.createDeviceConfigurationFields()}\n        </form>\n\n        <Link to=\"/manageExistingNetworks\">\n          <Button variant=\"primary\" className=\"float-left footer-button\">Back</Button>\n        </Link>\n\n        <Button variant=\"danger\" className=\"footer-button button-mid-bottom\" onClick={this.toggleDeletionConfirmationModal}>Delete Device</Button>\n\n        <Button variant=\"success\" className=\"float-right footer-button\" onClick={this.toggleModifyConfirmationModal}>Save</Button>\n      </div>,\n\n      <Modal show={this.state.saveConfirmIsOpen} key=\"deviceSaveConfirmModal\">\n        <ConfirmationModalBody\n          confirmationQuestion='Is the modified device configuration displayed below correct?'\n          confirmationData = {this.state.newDeviceProperties}\n          >\n        </ConfirmationModalBody>\n\n        <Modal.Footer>\n          <Button variant=\"primary\" className=\"float-left\" onClick={this.hideSaveConfirmModal}>No</Button>\n          <Button variant=\"primary\" className=\"float-right\" onClick={this.modifyDevice}>Yes</Button>\n        </Modal.Footer>\n      </Modal>,\n\n      <Modal show={this.state.saveSuccessIsOpen} key=\"deviceSaveSuccessModal\">\n        <SuccessModalBody successMessage= {this.state.newDeviceProperties['Device Name'] + ' has successfully been modified.'}>\n        </SuccessModalBody>\n        <Modal.Footer>\n          <Link to=\"/welcome\">\n            <Button variant=\"primary\" className=\"float-right\">Continue</Button>\n          </Link>\n        </Modal.Footer>\n      </Modal>,\n\n      <Modal show={this.state.deleteConfirmIsOpen} key=\"deviceDeletionConfirmModal\">\n        <Modal.Body>\n          To confirm the deletion of the device, {this.state.originalDeviceName}, click 'Yes'.\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" className=\"float-left\" onClick={this.hideDeleteConfirmModal}>No</Button>\n          <Button variant=\"primary\" className=\"float-right\" onClick={this.toggleDeletionSuccessModal}>Yes</Button>\n        </Modal.Footer>\n      </Modal>,\n\n      <Modal show={this.state.deleteSuccessIsOpen} key=\"deviceDeletionSuccessModal\">\n        <SuccessModalBody successMessage= {this.state.originalDeviceName + \" has been successfully removed from \" + this.state.originalNetworkName}>\n        </SuccessModalBody>\n        <Modal.Footer>\n          <Link to=\"/welcome\">\n            <Button variant=\"primary\" className=\"float-right\">Continue</Button>\n          </Link>\n        </Modal.Footer>\n      </Modal>\n    ]\n  }\n}\n\nexport default ManageDeviceConfiguration;"]},"metadata":{},"sourceType":"module"}