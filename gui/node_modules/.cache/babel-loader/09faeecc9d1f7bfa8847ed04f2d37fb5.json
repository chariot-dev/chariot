{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Juan Garcia Lopez\\\\Desktop\\\\seniorDesign\\\\chariot\\\\gui\\\\src\\\\components\\\\databaseManagement\\\\DatabaseConnection.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport ConfirmationModalBody from '../shared/ConfirmationModalBody';\nimport SuccessModalBody from '../shared/SuccessModalBody';\nimport ErrorModalBody from '../shared/ErrorModalBody';\nconst databaseGetBaseUrl = \"http://localhost:5000/chariot/api/v1.0/database\";\n\nclass DatabaseConnection extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getSupportedDatabaseTypeOptions = () => {\n      var databaseOptionsElement = [];\n\n      for (var k = 0; k < this.state.supportedDatabaseTypes.length; k++) {\n        databaseOptionsElement.push(React.createElement(\"option\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }, this.state.supportedDatabaseTypes[k]));\n      }\n\n      return databaseOptionsElement;\n    };\n\n    this.createDatabaseFields = () => {\n      var config = this.state.databaseConfig[this.state['Database Type']].settings;\n      var databaseSpecificForm = [];\n      console.log(config);\n\n      for (var i = 0; i < config.length; i++) {\n        var curFieldAlias = config[i].alias;\n        var curFieldDescription = config[i].description;\n        var curFieldType = config[i].inputType;\n        var curFieldTitle = config[i].title;\n        var curFieldIsRequired = config[i].required;\n        databaseSpecificForm.push(React.createElement(\"div\", {\n          className: \"form-group\",\n          key: curFieldAlias,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, curFieldIsRequired ? React.createElement(\"div\", {\n          className: \"requiredStar\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, \"*\") : \"\", curFieldTitle, React.createElement(\"input\", {\n          type: curFieldType,\n          required: curFieldIsRequired,\n          className: curFieldType === \"checkbox\" ? 'deviceCreationFormCheckbox' : 'form-control',\n          id: curFieldAlias,\n          name: curFieldTitle,\n          onChange: this.handleChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        })));\n      }\n\n      return databaseSpecificForm;\n    };\n\n    this.toggleErrorModal = () => {\n      this.setState({\n        errorIsOpen: !this.state.errorIsOpen\n      });\n    };\n\n    this.state = {\n      chosenNetwork: this.props.location.networkProps['Network Name'],\n      // Network user chose on previous screen\n      supportedDatabaseTypes: [],\n      'Database Type': '',\n      databaseConfig: {},\n      databaseProperties: {},\n      showDatabaseSpecificSettings: false,\n      errorIsOpen: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleDatabaseTypeChange = this.handleDatabaseTypeChange.bind(this);\n  } // Gets supported database types when page initially loads in order to dynamically fill in select-menu\n\n\n  componentDidMount() {\n    fetch(databaseGetBaseUrl + \"/supportedDatabases\").then(res => res.json()).then(result => {\n      var tempSupportedDatabaseTypes = [];\n\n      for (var key in result) {\n        tempSupportedDatabaseTypes.push(key);\n      }\n\n      this.setState({\n        supportedDatabaseTypes: tempSupportedDatabaseTypes\n      });\n    }, error => {\n      console.log(error.message);\n    });\n  } // Create the option elements for the select-menu\n\n\n  handleChange(event) {\n    var updatedDatabaseProperties = this.state.databaseProperties; // Store from current state\n\n    updatedDatabaseProperties[event.target.name] = event.target.value; // Update the json\n\n    this.setState({\n      databaseProperties: updatedDatabaseProperties\n    }); // Update the state\n  }\n  /*\n  As the database type the user selects changes, update that in the state.\n  */\n\n\n  handleDatabaseTypeChange(event) {\n    console.log(\"------- changed --------\");\n    var lastDatabaseType = this.state['Database Type'];\n\n    if (lastDatabaseType !== event.target.value) {\n      // If database type was changed\n      this.setState({\n        'Database Type': event.target.value\n      }, function () {\n        // Update state, then get config for the db type\n        fetch(databaseGetBaseUrl + \"/config?dbId=\" + this.state['Database Type']).then(res => res.json()).then(result => {\n          // Update state so can have reference to the config\n          this.setState({\n            databaseConfig: result\n          }, function () {\n            this.setState({\n              showDatabaseSpecificSettings: true\n            });\n          });\n        }, error => {\n          console.log(error);\n          this.setState({\n            errorIsOpen: true\n          });\n        });\n      });\n      this.setState({\n        showDatabaseSpecificSettings: false\n      }); // Reset to false after render to get ready for next render (if use changes database type)\n    }\n  }\n\n  render() {\n    console.log(this.state);\n    return [React.createElement(\"div\", {\n      className: \"container\",\n      key: \"databaseConnectionScreen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Database Connection\"), React.createElement(\"p\", {\n      className: \"screenInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Please fill in the following fields to connect to the database that will store the data.\"), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      required: true,\n      className: \"form-control\",\n      id: \"Database Type Select\",\n      name: \"Database Type\",\n      onChange: this.handleDatabaseTypeChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      selected: true,\n      disabled: true,\n      hidden: true,\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Select a Database Type\"), this.getSupportedDatabaseTypeOptions())), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, this.state.showDatabaseSpecificSettings ? this.createDatabaseFields() : null, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right footer-button\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Connect\")), React.createElement(Link, {\n      to: \"/chooseNetwork\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left footer-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Back\")), React.createElement(Button, {\n      variant: \"success\",\n      className: \"footer-button button-mid-bottom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"Test Connection\")), React.createElement(Modal, {\n      show: this.state.errorIsOpen,\n      key: \"getDatabaseConfigError\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(ErrorModalBody, {\n      errorMessage: \"Could not get database configuration due to an error. Please try again.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left\",\n      onClick: this.toggleErrorModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"OK\")))];\n  }\n\n}\n\nexport default DatabaseConnection;","map":{"version":3,"sources":["C:\\Users\\Juan Garcia Lopez\\Desktop\\seniorDesign\\chariot\\gui\\src\\components\\databaseManagement\\DatabaseConnection.js"],"names":["React","Component","Link","Button","Modal","ConfirmationModalBody","SuccessModalBody","ErrorModalBody","databaseGetBaseUrl","DatabaseConnection","constructor","props","getSupportedDatabaseTypeOptions","databaseOptionsElement","k","state","supportedDatabaseTypes","length","push","createDatabaseFields","config","databaseConfig","settings","databaseSpecificForm","console","log","i","curFieldAlias","alias","curFieldDescription","description","curFieldType","inputType","curFieldTitle","title","curFieldIsRequired","required","handleChange","toggleErrorModal","setState","errorIsOpen","chosenNetwork","location","networkProps","databaseProperties","showDatabaseSpecificSettings","bind","handleDatabaseTypeChange","componentDidMount","fetch","then","res","json","result","tempSupportedDatabaseTypes","key","error","message","event","updatedDatabaseProperties","target","name","value","lastDatabaseType","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\n\nimport ConfirmationModalBody from '../shared/ConfirmationModalBody';\nimport SuccessModalBody from '../shared/SuccessModalBody';\nimport ErrorModalBody from '../shared/ErrorModalBody';\n\nconst databaseGetBaseUrl = \"http://localhost:5000/chariot/api/v1.0/database\"\n\nclass DatabaseConnection extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chosenNetwork: this.props.location.networkProps['Network Name'], // Network user chose on previous screen\n      supportedDatabaseTypes: [],\n      'Database Type' : '',\n      databaseConfig : {},\n      databaseProperties: {},\n      showDatabaseSpecificSettings: false,\n      errorIsOpen: false\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleDatabaseTypeChange = this.handleDatabaseTypeChange.bind(this);\n  }\n\n  // Gets supported database types when page initially loads in order to dynamically fill in select-menu\n  componentDidMount() {\n    fetch(databaseGetBaseUrl + \"/supportedDatabases\")\n    .then(res => res.json())\n    .then(\n      (result) => {\n        var tempSupportedDatabaseTypes = [];\n        for (var key in result) {\n          tempSupportedDatabaseTypes.push(key);\n        }\n        this.setState({supportedDatabaseTypes: tempSupportedDatabaseTypes});\n      },\n      (error) => {\n        console.log(error.message);\n      }\n    )\n  }\n\n  // Create the option elements for the select-menu\n  getSupportedDatabaseTypeOptions = () => {\n    var databaseOptionsElement = [];\n\n    for (var k = 0; k < this.state.supportedDatabaseTypes.length; k++) {\n      databaseOptionsElement.push(<option>{this.state.supportedDatabaseTypes[k]}</option>);\n    }\n\n    return databaseOptionsElement;\n  }\n\n  handleChange(event) {\n    var updatedDatabaseProperties = this.state.databaseProperties; // Store from current state\n    updatedDatabaseProperties[event.target.name] = event.target.value; // Update the json\n    \n    this.setState({ databaseProperties: updatedDatabaseProperties }); // Update the state\n  }\n\n  /*\n  As the database type the user selects changes, update that in the state.\n  */\n  handleDatabaseTypeChange(event) {\n    console.log(\"------- changed --------\");\n    var lastDatabaseType = this.state['Database Type'];\n\n    if (lastDatabaseType !== event.target.value) { // If database type was changed\n      this.setState({'Database Type': event.target.value }, function () { // Update state, then get config for the db type\n        fetch(databaseGetBaseUrl + \"/config?dbId=\" + this.state['Database Type'])\n        .then(res => res.json())\n        .then(\n          (result) => {\n            // Update state so can have reference to the config\n            this.setState({databaseConfig: result}, function () {\n              this.setState({ showDatabaseSpecificSettings: true});\n            });\n          },\n          (error) => {\n            console.log(error);\n            this.setState({ errorIsOpen: true});\n          }\n        )\n      });\n\n      this.setState({ showDatabaseSpecificSettings: false}); // Reset to false after render to get ready for next render (if use changes database type)\n    }\n  }\n\n  createDatabaseFields = () => {\n    var config = this.state.databaseConfig[this.state['Database Type']].settings;\n    var databaseSpecificForm = [];\n    console.log(config);\n    \n    for (var i = 0; i < config.length; i++) {\n      var curFieldAlias = config[i].alias;\n      var curFieldDescription = config[i].description;\n      var curFieldType = config[i].inputType;\n      var curFieldTitle = config[i].title;\n      var curFieldIsRequired = config[i].required;\n\n      databaseSpecificForm.push(\n        <div className=\"form-group\" key={curFieldAlias}>\n          {curFieldIsRequired ? <div className=\"requiredStar\">*</div> : \"\"}\n          {curFieldTitle}\n          <input type={curFieldType}  required={curFieldIsRequired} className={curFieldType === \"checkbox\" ? 'deviceCreationFormCheckbox' : 'form-control'} id={curFieldAlias} name={curFieldTitle} onChange={this.handleChange}/>\n        </div>\n      );\n    }\n\n    return databaseSpecificForm;\n  }\n\n  toggleErrorModal = () => {\n    this.setState({ errorIsOpen: !this.state.errorIsOpen });\n  }\n\n\n  render() {\n    console.log(this.state);\n    return [\n      <div className=\"container\" key=\"databaseConnectionScreen\">\n        <h1>Database Connection</h1>\n        <p className=\"screenInfo\">Please fill in the following fields to connect to the database that will store the data.</p>\n\n        <div className=\"form-group\">\n              <select required className=\"form-control\" id=\"Database Type Select\" name=\"Database Type\" onChange={this.handleDatabaseTypeChange}>\n                <option selected disabled hidden value=\"\">Select a Database Type</option>\n                {this.getSupportedDatabaseTypeOptions()}\n              </select>\n          </div>\n\n\n        <form>\n          {this.state.showDatabaseSpecificSettings ? this.createDatabaseFields() : null}\n          <Button variant=\"primary\" className=\"float-right footer-button\" type=\"submit\">Connect</Button>\n        </form>\n\n\n        <Link to=\"/chooseNetwork\">\n            <Button variant=\"primary\" className=\"float-left footer-button\">Back</Button>\n        </Link>\n\n        <Button variant=\"success\" className=\"footer-button button-mid-bottom\">Test Connection</Button>\n\n      </div>,\n\n      <Modal show={this.state.errorIsOpen} key=\"getDatabaseConfigError\">\n\n        <ErrorModalBody errorMessage='Could not get database configuration due to an error. Please try again.'>\n        </ErrorModalBody>\n\n        <Modal.Footer>\n          <Button variant=\"primary\" className=\"float-left\" onClick={this.toggleErrorModal}>OK</Button>\n        </Modal.Footer>\n      </Modal>\n\n    ]\n  }\n\n\n\n\n}\n\nexport default DatabaseConnection;"]},"metadata":{},"sourceType":"module"}