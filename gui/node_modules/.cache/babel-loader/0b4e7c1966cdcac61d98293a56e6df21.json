{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hojoh\\\\Desktop\\\\Senior Design\\\\chariot\\\\gui\\\\src\\\\components\\\\shared\\\\NetworkDeviceCellScreenTemplate.js\";\n\n/*\n\n\n*/\nimport React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom';\n\nclass NetworkDeviceCellScreenTemplate extends Component {\n  constructor(props) {\n    super(props);\n\n    this.createCells = () => {\n      var networkLinks = [];\n\n      for (var i = 0; i < this.state.dataJson.length; i++) {\n        var deviceTags = []; // Reset list of devices for network-to-be-displayed\n\n        var curNetworkName = this.state.dataJson[i][\"NetworkName\"];\n        var curNetworkDescription = this.state.dataJson[i][\"Description\"];\n        var buttonElement = [];\n\n        switch (this.state.type) {\n          // For DeleteNetwork\n          case \"delete\":\n            buttonElement.push(React.createElement(Button, {\n              key: \"deleteNetworkButton\" + i,\n              className: \"float-right\",\n              variant: \"danger\",\n              size: \"sm\",\n              onClick: this.props.deleteNetwork.bind(this, curNetworkName),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 35\n              },\n              __self: this\n            }, \"Delete Network\"));\n            break;\n          // For ManageExistingNetworks\n\n          case \"manage\":\n            buttonElement.push(React.createElement(Link, {\n              key: \"manageNetworkButton\" + i,\n              to: {\n                pathname: '/addDeviceHome',\n                networkProps: {\n                  'Network Name': curNetworkName\n                }\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 43\n              },\n              __self: this\n            }, React.createElement(Button, {\n              className: \"float-right\",\n              variant: \"light\",\n              size: \"sm\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 44\n              },\n              __self: this\n            }, \"Add Device\")));\n            break;\n          // For ChooseNetwork\n\n          case \"chooseNetwork\":\n            buttonElement.push(React.createElement(Link, {\n              key: \"chooseNetworkButton\" + i,\n              to: {\n                pathname: '/chooseDatabaseConfig',\n                networkProps: {\n                  'Network Name': curNetworkName\n                }\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 53\n              },\n              __self: this\n            }, React.createElement(Button, {\n              className: \"float-right\",\n              variant: \"success\",\n              size: \"sm\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 54\n              },\n              __self: this\n            }, \"Choose Network\")));\n            break;\n\n          case \"chooseDatabase\":\n            break;\n        }\n\n        if (this.state.withLinks) {\n          var curDeviceKey;\n          var curDeviceName; // Create links for network's corresponding devices\n\n          if (this.state.dataJson[i][\"Devices\"].length > 0) {\n            for (var k = 0; k < this.state.dataJson[i][\"Devices\"].length; k++) {\n              curDeviceKey = curNetworkName + \"Device\" + k;\n              curDeviceName = this.state.dataJson[i][\"Devices\"][k];\n              deviceTags.push(React.createElement(\"div\", {\n                key: curDeviceKey,\n                className: \"networksDeviceLink\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 75\n                },\n                __self: this\n              }, React.createElement(\"b\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 76\n                },\n                __self: this\n              }, \"Device \", k + 1, \": \"), React.createElement(Link, {\n                to: {\n                  pathname: \"/manageExistingDevices/devices/\" + curNetworkName + \"/\" + curDeviceName,\n                  networkProps: {\n                    'Network Name': curNetworkName,\n                    'Device Name': curDeviceName\n                  }\n                },\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 77\n                },\n                __self: this\n              }, curDeviceName), React.createElement(\"br\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 79\n                },\n                __self: this\n              })));\n            }\n          } // If now devices, say so\n          else {\n              deviceTags.push(React.createElement(\"div\", {\n                key: \"noDevices\",\n                className: \"networksDeviceLink\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 87\n                },\n                __self: this\n              }, \"No devices exist for this network.\"));\n            } // Create links for network, then create the jsx for networks/devices\n\n\n          networkLinks.push(React.createElement(\"div\", {\n            className: \"existingNetworkBox\",\n            key: i,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 95\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"existingNetworkCell\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 96\n            },\n            __self: this\n          }, buttonElement, React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 100\n            },\n            __self: this\n          }, React.createElement(\"b\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101\n            },\n            __self: this\n          }, \"Network Name: \"), React.createElement(Link, {\n            to: {\n              pathname: \"/manageExistingNetwork/\" + curNetworkName,\n              networkProps: {\n                'Network Name': curNetworkName\n              }\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102\n            },\n            __self: this\n          }, curNetworkName), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 104\n            },\n            __self: this\n          }), React.createElement(\"b\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 105\n            },\n            __self: this\n          }, \"Description: \"), \" \", curNetworkDescription, React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 105\n            },\n            __self: this\n          })), deviceTags)));\n        } else {\n          // without links\n          if (this.state.dataJson[i][\"Devices\"].length > 0) {\n            for (var j = 0; j < this.state.dataJson[i][\"Devices\"].length; j++) {\n              curDeviceKey = curNetworkName + \"Device\" + j;\n              curDeviceName = this.state.dataJson[i][\"Devices\"][j];\n              deviceTags.push(React.createElement(\"div\", {\n                key: curDeviceKey,\n                className: \"networksDeviceLink\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 118\n                },\n                __self: this\n              }, React.createElement(\"b\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 119\n                },\n                __self: this\n              }, \"Device \", j + 1, \": \"), curDeviceName, React.createElement(\"br\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 119\n                },\n                __self: this\n              })));\n            }\n          } // If now devices, say so\n          else {\n              deviceTags.push(React.createElement(\"div\", {\n                key: curDeviceKey,\n                className: \"networksDeviceLink\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 127\n                },\n                __self: this\n              }, \"No devices exist for this network.\"));\n            } // Create links for network, then create the jsx for networks/devices\n\n\n          networkLinks.push(React.createElement(\"div\", {\n            className: \"existingNetworkBox\",\n            key: i,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 134\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"existingNetworkCell\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 135\n            },\n            __self: this\n          }, buttonElement, React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 139\n            },\n            __self: this\n          }, React.createElement(\"b\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 140\n            },\n            __self: this\n          }, \"Network Name: \"), \" \", curNetworkName, React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 140\n            },\n            __self: this\n          }), React.createElement(\"b\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 141\n            },\n            __self: this\n          }, \"Description: \"), \" \", curNetworkDescription, React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 141\n            },\n            __self: this\n          })), deviceTags)));\n        }\n      }\n\n      return networkLinks;\n    };\n\n    this.state = {\n      dataJson: this.props.dataJson,\n      withLinks: this.props.withLinks,\n      // withLinks = true means clicking on network/devices is possible\n      type: this.props.type // manage, delete, choose\n\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"networkDeviceCells\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, this.createCells());\n  }\n\n}\n\nexport default NetworkDeviceCellScreenTemplate;","map":{"version":3,"sources":["C:\\Users\\hojoh\\Desktop\\Senior Design\\chariot\\gui\\src\\components\\shared\\NetworkDeviceCellScreenTemplate.js"],"names":["React","Component","Button","Link","NetworkDeviceCellScreenTemplate","constructor","props","createCells","networkLinks","i","state","dataJson","length","deviceTags","curNetworkName","curNetworkDescription","buttonElement","type","push","deleteNetwork","bind","pathname","networkProps","withLinks","curDeviceKey","curDeviceName","k","j","render"],"mappings":"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","sourcesContent":["/*\n\n\n*/\n\nimport React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom';\n\nclass NetworkDeviceCellScreenTemplate extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataJson: this.props.dataJson,\n      withLinks: this.props.withLinks, // withLinks = true means clicking on network/devices is possible\n      type: this.props.type // manage, delete, choose\n    }\n  }\n\n\n  createCells = () => {\n    var networkLinks = [];\n\n    for (var i = 0; i < this.state.dataJson.length; i++) {\n      var deviceTags = []; // Reset list of devices for network-to-be-displayed\n      var curNetworkName = this.state.dataJson[i][\"NetworkName\"];\n      var curNetworkDescription = this.state.dataJson[i][\"Description\"];\n\n      var buttonElement = [];\n\n      switch (this.state.type) {\n        // For DeleteNetwork\n        case \"delete\":\n          buttonElement.push(\n            <Button key={\"deleteNetworkButton\" + i} className=\"float-right\" variant=\"danger\" size=\"sm\" onClick={this.props.deleteNetwork.bind(this, curNetworkName)}>\n              Delete Network\n            </Button>\n          )            \n          break;\n        // For ManageExistingNetworks\n        case \"manage\":\n          buttonElement.push(\n            <Link key={\"manageNetworkButton\" + i} to={{pathname:'/addDeviceHome', networkProps:{'Network Name': curNetworkName}}}> \n              <Button className=\"float-right\" variant=\"light\" size=\"sm\">\n                Add Device\n              </Button>\n            </Link>\n          )\n          break;\n        // For ChooseNetwork\n        case \"chooseNetwork\":\n          buttonElement.push(\n            <Link key={\"chooseNetworkButton\" + i} to={{pathname:'/chooseDatabaseConfig', networkProps:{'Network Name': curNetworkName}}}>\n              <Button className=\"float-right\" variant=\"success\" size=\"sm\">\n                Choose Network\n              </Button>\n            </Link>\n          )\n          break;\n        case \"chooseDatabase\":\n          \n          break;\n      }\n      \n      if (this.state.withLinks) {\n        var curDeviceKey;\n        var curDeviceName;\n\n        // Create links for network's corresponding devices\n        if (this.state.dataJson[i][\"Devices\"].length > 0) {\n          for (var k = 0; k < this.state.dataJson[i][\"Devices\"].length; k++) {\n            curDeviceKey = curNetworkName + \"Device\" + k;\n            curDeviceName = this.state.dataJson[i][\"Devices\"][k];       \n            deviceTags.push(\n              <div key={curDeviceKey} className=\"networksDeviceLink\">\n                <b>Device {k + 1}: </b>\n                  <Link to={{pathname:\"/manageExistingDevices/devices/\" + curNetworkName + \"/\" + curDeviceName, networkProps:{'Network Name': curNetworkName, 'Device Name': curDeviceName} }}>\n                    {curDeviceName}\n                  </Link><br></br>\n              </div>\n            );\n          }\n        }\n        // If now devices, say so\n        else {\n          deviceTags.push(\n            <div key=\"noDevices\" className=\"networksDeviceLink\">\n              No devices exist for this network.\n            </div>\n          );\n        }\n\n        // Create links for network, then create the jsx for networks/devices\n        networkLinks.push(\n          <div className=\"existingNetworkBox\" key={i}>\n            <div className=\"existingNetworkCell\">\n\n              {buttonElement}\n              \n              <div>\n                <b>Network Name: </b> \n                  <Link to={{pathname:\"/manageExistingNetwork/\" + curNetworkName, networkProps:{'Network Name': curNetworkName} }}>\n                    {curNetworkName}\n                  </Link><br></br>\n                <b>Description: </b> {curNetworkDescription}<br></br>\n              </div>\n              {deviceTags}\n            </div>\n          </div>\n        );\n      }\n      else { // without links\n        if (this.state.dataJson[i][\"Devices\"].length > 0) {\n          for (var j = 0; j < this.state.dataJson[i][\"Devices\"].length; j++) {\n            curDeviceKey = curNetworkName + \"Device\" + j;\n            curDeviceName = this.state.dataJson[i][\"Devices\"][j];       \n            deviceTags.push(\n              <div key={curDeviceKey} className=\"networksDeviceLink\">\n                <b>Device {j + 1}: </b>{curDeviceName}<br></br>\n              </div>\n            );\n          }\n        }\n        // If now devices, say so\n        else {\n          deviceTags.push(\n            <div key={curDeviceKey} className=\"networksDeviceLink\">\n              No devices exist for this network.\n            </div>\n          );\n        }\n        // Create links for network, then create the jsx for networks/devices\n        networkLinks.push(\n          <div className=\"existingNetworkBox\" key={i}>\n            <div className=\"existingNetworkCell\">\n\n              {buttonElement}\n              \n              <div>\n                <b>Network Name: </b> {curNetworkName}<br></br>\n                <b>Description: </b> {curNetworkDescription}<br></br>\n              </div>\n              {deviceTags}\n            </div>\n          </div>\n        );\n\n      }\n\n    }\n\n\n    return networkLinks;\n  }\n\n\n  render() {\n    return (\n      <div id=\"networkDeviceCells\">\n        {this.createCells()}\n      </div>\n    );\n  }\n}\n\nexport default NetworkDeviceCellScreenTemplate; "]},"metadata":{},"sourceType":"module"}