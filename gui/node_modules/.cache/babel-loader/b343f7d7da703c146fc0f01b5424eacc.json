{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hojoh\\\\Desktop\\\\Senior Design\\\\chariot\\\\gui\\\\src\\\\components\\\\networkManagement\\\\ManageNetworkConfiguration.js\";\n\n/*\n  The component handles the display of the screen to modify a network's network-specific properties.\n*/\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport ConfirmationModalBody from '../shared/ConfirmationModalBody';\nimport SuccessModalBody from '../shared/SuccessModalBody';\nimport ErrorModalBody from '../shared/ErrorModalBody';\nconst getNetworkDetailsBaseUrl = 'http://localhost:5000/chariot/api/v1.0/network';\nconst xhr = new XMLHttpRequest();\n\nclass ManageNetworkConfiguration extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.updateNetworkConfiguration = () => {\n      xhr.open('PUT', getNetworkDetailsBaseUrl);\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\"); // Once a response is received\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          // Once the request is done\n          if (xhr.status === 200) {\n            this.setState({\n              confirmIsOpen: false\n            });\n            this.setState({\n              successIsOpen: !this.state.successIsOpen\n            });\n          } else if (xhr.status === 400) {\n            this.setState({\n              errorIsOpen: !this.state.errorIsOpen\n            }, function () {\n              var returnedErrorMessage = JSON.parse(xhr.response).message;\n              this.setState({\n                errorMessage: returnedErrorMessage\n              }, function () {\n                console.log(this.state.errorMessage);\n              });\n            });\n          }\n        }\n      };\n\n      var data = {};\n\n      if (this.state.originalNetworkName === this.state.newNetworkProperties[\"Network Name\"]) {\n        data = {\n          \"networkName\": this.state.originalNetworkName,\n          \"description\": this.state.newNetworkProperties[\"Network Description\"]\n        };\n      } else {\n        data = {\n          \"networkName\": this.state.originalNetworkName,\n          \"newNetworkName\": this.state.newNetworkProperties[\"Network Name\"],\n          \"description\": this.state.newNetworkProperties[\"Network Description\"]\n        };\n      }\n\n      console.log(data);\n      xhr.send(JSON.stringify(data));\n    };\n\n    this.toggleErrorModal = () => {\n      this.setState({\n        confirmIsOpen: !this.state.confirmIsOpen\n      });\n      this.setState({\n        errorIsOpen: !this.state.errorIsOpen\n      });\n    };\n\n    this.state = {\n      originalNetworkName: this.props.location.networkProps[\"Network Name\"],\n      originalNetworkProperties: {},\n      // Filled by componentDidMount()\n      newNetworkProperties: {\n        \"Network Name\": \"\",\n        \"Network Description\": \"\"\n      },\n      confirmIsOpen: false,\n      successIsOpen: false,\n      errorIsOpen: false,\n      errorMessage: \"\"\n    };\n    this.toggleConfirmationModal = this.toggleConfirmationModal.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    var updatedNetworkProperties = this.state.newNetworkProperties; // Store from current state\n\n    updatedNetworkProperties[event.target.name] = event.target.value; // Update the json\n\n    this.setState({\n      newNetworkProperties: updatedNetworkProperties\n    }); // Update the state\n  }\n\n  toggleConfirmationModal(event) {\n    this.setState({\n      confirmIsOpen: !this.state.confirmIsOpen\n    });\n    event.preventDefault();\n  } // Gets run upon initial component render to load the default values of the text fields\n\n\n  componentDidMount() {\n    xhr.open('GET', getNetworkDetailsBaseUrl + '?networkName=' + this.state.originalNetworkName);\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\"); // Once a response is received\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === XMLHttpRequest.DONE) {\n        // Once the request is done\n        if (xhr.status === 200) {\n          var responseJsonArray = JSON.parse(xhr.response); // Response is a dictionary \n\n          console.log(responseJsonArray);\n          var properties = {};\n          properties[\"Network Name\"] = responseJsonArray[\"networkName\"];\n          properties[\"Network Description\"] = responseJsonArray[\"description\"];\n          this.setState({\n            originalNetworkProperties: properties\n          }); // Initialize all to-be-saved properties to be the original, in the event not all properties are modified so can still be saved\n\n          this.setState({\n            newNetworkProperties: properties\n          });\n        }\n      }\n    };\n\n    xhr.send();\n  }\n\n  render() {\n    return [React.createElement(\"div\", {\n      className: \"container\",\n      key: \"modifyNetworkNetworkSpecificSettingsScreen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, this.state.originalNetworkName, \" - Network Configuration\"), React.createElement(\"p\", {\n      className: \"screenInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Modify the network-specific configuration for \", this.stateoriginalNetworkName, \" below, then click 'Save' to confirm the changes.\"), React.createElement(\"form\", {\n      id: \"modifyNetworkForm\",\n      onSubmit: this.toggleConfirmationModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Network Name: \", React.createElement(\"input\", {\n      className: \"form-control\",\n      id: \"networkNameInput\",\n      name: \"Network Name\",\n      defaultValue: this.state.originalNetworkName,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Network Description: \", React.createElement(\"textarea\", {\n      className: \"form-control\",\n      id: \"networkDescriptionInput\",\n      rows: \"5\",\n      name: \"Network Description\",\n      defaultValue: this.state.originalNetworkProperties[\"Network Description\"],\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    })), React.createElement(Link, {\n      to: \"/networkManager\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left footer-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Back\")), React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right footer-button\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Save\"))), React.createElement(Modal, {\n      show: this.state.confirmIsOpen,\n      key: \"modifyNetworkNetworkSpecificSettingsConfirmationModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(ConfirmationModalBody, {\n      confirmationQuestion: \"Are the network settings displayed below correct?\",\n      confirmationData: this.state.newNetworkProperties,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left\",\n      onClick: this.toggleConfirmationModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"No\"), React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right\",\n      onClick: this.updateNetworkConfiguration,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"Yes\"))), React.createElement(Modal, {\n      show: this.state.successIsOpen,\n      key: \"modifyNetworkNetworkSpecificSettingsSuccessModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(SuccessModalBody, {\n      successMessage: \"The network was succesfully modified! Click \\\"Continue\\\" to go back to the \\\"Network Manager\\\" screen.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/networkManager\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"Continue\")))), React.createElement(Modal, {\n      show: this.state.errorIsOpen && this.state.errorMessage,\n      key: \"modifyNetworkNetworkSpecificSettingsErrorModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(ErrorModalBody, {\n      errorMessage: this.state.errorMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left\",\n      onClick: this.toggleErrorModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"OK\")))];\n  }\n\n}\n\nexport default ManageNetworkConfiguration;","map":{"version":3,"sources":["C:\\Users\\hojoh\\Desktop\\Senior Design\\chariot\\gui\\src\\components\\networkManagement\\ManageNetworkConfiguration.js"],"names":["React","Link","Button","Modal","ConfirmationModalBody","SuccessModalBody","ErrorModalBody","getNetworkDetailsBaseUrl","xhr","XMLHttpRequest","ManageNetworkConfiguration","Component","constructor","props","updateNetworkConfiguration","open","setRequestHeader","onreadystatechange","readyState","DONE","status","setState","confirmIsOpen","successIsOpen","state","errorIsOpen","returnedErrorMessage","JSON","parse","response","message","errorMessage","console","log","data","originalNetworkName","newNetworkProperties","send","stringify","toggleErrorModal","location","networkProps","originalNetworkProperties","toggleConfirmationModal","bind","handleChange","event","updatedNetworkProperties","target","name","value","preventDefault","componentDidMount","responseJsonArray","properties","render","stateoriginalNetworkName"],"mappings":"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","sourcesContent":["/*\n  The component handles the display of the screen to modify a network's network-specific properties.\n*/\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport ConfirmationModalBody from '../shared/ConfirmationModalBody';\nimport SuccessModalBody from '../shared/SuccessModalBody';\nimport ErrorModalBody from '../shared/ErrorModalBody';\n\nconst getNetworkDetailsBaseUrl = 'http://localhost:5000/chariot/api/v1.0/network';\nconst xhr = new XMLHttpRequest();\n\nclass ManageNetworkConfiguration extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      originalNetworkName: this.props.location.networkProps[\"Network Name\"],\n      originalNetworkProperties: {}, // Filled by componentDidMount()\n      newNetworkProperties: {\n        \"Network Name\": \"\",\n        \"Network Description\": \"\"\n      },\n      confirmIsOpen: false,\n      successIsOpen: false,\n      errorIsOpen: false,\n      errorMessage: \"\"\n    }    \n\n    this.toggleConfirmationModal = this.toggleConfirmationModal.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n\n  handleChange(event) {\n    var updatedNetworkProperties = this.state.newNetworkProperties; // Store from current state\n    updatedNetworkProperties[event.target.name] = event.target.value; // Update the json\n    \n    this.setState({ newNetworkProperties: updatedNetworkProperties }); // Update the state\n  }\n\n\n  toggleConfirmationModal(event) {\n    this.setState({ confirmIsOpen: !this.state.confirmIsOpen });\n    event.preventDefault();\n  }\n\n\n  // Gets run upon initial component render to load the default values of the text fields\n  componentDidMount() {\n    xhr.open('GET', getNetworkDetailsBaseUrl + '?networkName=' + this.state.originalNetworkName);\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n    // Once a response is received\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === XMLHttpRequest.DONE) { // Once the request is done\n        if (xhr.status === 200) {\n          var responseJsonArray = JSON.parse(xhr.response); // Response is a dictionary \n\n          console.log(responseJsonArray);\n\n          var properties = {};\n          properties[\"Network Name\"] = responseJsonArray[\"networkName\"];\n          properties[\"Network Description\"] = responseJsonArray[\"description\"];\n\n          this.setState({originalNetworkProperties: properties});\n\n          // Initialize all to-be-saved properties to be the original, in the event not all properties are modified so can still be saved\n          this.setState({newNetworkProperties: properties});\n        }\n      }\n    }\n    \n    xhr.send();\n  }\n\n\n  updateNetworkConfiguration = () => {\n    xhr.open('PUT', getNetworkDetailsBaseUrl);\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    \n    // Once a response is received\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === XMLHttpRequest.DONE) { // Once the request is done\n        if (xhr.status === 200) {\n          this.setState({ confirmIsOpen: false });\n          this.setState({ successIsOpen: !this.state.successIsOpen });\n        }\n        else if (xhr.status === 400){\n          this.setState({ errorIsOpen: !this.state.errorIsOpen }, function () {\n            var returnedErrorMessage = JSON.parse(xhr.response).message;\n            this.setState({ errorMessage: returnedErrorMessage }, function () {\n              console.log(this.state.errorMessage);\n            });\n          });\n          \n        }\n      }\n    }\n\n    var data = {};\n\n    if (this.state.originalNetworkName === this.state.newNetworkProperties[\"Network Name\"]) {\n      data = {\n        \"networkName\": this.state.originalNetworkName,\n        \"description\": this.state.newNetworkProperties[\"Network Description\"]\n      }\n    }\n    else {\n      data = {\n        \"networkName\": this.state.originalNetworkName,\n        \"newNetworkName\": this.state.newNetworkProperties[\"Network Name\"],\n        \"description\": this.state.newNetworkProperties[\"Network Description\"]\n      }     \n    }\n\n    console.log(data);\n    \n    xhr.send(JSON.stringify(data));\n  }\n\n  toggleErrorModal = () => {\n    this.setState({confirmIsOpen: !this.state.confirmIsOpen});\n    this.setState({errorIsOpen: !this.state.errorIsOpen});\n  }\n\n\n  render() {\n    return [\n      <div className=\"container\" key=\"modifyNetworkNetworkSpecificSettingsScreen\">\n        <h1>{this.state.originalNetworkName} - Network Configuration</h1>\n        <p className=\"screenInfo\">Modify the network-specific configuration for {this.stateoriginalNetworkName} below, then click 'Save' to confirm the changes.</p>\n\n        <form id=\"modifyNetworkForm\" onSubmit={this.toggleConfirmationModal}>\n            <div className=\"form-group\">\n              Network Name: <input className=\"form-control\" id=\"networkNameInput\" name=\"Network Name\" defaultValue={this.state.originalNetworkName} onChange={this.handleChange}/>\n            </div>\n            <div className=\"form-group\">\n              Network Description: <textarea className=\"form-control\" id=\"networkDescriptionInput\" rows=\"5\" name=\"Network Description\" defaultValue={this.state.originalNetworkProperties[\"Network Description\"]} onChange={this.handleChange}></textarea>\n            </div>\n            <Link to=\"/networkManager\">\n              <Button variant=\"primary\" className=\"float-left footer-button\">Back</Button>\n            </Link>\n            <Button variant=\"primary\" className=\"float-right footer-button\" type=\"submit\">Save</Button>\n        </form>\n\n      </div>,\n\n    <Modal show={this.state.confirmIsOpen} key=\"modifyNetworkNetworkSpecificSettingsConfirmationModal\">\n        <ConfirmationModalBody\n          confirmationQuestion='Are the network settings displayed below correct?'\n          confirmationData = {this.state.newNetworkProperties}\n          >\n        </ConfirmationModalBody>\n        \n      <Modal.Footer>\n        <Button variant=\"primary\" className=\"float-left\" onClick={this.toggleConfirmationModal}>No</Button>\n        <Button variant=\"primary\" className=\"float-right\" onClick={this.updateNetworkConfiguration}>Yes</Button>\n      </Modal.Footer>\n    </Modal>,\n\n    <Modal show={this.state.successIsOpen} key=\"modifyNetworkNetworkSpecificSettingsSuccessModal\">\n\n      <SuccessModalBody successMessage='The network was succesfully modified! Click \"Continue\" to go back to the \"Network Manager\" screen.'>\n      </SuccessModalBody>\n\n      <Modal.Footer>\n        <Link to=\"/networkManager\">\n          <Button variant=\"primary\" className=\"float-left\">Continue</Button>\n        </Link>\n      </Modal.Footer>\n    </Modal>,\n\n    <Modal show={this.state.errorIsOpen && this.state.errorMessage} key=\"modifyNetworkNetworkSpecificSettingsErrorModal\">\n\n      <ErrorModalBody errorMessage={this.state.errorMessage}>\n      </ErrorModalBody>\n\n      <Modal.Footer>\n        <Button variant=\"primary\" className=\"float-left\" onClick={this.toggleErrorModal}>OK</Button>\n      </Modal.Footer>\n    </Modal>\n\n    ]\n  }\n}\n\nexport default ManageNetworkConfiguration;"]},"metadata":{},"sourceType":"module"}