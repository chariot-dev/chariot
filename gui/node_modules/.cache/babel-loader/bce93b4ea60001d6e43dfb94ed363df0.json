{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Juan Garcia Lopez\\\\Desktop\\\\seniorDesign\\\\chariot\\\\gui\\\\src\\\\components\\\\networkManagement\\\\DeleteNetwork.js\";\n\n/*\n  The component that handles the functinality for deleting a network. The body of the screen (network/device info)\n  is generated through NetworkDeviceCellScreenTemplate as the child component, and uses a callback to update this \n  component's state. deleteNetwork={this.deleteConfirmation.bind(this)} is passed as a callback to \n  NetworkDeviceCellScreenTemplate. When the 'Delete Network' is pressed in the child (NetworkDeviceCellScreenTemplate), \n  it calls this.props.deleteNetwork.bind(this, curNetworkName), which in turn, calls deleteConfirmation(selectedNetwork) \n  in the parent (this component).\n*/\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport NetworkDeviceCellScreenTemplate from '../shared/NetworkDeviceCellScreenTemplate';\nimport SuccessModalBody from '../shared/SuccessModalBody';\nconst getAllNetworksBaseUrl = 'http://localhost:5000/chariot/api/v1.0/networks/all';\nconst deleteNetworkBaseUrl = 'http://localhost:5000/chariot/api/v1.0/network';\n\nclass DeleteNetwork extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleSuccessModal = () => {\n      // Delete request options\n      const requestOptions = {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      fetch(deleteNetworkBaseUrl + \"?networkName=\" + this.state.selectedNetworkToDelete, requestOptions) // On success\n      .then(() => {\n        this.setState({\n          confirmIsOpen: false\n        });\n        this.setState({\n          successIsOpen: !this.state.successIsOpen\n        });\n      }, // On error\n      error => {\n        console.log(error.message);\n        /*\n          Have an error modal for being unable to get network fields. Once button on the error modal is clicked, Chariot goes back to welcome screen\n        */\n      });\n    };\n\n    this.state = {\n      existingNetworks: [],\n      confirmIsOpen: false,\n      selectedNetworkToDelete: null,\n      successIsOpen: false\n    };\n    this.hideConfirmationModal = this.hideConfirmationModal.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(getAllNetworksBaseUrl).then(res => res.json()).then( // On success\n    result => {\n      var responseJsonArray = result; // Response is a dictionary  \n\n      var updatedNetworksJsonArray = this.state.existingNetworks;\n\n      for (var i = 0; i < responseJsonArray.length; i++) {\n        updatedNetworksJsonArray.push(responseJsonArray[i]);\n      }\n\n      this.setState({\n        existingNetworks: updatedNetworksJsonArray\n      });\n    }, // On error\n    error => {\n      console.log(error.message);\n      /*\n        Have an error modal for being unable to get device types. Once button on the modal is clicked, Chariot goes back to welcome screen\n      */\n    });\n  }\n\n  deleteConfirmation(selectedNetwork) {\n    this.setState({\n      confirmIsOpen: true\n    });\n    this.setState({\n      selectedNetworkToDelete: selectedNetwork\n    });\n    console.log(selectedNetwork);\n  }\n\n  hideConfirmationModal(event) {\n    this.setState({\n      confirmIsOpen: !this.state.confirmIsOpen\n    });\n    event.preventDefault();\n  }\n\n  render() {\n    return [React.createElement(\"div\", {\n      className: \"container\",\n      key: \"deleteNetworkScreen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Delete an Existing Network\"), React.createElement(\"p\", {\n      className: \"screenInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Select a network to delete. Deleting a network will also delete its corresponding devices.\"), this.state.existingNetworks ? React.createElement(NetworkDeviceCellScreenTemplate, {\n      dataJson: this.state.existingNetworks,\n      withLinks: false,\n      type: \"delete\",\n      deleteNetwork: this.deleteConfirmation.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }) : null, React.createElement(Link, {\n      to: \"/networkManager\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left footer-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Back\"))), React.createElement(Modal, {\n      show: this.state.confirmIsOpen,\n      key: \"networkDeletionConfirmModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"To confirm the deletion of the network, \", this.state.selectedNetworkToDelete, \", click 'Yes'.\"), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left\",\n      onClick: this.hideConfirmationModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"No\"), React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right\",\n      onClick: this.toggleSuccessModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Yes\"))), React.createElement(Modal, {\n      show: this.state.successIsOpen,\n      key: \"networkDeletionSuccessModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(SuccessModalBody, {\n      successMessage: \"The network has been deleted!\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/welcome\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Continue\"))))];\n  }\n\n}\n\nexport default DeleteNetwork;","map":{"version":3,"sources":["C:\\Users\\Juan Garcia Lopez\\Desktop\\seniorDesign\\chariot\\gui\\src\\components\\networkManagement\\DeleteNetwork.js"],"names":["React","Component","Link","Button","Modal","NetworkDeviceCellScreenTemplate","SuccessModalBody","getAllNetworksBaseUrl","deleteNetworkBaseUrl","DeleteNetwork","constructor","props","toggleSuccessModal","requestOptions","method","headers","fetch","state","selectedNetworkToDelete","then","setState","confirmIsOpen","successIsOpen","error","console","log","message","existingNetworks","hideConfirmationModal","bind","componentDidMount","res","json","result","responseJsonArray","updatedNetworksJsonArray","i","length","push","deleteConfirmation","selectedNetwork","event","preventDefault","render"],"mappings":"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","sourcesContent":["/*\n  The component that handles the functinality for deleting a network. The body of the screen (network/device info)\n  is generated through NetworkDeviceCellScreenTemplate as the child component, and uses a callback to update this \n  component's state. deleteNetwork={this.deleteConfirmation.bind(this)} is passed as a callback to \n  NetworkDeviceCellScreenTemplate. When the 'Delete Network' is pressed in the child (NetworkDeviceCellScreenTemplate), \n  it calls this.props.deleteNetwork.bind(this, curNetworkName), which in turn, calls deleteConfirmation(selectedNetwork) \n  in the parent (this component).\n*/\n\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\n\nimport NetworkDeviceCellScreenTemplate from '../shared/NetworkDeviceCellScreenTemplate';\n\nimport SuccessModalBody from '../shared/SuccessModalBody';\n\nconst getAllNetworksBaseUrl = 'http://localhost:5000/chariot/api/v1.0/networks/all';\nconst deleteNetworkBaseUrl = 'http://localhost:5000/chariot/api/v1.0/network';\n\nclass DeleteNetwork extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      existingNetworks: [],\n      confirmIsOpen: false,\n      selectedNetworkToDelete: null,\n      successIsOpen: false\n    }\n\n    this.hideConfirmationModal = this.hideConfirmationModal.bind(this);\n  } \n\n  componentDidMount() {\n    fetch(getAllNetworksBaseUrl)\n    .then(res => res.json())\n    .then(\n      // On success\n      (result) => {\n        var responseJsonArray = result; // Response is a dictionary  \n\n        var updatedNetworksJsonArray = this.state.existingNetworks;\n\n        for (var i = 0; i < responseJsonArray.length; i++) {\n          updatedNetworksJsonArray.push(responseJsonArray[i]);\n        }\n\n        this.setState({ existingNetworks: updatedNetworksJsonArray });\n      },\n      // On error\n      (error) => {\n        console.log(error.message);\n\n  \n        /*\n          Have an error modal for being unable to get device types. Once button on the modal is clicked, Chariot goes back to welcome screen\n        */ \n      }\n    )\n  }\n\n\n  deleteConfirmation(selectedNetwork) {\n    this.setState({confirmIsOpen: true});\n    this.setState({selectedNetworkToDelete: selectedNetwork});\n    console.log(selectedNetwork)\n  }\n\n\n  hideConfirmationModal(event) {\n    this.setState({\n      confirmIsOpen: !this.state.confirmIsOpen\n    });    \n    event.preventDefault();\n  }\n\n\n  toggleSuccessModal = () => {\n    // Delete request options\n    const requestOptions = {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' }\n    };\n\n    fetch(deleteNetworkBaseUrl + \"?networkName=\" + this.state.selectedNetworkToDelete, requestOptions)\n    // On success\n    .then(\n      () => {\n        this.setState({\n          confirmIsOpen: false\n        });\n        this.setState({\n          successIsOpen: !this.state.successIsOpen\n        });\n      },\n      // On error\n      (error) => {\n        console.log(error.message);\n\n    \n        /*\n          Have an error modal for being unable to get network fields. Once button on the error modal is clicked, Chariot goes back to welcome screen\n        */ \n      }\n    )\n  }\n\n\n  render() {\n    return [\n      <div className=\"container\" key=\"deleteNetworkScreen\">\n        <h1>Delete an Existing Network</h1>\n        <p className=\"screenInfo\">\n          Select a network to delete. Deleting a network will also delete its corresponding devices.\n        </p>\n\n        {/* {this.state.existingNetworkNames ? this.createNetworkLinks() : null} */}\n\n        {this.state.existingNetworks ? <NetworkDeviceCellScreenTemplate dataJson={this.state.existingNetworks} withLinks={false} type=\"delete\" deleteNetwork={this.deleteConfirmation.bind(this)}></NetworkDeviceCellScreenTemplate> : null}\n        \n        <Link to=\"/networkManager\">\n          <Button variant=\"primary\" className=\"float-left footer-button\">Back</Button>\n        </Link>\n      </div>,\n\n      <Modal show={this.state.confirmIsOpen} key=\"networkDeletionConfirmModal\">\n        <Modal.Body>\n          To confirm the deletion of the network, {this.state.selectedNetworkToDelete}, click 'Yes'.\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" className=\"float-left\" onClick={this.hideConfirmationModal}>No</Button>\n          <Button variant=\"primary\" className=\"float-right\" onClick={this.toggleSuccessModal}>Yes</Button>\n        </Modal.Footer>\n      </Modal>,\n\n      <Modal show={this.state.successIsOpen} key=\"networkDeletionSuccessModal\">\n\n        <SuccessModalBody successMessage=\"The network has been deleted!\">\n        </SuccessModalBody>\n\n        <Modal.Footer>\n          <Link to=\"/welcome\">\n            <Button variant=\"primary\" className=\"float-right\">Continue</Button>\n          </Link>\n        </Modal.Footer>\n      </Modal>\n    ]\n  }\n\n}\n\nexport default DeleteNetwork; "]},"metadata":{},"sourceType":"module"}