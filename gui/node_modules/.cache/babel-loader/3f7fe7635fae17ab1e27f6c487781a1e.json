{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Juan Garcia Lopez\\\\Desktop\\\\seniorDesign\\\\chariot\\\\gui\\\\src\\\\components\\\\networkManagement\\\\ManageNetworkConfiguration.js\";\n\n/*\n  The component handles the display of the screen to modify a network's network-specific properties.\n*/\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport ConfirmationModalBody from '../shared/ConfirmationModalBody';\nimport SuccessModalBody from '../shared/SuccessModalBody';\nimport ErrorModalBody from '../shared/ErrorModalBody';\nconst getNetworkDetailsBaseUrl = 'http://localhost:5000/chariot/api/v1.0/network';\n\nclass ManageNetworkConfiguration extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.updateNetworkConfiguration = () => {\n      var data = {};\n\n      if (this.state.originalNetworkName === this.state.newNetworkProperties[\"Network Name\"]) {\n        data = {\n          \"networkName\": this.state.originalNetworkName,\n          \"description\": this.state.newNetworkProperties[\"Network Description\"]\n        };\n      } else {\n        data = {\n          \"networkName\": this.state.originalNetworkName,\n          \"newNetworkName\": this.state.newNetworkProperties[\"Network Name\"],\n          \"description\": this.state.newNetworkProperties[\"Network Description\"]\n        };\n      }\n\n      const requestOptions = {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      };\n      fetch(getNetworkDetailsBaseUrl, requestOptions).then(() => {\n        this.setState({\n          confirmIsOpen: false\n        });\n        this.setState({\n          successIsOpen: !this.state.successIsOpen\n        });\n      }, // If put was unsuccessful, update state and display error modal\n      error => {\n        this.setState({\n          errorIsOpen: !this.state.errorIsOpen\n        }, function () {\n          var returnedErrorMessage = error.message;\n          this.setState({\n            errorMessage: returnedErrorMessage\n          }, function () {\n            console.log(this.state.errorMessage);\n            /*\n              Have an error modal for being unable to get network fields. Once button on the error modal is clicked, Chariot goes back to welcome screen\n            */\n          });\n        });\n        /*\n          Have an error modal for being unable to get network fields. Once button on the error modal is clicked, Chariot goes back to welcome screen\n        */\n      });\n    };\n\n    this.toggleErrorModal = () => {\n      this.setState({\n        confirmIsOpen: !this.state.confirmIsOpen\n      });\n      this.setState({\n        errorIsOpen: !this.state.errorIsOpen\n      });\n    };\n\n    this.state = {\n      originalNetworkName: this.props.location.networkProps[\"Network Name\"],\n      originalNetworkProperties: {},\n      // Filled by componentDidMount()\n      newNetworkProperties: {\n        \"Network Name\": \"\",\n        \"Network Description\": \"\"\n      },\n      confirmIsOpen: false,\n      successIsOpen: false,\n      errorIsOpen: false,\n      errorMessage: \"\"\n    };\n    this.toggleConfirmationModal = this.toggleConfirmationModal.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    var updatedNetworkProperties = this.state.newNetworkProperties; // Store from current state\n\n    updatedNetworkProperties[event.target.name] = event.target.value; // Update the json\n\n    this.setState({\n      newNetworkProperties: updatedNetworkProperties\n    }); // Update the state\n  }\n\n  toggleConfirmationModal(event) {\n    this.setState({\n      confirmIsOpen: !this.state.confirmIsOpen\n    });\n    event.preventDefault();\n  } // Gets run upon initial component render to load the default values of the text fields\n\n\n  componentDidMount() {\n    fetch(getNetworkDetailsBaseUrl + '?networkName=' + this.state.originalNetworkName).then(res => res.json()).then( // On success\n    result => {\n      var responseJsonArray = result; // Response is a dictionary \n\n      var properties = {};\n      properties[\"Network Name\"] = responseJsonArray[\"networkName\"];\n      properties[\"Network Description\"] = responseJsonArray[\"description\"];\n      this.setState({\n        originalNetworkProperties: properties\n      }); // Initialize all to-be-saved properties to be the original, in the event not all properties are modified so can still be saved\n\n      this.setState({\n        newNetworkProperties: properties\n      });\n    }, // On error\n    error => {\n      console.log(error.message);\n      /*\n        Have an error modal for being unable to get network fields. Once button on the error modal is clicked, Chariot goes back to welcome screen\n      */\n    });\n  }\n\n  render() {\n    return [React.createElement(\"div\", {\n      className: \"container\",\n      key: \"modifyNetworkNetworkSpecificSettingsScreen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, this.state.originalNetworkName, \" - Network Configuration\"), React.createElement(\"p\", {\n      className: \"screenInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Modify the network-specific configuration for \", this.stateoriginalNetworkName, \" below, then click 'Save' to confirm the changes.\"), React.createElement(\"form\", {\n      id: \"modifyNetworkForm\",\n      onSubmit: this.toggleConfirmationModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Network Name: \", React.createElement(\"input\", {\n      className: \"form-control\",\n      id: \"networkNameInput\",\n      name: \"Network Name\",\n      defaultValue: this.state.originalNetworkName,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Network Description: \", React.createElement(\"textarea\", {\n      className: \"form-control\",\n      id: \"networkDescriptionInput\",\n      rows: \"5\",\n      name: \"Network Description\",\n      defaultValue: this.state.originalNetworkProperties[\"Network Description\"],\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    })), React.createElement(Link, {\n      to: \"/manageExistingNetworks\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left footer-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Back\")), React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right footer-button\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"Save\"))), React.createElement(Modal, {\n      show: this.state.confirmIsOpen,\n      key: \"modifyNetworkNetworkSpecificSettingsConfirmationModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(ConfirmationModalBody, {\n      confirmationQuestion: \"Are the network settings displayed below correct?\",\n      confirmationData: this.state.newNetworkProperties,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left\",\n      onClick: this.toggleConfirmationModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"No\"), React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right\",\n      onClick: this.updateNetworkConfiguration,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"Yes\"))), React.createElement(Modal, {\n      show: this.state.successIsOpen,\n      key: \"modifyNetworkNetworkSpecificSettingsSuccessModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(SuccessModalBody, {\n      successMessage: \"The network was succesfully modified! Click \\\"Continue\\\" to go back to the \\\"Network Manager\\\" screen.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/networkManager\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Continue\")))), React.createElement(Modal, {\n      show: this.state.errorIsOpen && this.state.errorMessage,\n      key: \"modifyNetworkNetworkSpecificSettingsErrorModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(ErrorModalBody, {\n      errorMessage: this.state.errorMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left\",\n      onClick: this.toggleErrorModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"OK\")))];\n  }\n\n}\n\nexport default ManageNetworkConfiguration;","map":{"version":3,"sources":["C:\\Users\\Juan Garcia Lopez\\Desktop\\seniorDesign\\chariot\\gui\\src\\components\\networkManagement\\ManageNetworkConfiguration.js"],"names":["React","Link","Button","Modal","ConfirmationModalBody","SuccessModalBody","ErrorModalBody","getNetworkDetailsBaseUrl","ManageNetworkConfiguration","Component","constructor","props","updateNetworkConfiguration","data","state","originalNetworkName","newNetworkProperties","requestOptions","method","headers","body","JSON","stringify","fetch","then","setState","confirmIsOpen","successIsOpen","error","errorIsOpen","returnedErrorMessage","message","errorMessage","console","log","toggleErrorModal","location","networkProps","originalNetworkProperties","toggleConfirmationModal","bind","handleChange","event","updatedNetworkProperties","target","name","value","preventDefault","componentDidMount","res","json","result","responseJsonArray","properties","render","stateoriginalNetworkName"],"mappings":"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","sourcesContent":["/*\n  The component handles the display of the screen to modify a network's network-specific properties.\n*/\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport ConfirmationModalBody from '../shared/ConfirmationModalBody';\nimport SuccessModalBody from '../shared/SuccessModalBody';\nimport ErrorModalBody from '../shared/ErrorModalBody';\n\nconst getNetworkDetailsBaseUrl = 'http://localhost:5000/chariot/api/v1.0/network';\n\nclass ManageNetworkConfiguration extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      originalNetworkName: this.props.location.networkProps[\"Network Name\"],\n      originalNetworkProperties: {}, // Filled by componentDidMount()\n      newNetworkProperties: {\n        \"Network Name\": \"\",\n        \"Network Description\": \"\"\n      },\n      confirmIsOpen: false,\n      successIsOpen: false,\n      errorIsOpen: false,\n      errorMessage: \"\"\n    }    \n\n    this.toggleConfirmationModal = this.toggleConfirmationModal.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n\n  handleChange(event) {\n    var updatedNetworkProperties = this.state.newNetworkProperties; // Store from current state\n    updatedNetworkProperties[event.target.name] = event.target.value; // Update the json\n    \n    this.setState({ newNetworkProperties: updatedNetworkProperties }); // Update the state\n  }\n\n\n  toggleConfirmationModal(event) {\n    this.setState({ confirmIsOpen: !this.state.confirmIsOpen });\n    event.preventDefault();\n  }\n\n\n  // Gets run upon initial component render to load the default values of the text fields\n  componentDidMount() {\n    fetch(getNetworkDetailsBaseUrl + '?networkName=' + this.state.originalNetworkName)\n    .then(res => res.json())\n    .then(\n      // On success\n      (result) => {\n        var responseJsonArray = result; // Response is a dictionary \n\n        var properties = {};\n        properties[\"Network Name\"] = responseJsonArray[\"networkName\"];\n        properties[\"Network Description\"] = responseJsonArray[\"description\"];\n\n        this.setState({originalNetworkProperties: properties});    \n        \n        // Initialize all to-be-saved properties to be the original, in the event not all properties are modified so can still be saved\n        this.setState({newNetworkProperties: properties});\n      },\n      // On error\n      (error) => {\n        console.log(error.message);\n\n    \n        /*\n          Have an error modal for being unable to get network fields. Once button on the error modal is clicked, Chariot goes back to welcome screen\n        */ \n      }\n    )\n  }\n\n\n  updateNetworkConfiguration = () => {\n    var data = {};\n\n    if (this.state.originalNetworkName === this.state.newNetworkProperties[\"Network Name\"]) {\n      data = {\n        \"networkName\": this.state.originalNetworkName,\n        \"description\": this.state.newNetworkProperties[\"Network Description\"]\n      }\n    }\n    else {\n      data = {\n        \"networkName\": this.state.originalNetworkName,\n        \"newNetworkName\": this.state.newNetworkProperties[\"Network Name\"],\n        \"description\": this.state.newNetworkProperties[\"Network Description\"]\n      }     \n    }\n\n    const requestOptions = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data)\n    };\n\n    fetch(getNetworkDetailsBaseUrl, requestOptions)\n    .then(\n      () => {\n        this.setState({ confirmIsOpen: false });\n        this.setState({ successIsOpen: !this.state.successIsOpen }); \n      },\n      // If put was unsuccessful, update state and display error modal\n      (error) => {\n        this.setState({ errorIsOpen: !this.state.errorIsOpen }, function () {\n          var returnedErrorMessage = error.message;\n\n          this.setState({ errorMessage: returnedErrorMessage }, function () {\n            console.log(this.state.errorMessage);\n\n            /*\n              Have an error modal for being unable to get network fields. Once button on the error modal is clicked, Chariot goes back to welcome screen\n            */ \n          });\n        });      \n        /*\n          Have an error modal for being unable to get network fields. Once button on the error modal is clicked, Chariot goes back to welcome screen\n        */ \n      }\n    )\n  }\n\n  toggleErrorModal = () => {\n    this.setState({confirmIsOpen: !this.state.confirmIsOpen});\n    this.setState({errorIsOpen: !this.state.errorIsOpen});\n  }\n\n\n  render() {\n    return [\n      <div className=\"container\" key=\"modifyNetworkNetworkSpecificSettingsScreen\">\n        <h1>{this.state.originalNetworkName} - Network Configuration</h1>\n        <p className=\"screenInfo\">Modify the network-specific configuration for {this.stateoriginalNetworkName} below, then click 'Save' to confirm the changes.</p>\n\n        <form id=\"modifyNetworkForm\" onSubmit={this.toggleConfirmationModal}>\n            <div className=\"form-group\">\n              Network Name: <input className=\"form-control\" id=\"networkNameInput\" name=\"Network Name\" defaultValue={this.state.originalNetworkName} onChange={this.handleChange}/>\n            </div>\n            <div className=\"form-group\">\n              Network Description: <textarea className=\"form-control\" id=\"networkDescriptionInput\" rows=\"5\" name=\"Network Description\" defaultValue={this.state.originalNetworkProperties[\"Network Description\"]} onChange={this.handleChange}></textarea>\n            </div>\n            <Link to=\"/manageExistingNetworks\">\n              <Button variant=\"primary\" className=\"float-left footer-button\">Back</Button>\n            </Link>\n            <Button variant=\"primary\" className=\"float-right footer-button\" type=\"submit\">Save</Button>\n        </form>\n\n      </div>,\n\n    <Modal show={this.state.confirmIsOpen} key=\"modifyNetworkNetworkSpecificSettingsConfirmationModal\">\n        <ConfirmationModalBody\n          confirmationQuestion='Are the network settings displayed below correct?'\n          confirmationData = {this.state.newNetworkProperties}\n          >\n        </ConfirmationModalBody>\n        \n      <Modal.Footer>\n        <Button variant=\"primary\" className=\"float-left\" onClick={this.toggleConfirmationModal}>No</Button>\n        <Button variant=\"primary\" className=\"float-right\" onClick={this.updateNetworkConfiguration}>Yes</Button>\n      </Modal.Footer>\n    </Modal>,\n\n    <Modal show={this.state.successIsOpen} key=\"modifyNetworkNetworkSpecificSettingsSuccessModal\">\n\n      <SuccessModalBody successMessage='The network was succesfully modified! Click \"Continue\" to go back to the \"Network Manager\" screen.'>\n      </SuccessModalBody>\n\n      <Modal.Footer>\n        <Link to=\"/networkManager\">\n          <Button variant=\"primary\" className=\"float-left\">Continue</Button>\n        </Link>\n      </Modal.Footer>\n    </Modal>,\n\n    <Modal show={this.state.errorIsOpen && this.state.errorMessage} key=\"modifyNetworkNetworkSpecificSettingsErrorModal\">\n\n      <ErrorModalBody errorMessage={this.state.errorMessage}>\n      </ErrorModalBody>\n\n      <Modal.Footer>\n        <Button variant=\"primary\" className=\"float-left\" onClick={this.toggleErrorModal}>OK</Button>\n      </Modal.Footer>\n    </Modal>\n\n    ]\n  }\n}\n\nexport default ManageNetworkConfiguration;"]},"metadata":{},"sourceType":"module"}