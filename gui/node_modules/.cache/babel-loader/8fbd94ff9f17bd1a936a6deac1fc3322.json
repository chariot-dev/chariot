{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hojoh\\\\Desktop\\\\Senior Design\\\\chariot\\\\gui\\\\src\\\\components\\\\registerPage\\\\Register.js\";\n\n/*\n  Register.js\n\n  This component handles the GUI for the registration screen, as well as \n  the modals that appear as the registration process is completed.\n*/\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport hiddenPasswordImg from \"../images/hiddenPassword.PNG\";\nimport showPasswordImg from \"../images/showPassword.PNG\";\nimport ConfirmationModalBody from '../shared/ConfirmationModalBody';\nimport SuccessModalBody from '../shared/SuccessModalBody';\n\nclass Register extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleSuccessModal = () => {\n      this.setState({\n        confirmIsOpen: false\n      });\n      this.setState({\n        successIsOpen: !this.state.successIsOpen\n      });\n    };\n\n    this.state = {\n      accountInfo: {\n        \"Full Name\": \"\",\n        // Full-name account attribute\n        \"Username\": \"\",\n        // Username for  attribute\n        \"Password\": \"\",\n        // Password for account\n        \"Email Address\": \"\",\n        // Email-address for account\n        \"Security Question\": \"\",\n        // Security question for account in the event the user forgets their password\n        \"Security Question Answer\": \"\" // Answer to security question\n\n      },\n      securityQuestionOptions: ['What was your first pet\\'s name?', 'What is your dad\\'s middle name?', 'What town or city were you born in?', 'In what town or city was your first full time job?', 'What is your favorite sport\\'s mascot?'],\n      isSubmitted: false,\n      // Whether or not the account information is ready to be sent to the server\n      passwordVisible: false,\n      // Whether or not the password is visible on the screen\n      passwordImg: hiddenPasswordImg,\n      // Current passwordImg that is shown (hidden/visible)\n      confirmIsOpen: false,\n      // Is the confirm modal open?\n      successIsOpen: false // Is the success modal open?\n\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.changePasswordVisibility = this.changePasswordVisibility.bind(this);\n  }\n  /*\n    Updates prop values (account-related) as they are entered by the user.\n  */\n\n\n  handleChange(event) {\n    var updatedAccountInfo = this.state.accountInfo; // Store from current state\n\n    updatedAccountInfo[event.target.name] = event.target.value; // Update the json\n\n    this.setState({\n      accountInfo: updatedAccountInfo\n    }); // Update the state\n  }\n  /* \n    Called when the user either submits the registration form by clicking \"Next\"\n    on the registration screen or \"No\" on the confirmation modal. Will change the \n    \"isSubmitted\" prop to true->false or false->true.\n  */\n\n\n  handleSubmit(event) {\n    this.setState({\n      isSubmitted: !this.state.isSubmitted,\n      confirmIsOpen: !this.state.confirmIsOpen\n    });\n    event.preventDefault(); // To prevent screen from rerendering\n  }\n  /*\n    Function that launches the success modal after the user confirms the account\n    information that they entered is correct. \n    \n    Also makes the POST request to the server to create the new account.\n  */\n\n\n  /*\n    Called when the user clicks the button to view/unview the password they entered.\n  */\n  changePasswordVisibility() {\n    if (this.state.passwordImg === hiddenPasswordImg) {\n      this.setState({\n        passwordImg: showPasswordImg\n      });\n      this.setState({\n        passwordVisible: true\n      });\n    } else {\n      this.setState({\n        passwordImg: hiddenPasswordImg\n      });\n      this.setState({\n        passwordVisible: false\n      });\n    }\n  }\n  /*\n    Returns three separate objects with their unique keys. The first object\n    is the Registration screen itself. This screen contains the fields that\n    the user will have to fill in, in order to create an account. It also \n    contains the \"Next\" button that will lead the user to the other two objects,\n    the confirmation and sucess modals.\n  */\n\n\n  render() {\n    return [// Main regsiter element for register component\n    React.createElement(\"div\", {\n      className: \"general-component-bg\",\n      key: \"registerForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Create an Account\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"To create an account, fill in the required fields, then click \\\"Next.\\\"\")), React.createElement(\"div\", {\n      className: \"card-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      required: true,\n      type: \"text\",\n      className: \"form-control\",\n      id: \"fullname\",\n      name: \"Full Name\",\n      placeholder: \"Full Name\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      required: true,\n      type: \"text\",\n      className: \"form-control\",\n      id: \"username\",\n      name: \"Username\",\n      placeholder: \"Username\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group input-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      required: true,\n      type: this.state.passwordVisible ? \"text\" : \"password\",\n      className: \"form-control\",\n      id: \"password\",\n      name: \"Password\",\n      placeholder: \"Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"input-group-addon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"\\xA0\\xA0\"), React.createElement(\"input\", {\n      required: true,\n      type: this.state.passwordVisible ? \"text\" : \"password\",\n      className: \"form-control\",\n      id: \"confirmPassword\",\n      name: \"Password\",\n      placeholder: \"Confirm Password\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      id: \"passwordVisibilityImg\",\n      src: this.state.passwordImg,\n      alt: \"Hide/Show Password\",\n      onClick: this.changePasswordVisibility,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      required: true,\n      type: \"email\",\n      className: \"form-control\",\n      id: \"emailAddress\",\n      name: \"Email Address\",\n      placeholder: \"Email Address\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), \"You'll need to verify that this email belongs to you.\"), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      required: true,\n      className: \"form-control\",\n      id: \"securityQuestion\",\n      name: \"Security Question\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      selected: true,\n      disabled: true,\n      hidden: true,\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Select a Security Question\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"What was the house number you lived in as a child?\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"What high school did you attend?\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"What is your mother's maiden name?\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"What is your favorite food?\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"What is your favorite sports mascot?\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"What is town/city were you born in?\"))), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      required: true,\n      type: \"text\",\n      className: \"form-control\",\n      id: \"securityQuestionAnswer\",\n      name: \"Security Question Answer\",\n      placeholder: \"Security Question Answer\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"submit\",\n      variant: \"primary\",\n      className: \"float-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"Next\"), React.createElement(\"div\", {\n      className: \"float-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"Already have a Chariot account? \", React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \" Log In\"))))))), // Confirmation modal element for Register component\n    React.createElement(Modal, {\n      show: this.state.confirmIsOpen,\n      key: \"registerConfirmModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(ConfirmationModalBody, {\n      confirmationQuestion: \"Is this information for your account correct?\",\n      confirmationData: this.state.accountInfo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"No\"), React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right\",\n      onClick: this.toggleSuccessModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"Yes\"))), // Sucess modal element for Register component\n    React.createElement(Modal, {\n      show: this.state.successIsOpen,\n      key: \"registerSuccessModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(SuccessModalBody, {\n      successMessage: \"To complete the account creation process, please check your email to complete the account creation process.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \"Continue\"))))];\n  }\n\n}\n\nexport default Register;","map":{"version":3,"sources":["C:\\Users\\hojoh\\Desktop\\Senior Design\\chariot\\gui\\src\\components\\registerPage\\Register.js"],"names":["React","Component","Link","Modal","Button","hiddenPasswordImg","showPasswordImg","ConfirmationModalBody","SuccessModalBody","Register","constructor","props","toggleSuccessModal","setState","confirmIsOpen","successIsOpen","state","accountInfo","securityQuestionOptions","isSubmitted","passwordVisible","passwordImg","handleSubmit","bind","handleChange","changePasswordVisibility","event","updatedAccountInfo","target","name","value","preventDefault","render"],"mappings":"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","sourcesContent":["/*\n  Register.js\n\n  This component handles the GUI for the registration screen, as well as \n  the modals that appear as the registration process is completed.\n*/\n\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\nimport hiddenPasswordImg from \"../images/hiddenPassword.PNG\";\nimport showPasswordImg from \"../images/showPassword.PNG\";\n\nimport ConfirmationModalBody from '../shared/ConfirmationModalBody';\nimport SuccessModalBody from '../shared/SuccessModalBody';\n\nclass Register extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      accountInfo : {\n        \"Full Name\": \"\", // Full-name account attribute\n        \"Username\": \"\", // Username for  attribute\n        \"Password\": \"\", // Password for account\n        \"Email Address\": \"\", // Email-address for account\n        \"Security Question\": \"\", // Security question for account in the event the user forgets their password\n        \"Security Question Answer\": \"\" // Answer to security question\n      },\n      securityQuestionOptions : [\n        'What was your first pet\\'s name?', \n        'What is your dad\\'s middle name?',\n        'What town or city were you born in?',\n        'In what town or city was your first full time job?',\n        'What is your favorite sport\\'s mascot?'\n      ],\n      isSubmitted: false, // Whether or not the account information is ready to be sent to the server\n      passwordVisible: false, // Whether or not the password is visible on the screen\n      passwordImg: hiddenPasswordImg, // Current passwordImg that is shown (hidden/visible)\n      confirmIsOpen: false, // Is the confirm modal open?\n      successIsOpen: false // Is the success modal open?\n    }\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.changePasswordVisibility = this.changePasswordVisibility.bind(this);\n  }\n\n  /*\n    Updates prop values (account-related) as they are entered by the user.\n  */\n  handleChange(event) {\n    var updatedAccountInfo = this.state.accountInfo; // Store from current state\n    updatedAccountInfo[event.target.name] = event.target.value; // Update the json\n    \n    this.setState({ accountInfo: updatedAccountInfo }); // Update the state\n  }\n\n  /* \n    Called when the user either submits the registration form by clicking \"Next\"\n    on the registration screen or \"No\" on the confirmation modal. Will change the \n    \"isSubmitted\" prop to true->false or false->true.\n  */\n  handleSubmit(event) {\n    this.setState({\n      isSubmitted: !this.state.isSubmitted,\n      confirmIsOpen: !this.state.confirmIsOpen\n    });    \n    event.preventDefault(); // To prevent screen from rerendering\n  }\n\n  /*\n    Function that launches the success modal after the user confirms the account\n    information that they entered is correct. \n    \n    Also makes the POST request to the server to create the new account.\n  */\n  toggleSuccessModal = () => {\n    this.setState({\n      confirmIsOpen: false\n    });\n    this.setState({\n      successIsOpen: !this.state.successIsOpen\n    });\n  }\n\n\n  /*\n    Called when the user clicks the button to view/unview the password they entered.\n  */\n  changePasswordVisibility() {\n    if (this.state.passwordImg === hiddenPasswordImg) {\n      this.setState({passwordImg: showPasswordImg});\n      this.setState({passwordVisible: true});\n    } \n    else {\n      this.setState({passwordImg: hiddenPasswordImg});\n      this.setState({passwordVisible: false});\n    }\n  }\n\n  /*\n    Returns three separate objects with their unique keys. The first object\n    is the Registration screen itself. This screen contains the fields that\n    the user will have to fill in, in order to create an account. It also \n    contains the \"Next\" button that will lead the user to the other two objects,\n    the confirmation and sucess modals.\n  */\n  render() {\n    return [\n      // Main regsiter element for register component\n      <div className=\"general-component-bg\" key=\"registerForm\">\n        <div className=\"container\">\n\n          {/* Register screen highlighted via card */}\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <h1>Create an Account</h1>\n              <p>To create an account, fill in the required fields, then click \"Next.\"</p>\n            </div>\n\n            <div className=\"card-body\">\n\n              {/* When user clicks on button to submit the form, call handleSubmit() to display confirmation modal */}\n              <form onSubmit={this.handleSubmit}>\n                {/* As fields are typed into, call handleChange() to update and keep track of the values */}\n                <div className=\"form-group\">\n                  <input required type=\"text\" className=\"form-control\" id=\"fullname\" name=\"Full Name\" placeholder=\"Full Name\" onChange={this.handleChange}/>\n                </div>\n                \n                <div className=\"form-group\">\n                  <input required type=\"text\" className=\"form-control\" id=\"username\" name=\"Username\" placeholder=\"Username\" onChange={this.handleChange}/>\n                </div>\n\n                {/* Two fields for password and confirm password */}\n                <div className=\"form-group input-group\">\n                  <input required type={this.state.passwordVisible ? \"text\" : \"password\"} className=\"form-control\" id=\"password\" name=\"Password\" placeholder=\"Password\" />\n                  <span className=\"input-group-addon\">&nbsp;&nbsp;</span>\n                  <input required type={this.state.passwordVisible ? \"text\" : \"password\"} className=\"form-control\" id=\"confirmPassword\" name=\"Password\" placeholder=\"Confirm Password\" onChange={this.handleChange}/>\n                  <img id=\"passwordVisibilityImg\" src={this.state.passwordImg} alt=\"Hide/Show Password\" onClick={this.changePasswordVisibility}></img>\n                </div>\n\n                <div className=\"form-group\">\n                  <input required type=\"email\" className=\"form-control\" id=\"emailAddress\" name=\"Email Address\" placeholder=\"Email Address\" onChange={this.handleChange}/>\n                  You'll need to verify that this email belongs to you.\n                </div>\n\n                <div className=\"form-group\">\n                  <select required className=\"form-control\" id=\"securityQuestion\" name=\"Security Question\" onChange={this.handleChange}>\n                    <option selected disabled hidden value=\"\">Select a Security Question</option>\n                    <option>What was the house number you lived in as a child?</option>\n                    <option>What high school did you attend?</option>\n                    <option>What is your mother's maiden name?</option>\n                    <option>What is your favorite food?</option>\n                    <option>What is your favorite sports mascot?</option>\n                    <option>What is town/city were you born in?</option>\n                  </select>\n                </div>\n\n                <div className=\"form-group\">\n                  <input required type=\"text\" className=\"form-control\" id=\"securityQuestionAnswer\" name=\"Security Question Answer\" placeholder=\"Security Question Answer\" onChange={this.handleChange}/>\n                </div>\n\n                <br></br>\n                \n                {/* Button to submit form for account creation */}\n                <Button type=\"submit\" variant=\"primary\" className=\"float-right\">Next</Button>\n\n                <div className=\"float-left\">\n                  Already have a Chariot account? <Link to=\"/\"> Log In</Link>\n                </div>\n\n              </form>\n\n            </div>\n\n          </div>\n\n        </div>\n      </div>,\n\n      // Confirmation modal element for Register component\n      <Modal show={this.state.confirmIsOpen} key=\"registerConfirmModal\">\n        <ConfirmationModalBody\n          confirmationQuestion='Is this information for your account correct?'\n          confirmationData = {this.state.accountInfo}\n          >\n        </ConfirmationModalBody>\n        <Modal.Footer>\n          <Button variant=\"primary\" className=\"float-left\" onClick={this.handleSubmit}>No</Button>\n          <Button variant=\"primary\" className=\"float-right\" onClick={this.toggleSuccessModal}>Yes</Button>\n        </Modal.Footer>\n      </Modal>,\n\n      // Sucess modal element for Register component\n      <Modal show={this.state.successIsOpen} key=\"registerSuccessModal\">\n\n        <SuccessModalBody successMessage=\"To complete the account creation process, please check your email to complete the account creation process.\">\n        </SuccessModalBody>\n\n        <Modal.Footer>\n          <Link to=\"/\">\n            <Button variant=\"primary\" className=\"float-right\">Continue</Button>\n          </Link>\n        </Modal.Footer>\n      </Modal>\n\n    ]\n  }\n\n}\n\n\nexport default Register;"]},"metadata":{},"sourceType":"module"}