{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Juan Garcia Lopez\\\\Desktop\\\\seniorDesign\\\\chariot\\\\gui\\\\src\\\\components\\\\deviceManagement\\\\AddDeviceHome.js\";\n\n/*\n  AddDeviceHome.js\n\n  This component is the first screen the user will see when creating a device.\n  This component handles the GUI for creating a device, as well as the modals \n  that appear as the process is completed. In order to get the specific\n  device fields, AddDeviceVars is a child component.\n\n  Currently, only a single device can be created before the user is sent back\n  to the Welcome screen.\n*/\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport AddDeviceVars from './AddDeviceVars';\nimport ConfirmationModalBody from '../shared/ConfirmationModalBody';\nimport SuccessModalBody from '../shared/SuccessModalBody';\nimport ErrorModalBody from '../shared/ErrorModalBody';\nconst getSupportedDeviceTypesBaseUrl = 'http://localhost:5000/chariot/api/v1.0';\nconst getDeviceConfigBaseUrl = 'http://localhost:5000/chariot/api/v1.0/network/device/config';\nconst postDeviceCreationBaseUrl = \"http://localhost:5000/chariot/api/v1.0/network/device\";\n\nclass AddDeviceHome extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getSupportedDeviceTypeOptions = () => {\n      var deviceOptionsElement = [];\n\n      for (var k = 0; k < this.state.supportedDeviceTypes.length; k++) {\n        deviceOptionsElement.push(React.createElement(\"option\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, this.state.supportedDeviceTypes[k]));\n      }\n\n      return deviceOptionsElement;\n    };\n\n    this.handleNewDeviceCreation = submittedDeviceSpecificState => {\n      this.setState({\n        deviceState: submittedDeviceSpecificState\n      }, () => {\n        // Update state to launch confirmation modal\n        this.setState({\n          isSubmitted: !this.state.isSubmitted,\n          confirmIsOpen: !this.state.confirmIsOpen\n        });\n      });\n    };\n\n    this.toggleSuccessModal = () => {\n      var data = {};\n      data[\"networkName\"] = this.props.location.networkProps[\"Network Name\"];\n      data[\"deviceType\"] = this.state.deviceState.newDeviceTypeGeneralVals['Device Type'];\n      console.log(this.props.location.networkProps);\n      console.log(this.state.deviceState.newDeviceTypeConfigVals);\n\n      for (var key in this.state.deviceState.newDeviceTypeConfigVals) {\n        console.log(key);\n        console.log(this.state.deviceState.newDeviceTypeConfigVals[key]);\n        var fieldVal = this.state.deviceState.newDeviceTypeConfigVals[key].value; //only add to data if the value is not empty\n\n        if (fieldVal !== \"\") {\n          //TODO: find a better way to do this\n          var curFieldId = this.state.deviceState.newDeviceTypeConfigVals[key].alias;\n          var fieldType = this.state.deviceState.newDeviceTypeConfigVals[key].inputType;\n\n          if (fieldType === \"number\") {\n            fieldVal = parseInt(fieldVal);\n          } else if (fieldType === \"checkbox\") {\n            fieldVal = document.getElementById(curFieldId).checked;\n          } else if (fieldType === \"numberArray\") {\n            var inputValues = fieldVal.split(\" \"); //again need to verify that all values will be ints\n\n            var arr = [];\n            inputValues.forEach(function (item) {\n              arr.push(parseInt(item));\n            });\n            fieldVal = arr;\n          }\n\n          data[curFieldId] = fieldVal;\n        }\n      } // Post request options\n\n\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }; // Execute the post request to 'postCreateNetworkBaseUrl' with 'requestOptions' using fetch\n\n      fetch(postDeviceCreationBaseUrl, requestOptions).then(res => res.json()).then( // If post was successful, update state and display success modal\n      () => {\n        this.setState({\n          confirmIsOpen: false\n        });\n        this.setState({\n          successIsOpen: !this.state.successIsOpen\n        });\n      }, // If post was unsuccessful, update state and display error modal\n      error => {\n        // Once error message is set, then launch the error modal\n        this.setState({\n          errorMessage: error.message\n        }, () => {\n          this.setState({\n            errorIsOpen: !this.state.errorIsOpen\n          });\n        });\n      });\n    };\n\n    this.toggleErrorModal = () => {\n      this.setState({\n        confirmIsOpen: false\n      });\n      this.setState({\n        errorIsOpen: !this.state.errorIsOpen\n      });\n    };\n\n    this.parseConfirmationData = () => {\n      var confirmationDataJson = {};\n      confirmationDataJson['Device Type'] = this.state.newDeviceTypeGeneralVals['Device Type'];\n\n      for (var key in this.state.deviceState.newDeviceTypeConfigVals) {\n        confirmationDataJson[key] = this.state.deviceState.newDeviceTypeConfigVals[key].value;\n      }\n\n      return confirmationDataJson;\n    };\n\n    this.state = {\n      newDeviceTypeGeneralVals: {\n        newDeviceTypeConfig: null\n      },\n      supportedDeviceTypes: [],\n      showDeviceSpecificSettings: false,\n      // Whether or not the type of device has been chosen by the user already\n      isSubmitted: false,\n      // Whether or not the device information is ready to be sent to the server\n      confirmIsOpen: false,\n      // Is the confirm modal open?\n      successIsOpen: false,\n      // Is the success modal open?\n      errorIsOpen: false,\n      // Is the error modal open?\n      errorMessage: '',\n      deviceState: {} // All configuration setting values for the device (From AddDeviceHome and AddDeviceVars)\n\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleDeviceTypeChange = this.handleDeviceTypeChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  } // Gets supported device types when page initially loads in order to dynamically fill in select-menu\n\n\n  componentDidMount() {\n    fetch(getSupportedDeviceTypesBaseUrl + \"/network/device/supportedDevices\").then(res => res.json()).then( // On success\n    result => {\n      var tempSupportedDeviceTypes = [];\n\n      for (var key in result) {\n        tempSupportedDeviceTypes.push(key);\n      }\n\n      this.setState({\n        supportedDeviceTypes: tempSupportedDeviceTypes\n      });\n    }, // On error\n    error => {\n      console.log(error.message);\n      /*\n        Have an error modal for being unable to get device types. Once button on the modal is clicked, Chariot goes back to welcome screen\n      */\n    });\n  }\n\n  /*\n    Updates textfield state values as they are entered by the user.\n  */\n  handleChange(event) {\n    var updatedNewDeviceTypeGeneralVals = this.state.newDeviceTypeGeneralVals; // Store from current state\n\n    updatedNewDeviceTypeGeneralVals[event.target.name] = event.target.value; // Update the json\n\n    this.setState({\n      newDeviceTypeGeneralVals: updatedNewDeviceTypeGeneralVals\n    }); // Update the state\n  }\n  /*\n    As the device type the user selects changes, update that in the state.\n  */\n\n\n  handleDeviceTypeChange(event) {\n    console.log(\"------------------- changed -------------------\");\n    var lastDeviceType = this.state.newDeviceTypeGeneralVals['Device Type'];\n\n    if (lastDeviceType !== event.target.value) {\n      // If device type was changed\n      var updatedNewDeviceTypeGeneralVals = this.state.newDeviceTypeGeneralVals; // Store from current state\n\n      updatedNewDeviceTypeGeneralVals[event.target.name] = event.target.value; // Update the json with the new device type\n      // State is update asynchronousyly, so run function after state is updated\n\n      this.setState({\n        newDeviceTypeGeneralVals: updatedNewDeviceTypeGeneralVals\n      }, function () {\n        console.log(this.state.newDeviceTypeGeneralVals); // Execute the post request to 'postCreateNetworkBaseUrl' with 'requestOptions' using fetch\n\n        fetch(getDeviceConfigBaseUrl + \"?deviceId=\" + this.state.newDeviceTypeGeneralVals['Device Type']).then(res => res.json()).then( // If post was successful, update state and display success modal\n        result => {\n          console.log(result);\n          var responseJson = result;\n          updatedNewDeviceTypeGeneralVals['newDeviceTypeConfig'] = responseJson; // Store the device's config file to the state\n\n          this.setState({\n            newDeviceTypeGeneralVals: updatedNewDeviceTypeGeneralVals\n          });\n          this.setState({\n            showDeviceSpecificSettings: true\n          }); // Will cause render to update device-specific section\n        }, // If post was unsuccessful, update state and display error modal\n        error => {\n          console.log(error.message);\n        });\n        this.setState({\n          showDeviceSpecificSettings: false\n        }); // Reset to false after render to get ready for next render (if user changes device type)\n      });\n    }\n  }\n\n  /* \n    Called when the user either submits the registration form by clicking \"Next\"\n    in the AddDeviceVars component or \"No\" on the confirmation modal. Will change the \n    \"isSubmitted\" prop to true->false or false->true. Also will update the viewability\n    status of the confirmation modal\n  */\n  handleSubmit(event) {\n    this.setState({\n      isSubmitted: !this.state.isSubmitted,\n      confirmIsOpen: !this.state.confirmIsOpen\n    });\n    event.preventDefault();\n  }\n\n  /*\n    Returns three separate objects with their unique keys. The first object\n    is the Device Creation screen itself. This screen contains the fields that\n    the user will have to fill in, in order to create a device. It also contains \n    AddDeviceVars component, which contains the \"Next\" button that will lead the \n    user to the other two objects, the confirmation and sucess modals.\n  */\n  render() {\n    // If config for device type (e.g. Impinjxarray) was obtained, load the form with the device-specific section\n    return [React.createElement(\"div\", {\n      className: \"container\",\n      key: \"newDeviceScreen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, \"Configure New Device Settings\"), React.createElement(\"p\", {\n      className: \"screenInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, \"Please fill in the configuration fields for your new device.\"), React.createElement(\"form\", {\n      id: \"createDeviceForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      required: true,\n      className: \"form-control\",\n      id: \"Device Type Select\",\n      name: \"Device Type\",\n      onChange: this.handleDeviceTypeChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      selected: true,\n      disabled: true,\n      hidden: true,\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, \"Select a Device Type\"), this.getSupportedDeviceTypeOptions())), this.state.showDeviceSpecificSettings ? React.createElement(AddDeviceVars, {\n      params: this.state,\n      onFormSubmit: this.handleNewDeviceCreation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }) : null), React.createElement(Link, {\n      to: \"/networkManager\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left footer-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, \"Back\"))), React.createElement(Modal, {\n      show: this.state.confirmIsOpen,\n      key: \"newDeviceConfirmModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, React.createElement(ConfirmationModalBody, {\n      confirmationQuestion: 'Before '.concat(this.state.newDeviceTypeGeneralVals['Device Nickname'], ' is added to ', this.props.location.networkProps['Network Name'], ' please confirm that the information below is correct.'),\n      confirmationData: this.parseConfirmationData(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, \"Incorrect\"), React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right\",\n      onClick: this.toggleSuccessModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, \"Correct\"))), React.createElement(Modal, {\n      show: this.state.successIsOpen,\n      key: \"registerSuccessModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, React.createElement(SuccessModalBody, {\n      successMessage: \"Your new device has been created and added to the network!\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/welcome\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, \"Continue\")))), React.createElement(Modal, {\n      show: this.state.errorIsOpen,\n      key: \"addDeviceErrorModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, React.createElement(ErrorModalBody, {\n      errorMessage: this.state.errorMessage + \". Please go back, verify that the information is correct, and then try again.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left\",\n      onClick: this.toggleErrorModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, \"OK\")))];\n  }\n\n}\n\nexport default AddDeviceHome;","map":{"version":3,"sources":["C:\\Users\\Juan Garcia Lopez\\Desktop\\seniorDesign\\chariot\\gui\\src\\components\\deviceManagement\\AddDeviceHome.js"],"names":["React","Component","Link","Modal","Button","AddDeviceVars","ConfirmationModalBody","SuccessModalBody","ErrorModalBody","getSupportedDeviceTypesBaseUrl","getDeviceConfigBaseUrl","postDeviceCreationBaseUrl","AddDeviceHome","constructor","props","getSupportedDeviceTypeOptions","deviceOptionsElement","k","state","supportedDeviceTypes","length","push","handleNewDeviceCreation","submittedDeviceSpecificState","setState","deviceState","isSubmitted","confirmIsOpen","toggleSuccessModal","data","location","networkProps","newDeviceTypeGeneralVals","console","log","newDeviceTypeConfigVals","key","fieldVal","value","curFieldId","alias","fieldType","inputType","parseInt","document","getElementById","checked","inputValues","split","arr","forEach","item","requestOptions","method","headers","body","JSON","stringify","fetch","then","res","json","successIsOpen","error","errorMessage","message","errorIsOpen","toggleErrorModal","parseConfirmationData","confirmationDataJson","newDeviceTypeConfig","showDeviceSpecificSettings","handleChange","bind","handleDeviceTypeChange","handleSubmit","componentDidMount","result","tempSupportedDeviceTypes","event","updatedNewDeviceTypeGeneralVals","target","name","lastDeviceType","responseJson","preventDefault","render","concat"],"mappings":"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","sourcesContent":["/*\n  AddDeviceHome.js\n\n  This component is the first screen the user will see when creating a device.\n  This component handles the GUI for creating a device, as well as the modals \n  that appear as the process is completed. In order to get the specific\n  device fields, AddDeviceVars is a child component.\n\n  Currently, only a single device can be created before the user is sent back\n  to the Welcome screen.\n*/\n\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport AddDeviceVars from './AddDeviceVars';\n\nimport ConfirmationModalBody from '../shared/ConfirmationModalBody';\nimport SuccessModalBody from '../shared/SuccessModalBody';\nimport ErrorModalBody from '../shared/ErrorModalBody';\n\nconst getSupportedDeviceTypesBaseUrl = 'http://localhost:5000/chariot/api/v1.0'\nconst getDeviceConfigBaseUrl = 'http://localhost:5000/chariot/api/v1.0/network/device/config';\nconst postDeviceCreationBaseUrl = \"http://localhost:5000/chariot/api/v1.0/network/device\";\n\nclass AddDeviceHome extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newDeviceTypeGeneralVals: {\n        newDeviceTypeConfig: null\n      },\n      supportedDeviceTypes: [],\n      showDeviceSpecificSettings: false, // Whether or not the type of device has been chosen by the user already\n      isSubmitted: false, // Whether or not the device information is ready to be sent to the server\n      confirmIsOpen: false, // Is the confirm modal open?\n      successIsOpen: false, // Is the success modal open?\n      errorIsOpen: false, // Is the error modal open?\n      errorMessage: '',\n      deviceState: {} // All configuration setting values for the device (From AddDeviceHome and AddDeviceVars)\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleDeviceTypeChange = this.handleDeviceTypeChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  // Gets supported device types when page initially loads in order to dynamically fill in select-menu\n  componentDidMount() {\n    fetch(getSupportedDeviceTypesBaseUrl + \"/network/device/supportedDevices\")\n    .then(res => res.json())\n    .then(\n      // On success\n      (result) => {\n        var tempSupportedDeviceTypes = [];\n        for (var key in result) {\n          tempSupportedDeviceTypes.push(key);\n        }\n        this.setState({supportedDeviceTypes: tempSupportedDeviceTypes});\n      },\n      // On error\n      (error) => {\n        console.log(error.message);\n\n    \n        /*\n          Have an error modal for being unable to get device types. Once button on the modal is clicked, Chariot goes back to welcome screen\n        */ \n      }\n    )\n  }\n\n  getSupportedDeviceTypeOptions = () => {\n    var deviceOptionsElement = [];\n\n    for (var k = 0; k < this.state.supportedDeviceTypes.length; k++) {\n      deviceOptionsElement.push(<option>{this.state.supportedDeviceTypes[k]}</option>);\n    }\n\n    return deviceOptionsElement;\n  }\n\n  /*\n    Updates textfield state values as they are entered by the user.\n  */  \n  handleChange(event) {\n    var updatedNewDeviceTypeGeneralVals = this.state.newDeviceTypeGeneralVals; // Store from current state\n    updatedNewDeviceTypeGeneralVals[event.target.name] = event.target.value; // Update the json\n    \n    this.setState({ newDeviceTypeGeneralVals: updatedNewDeviceTypeGeneralVals }); // Update the state\n  }\n\n  /*\n    As the device type the user selects changes, update that in the state.\n  */\n  handleDeviceTypeChange(event) {\n    console.log(\"------------------- changed -------------------\");\n    var lastDeviceType = this.state.newDeviceTypeGeneralVals['Device Type'];\n    \n    if (lastDeviceType !== event.target.value) { // If device type was changed\n      var updatedNewDeviceTypeGeneralVals = this.state.newDeviceTypeGeneralVals; // Store from current state\n      updatedNewDeviceTypeGeneralVals[event.target.name] = event.target.value; // Update the json with the new device type\n\n      // State is update asynchronousyly, so run function after state is updated\n      this.setState({ newDeviceTypeGeneralVals: updatedNewDeviceTypeGeneralVals }, function () {\n        console.log(this.state.newDeviceTypeGeneralVals);\n\n        // Execute the post request to 'postCreateNetworkBaseUrl' with 'requestOptions' using fetch\n        fetch(getDeviceConfigBaseUrl + \"?deviceId=\" + this.state.newDeviceTypeGeneralVals['Device Type'])\n        .then(res => res.json())\n        .then(\n          // If post was successful, update state and display success modal\n          (result) => {\n            console.log(result);\n            var responseJson = result;\n            updatedNewDeviceTypeGeneralVals['newDeviceTypeConfig'] = responseJson;\n\n            // Store the device's config file to the state\n            this.setState({newDeviceTypeGeneralVals: updatedNewDeviceTypeGeneralVals});\n            this.setState({showDeviceSpecificSettings: true}); // Will cause render to update device-specific section\n          },  \n          // If post was unsuccessful, update state and display error modal\n          (error) => {\n            console.log(error.message);\n          }\n        )\n\n        this.setState({ showDeviceSpecificSettings: false}); // Reset to false after render to get ready for next render (if user changes device type)\n      });\n    }\n  }\n\n  handleNewDeviceCreation = (submittedDeviceSpecificState) => {\n    this.setState ({ deviceState: submittedDeviceSpecificState }, () => {\n      // Update state to launch confirmation modal\n      this.setState({\n        isSubmitted: !this.state.isSubmitted,\n        confirmIsOpen: !this.state.confirmIsOpen\n      }); \n    });\n  }\n\n  /*\n    Function that launches the success modal after the user confirms the device\n    information that they entered is correct. Also makes the POST request to the\n    server to create the new device.\n  */\n toggleSuccessModal = () => {\n    var data = {};\n    data[\"networkName\"] = this.props.location.networkProps[\"Network Name\"];\n    data[\"deviceType\"] = this.state.deviceState.newDeviceTypeGeneralVals['Device Type'];\n\n    console.log(this.props.location.networkProps);\n    console.log(this.state.deviceState.newDeviceTypeConfigVals);\n\n    for (var key in this.state.deviceState.newDeviceTypeConfigVals) {\n      console.log(key);\n      console.log(this.state.deviceState.newDeviceTypeConfigVals[key]);\n\n      var fieldVal = this.state.deviceState.newDeviceTypeConfigVals[key].value;\n\n\n      //only add to data if the value is not empty\n      if (fieldVal !== \"\") {\n\n\n          //TODO: find a better way to do this\n          var curFieldId = this.state.deviceState.newDeviceTypeConfigVals[key].alias;\n          var fieldType = this.state.deviceState.newDeviceTypeConfigVals[key].inputType;\n\n\n          if (fieldType === \"number\") {\n              fieldVal = parseInt(fieldVal)\n          }\n          else if (fieldType === \"checkbox\") {\n              fieldVal = document.getElementById(curFieldId).checked;\n          }\n          else if (fieldType === \"numberArray\") {\n              var inputValues = fieldVal.split(\" \");\n\n\n              //again need to verify that all values will be ints\n              var arr = [];\n\n\n              inputValues.forEach(function (item) {\n                  arr.push(parseInt(item))\n              });\n\n              fieldVal = arr;\n          }\n          data[curFieldId] = fieldVal;\n      }\n    }\n\n    // Post request options\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data)\n    };\n\n    // Execute the post request to 'postCreateNetworkBaseUrl' with 'requestOptions' using fetch\n    fetch(postDeviceCreationBaseUrl, requestOptions)\n    .then(res => res.json())\n    .then(\n      // If post was successful, update state and display success modal\n      () => {\n      this.setState({\n        confirmIsOpen: false\n      });\n      this.setState({\n        successIsOpen: !this.state.successIsOpen\n      });\n      },\n      // If post was unsuccessful, update state and display error modal\n      (error) => {\n      // Once error message is set, then launch the error modal\n      this.setState({\n        errorMessage: error.message \n      }, () => {\n        this.setState({ errorIsOpen: !this.state.errorIsOpen });\n      });\n      }\n    )  \n  }\n\n\n  toggleErrorModal = () => {\n    this.setState({\n      confirmIsOpen: false\n    });\n    this.setState({\n      errorIsOpen: !this.state.errorIsOpen\n    });\n  }\n\n\n  /* \n    Called when the user either submits the registration form by clicking \"Next\"\n    in the AddDeviceVars component or \"No\" on the confirmation modal. Will change the \n    \"isSubmitted\" prop to true->false or false->true. Also will update the viewability\n    status of the confirmation modal\n  */\n  handleSubmit(event) {\n    this.setState({\n      isSubmitted: !this.state.isSubmitted,\n      confirmIsOpen: !this.state.confirmIsOpen\n    });    \n    event.preventDefault();\n  }\n\n\n  parseConfirmationData = () => {\n    var confirmationDataJson = {};\n\n    confirmationDataJson['Device Type'] = this.state.newDeviceTypeGeneralVals['Device Type'];\n\n    for (var key in this.state.deviceState.newDeviceTypeConfigVals) {\n      confirmationDataJson[key] = this.state.deviceState.newDeviceTypeConfigVals[key].value;\n    }\n\n    return confirmationDataJson;\n  }\n  \n\n  /*\n    Returns three separate objects with their unique keys. The first object\n    is the Device Creation screen itself. This screen contains the fields that\n    the user will have to fill in, in order to create a device. It also contains \n    AddDeviceVars component, which contains the \"Next\" button that will lead the \n    user to the other two objects, the confirmation and sucess modals.\n  */\n  render() {\n    // If config for device type (e.g. Impinjxarray) was obtained, load the form with the device-specific section\n    return [\n      <div className=\"container\" key=\"newDeviceScreen\">\n        <h1>Configure New Device Settings</h1>\n        <p className=\"screenInfo\">Please fill in the configuration fields for your new device.</p>\n\n        <form id=\"createDeviceForm\">\n\n          <div className=\"form-group\">\n              <select required className=\"form-control\" id=\"Device Type Select\" name=\"Device Type\" onChange={this.handleDeviceTypeChange}>\n                <option selected disabled hidden value=\"\">Select a Device Type</option>\n                {this.getSupportedDeviceTypeOptions()}\n              </select>\n          </div>\n\n            {/* onFormSubmit() callback. Pass in as prop basically. */}\n            {this.state.showDeviceSpecificSettings ? <AddDeviceVars params={this.state} onFormSubmit={this.handleNewDeviceCreation}></AddDeviceVars> : null}\n        </form>\n\n        <Link to=\"/networkManager\">\n          <Button variant=\"primary\" className=\"float-left footer-button\">Back</Button>\n        </Link>\n      </div>,\n\n      <Modal show={this.state.confirmIsOpen} key=\"newDeviceConfirmModal\">\n        \n        <ConfirmationModalBody\n          confirmationQuestion={('Before ').concat(this.state.newDeviceTypeGeneralVals['Device Nickname'], ' is added to ', this.props.location.networkProps['Network Name'], ' please confirm that the information below is correct.')} \n          confirmationData = {this.parseConfirmationData()}\n          >\n        </ConfirmationModalBody>\n\n        <Modal.Footer>\n          <Button variant=\"primary\" className=\"float-left\" onClick={this.handleSubmit}>Incorrect</Button>\n          <Button variant=\"primary\" className=\"float-right\" onClick={this.toggleSuccessModal}>Correct</Button>\n        </Modal.Footer>\n      </Modal>,\n\n      <Modal show={this.state.successIsOpen} key=\"registerSuccessModal\">\n        <SuccessModalBody successMessage=\"Your new device has been created and added to the network!\">\n        </SuccessModalBody>\n        <Modal.Footer>\n          <Link to=\"/welcome\">\n            <Button variant=\"primary\" className=\"float-right\">Continue</Button>\n          </Link>\n        </Modal.Footer>\n      </Modal>,\n\n      <Modal show={this.state.errorIsOpen} key=\"addDeviceErrorModal\">\n\n        <ErrorModalBody errorMessage={this.state.errorMessage + \". Please go back, verify that the information is correct, and then try again.\"}>\n        </ErrorModalBody>\n\n        <Modal.Footer>\n          <Button variant=\"primary\" className=\"float-left\" onClick={this.toggleErrorModal}>OK</Button>\n        </Modal.Footer>\n      </Modal>\n    ]\n  }\n}\n \nexport default AddDeviceHome; "]},"metadata":{},"sourceType":"module"}