{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hojoh\\\\Desktop\\\\Senior Design\\\\chariot\\\\gui\\\\src\\\\components\\\\networkManagement\\\\ChooseNetwork.js\";\n\n/*\n  This component handles the user having to choose a network to run the data collection episode on.\n  The body of the screen (network/device info) is generated through the NetworkDeviceCellScreenTemplate \n  child component. Since the buttons in this component links the user to other components, a callback \n  to update this component's state isn't necessary. \n\n*/\nimport React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom';\nimport NetworkDeviceCellScreenTemplate from '../shared/NetworkDeviceCellScreenTemplate';\nconst getAllNetworksBaseUrl = 'http://localhost:5000/chariot/api/v1.0/networks/all';\nconst xhr = new XMLHttpRequest();\n\nclass ChooseNetwork extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      existingNetworks: []\n    };\n  }\n\n  componentDidMount() {\n    xhr.open('GET', getAllNetworksBaseUrl);\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\"); // Once a response is received\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === XMLHttpRequest.DONE) {\n        // Once the request is done\n        if (xhr.status === 200) {\n          var responseJsonArray = JSON.parse(xhr.response); // Response is a dictionary \n\n          var updatedNetworksJsonArray = this.state.existingNetworks;\n\n          for (var i = 0; i < responseJsonArray.length; i++) {\n            updatedNetworksJsonArray.push(responseJsonArray[i]);\n          }\n\n          this.setState({\n            existingNetworks: updatedNetworksJsonArray\n          });\n        }\n      }\n    };\n\n    xhr.send();\n  }\n\n  render() {\n    console.log(this.state.existingNetworks);\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Choose a Network\"), React.createElement(\"p\", {\n      className: \"screenInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Select a network to begin data collection process.\"), this.state.existingNetworks ? React.createElement(NetworkDeviceCellScreenTemplate, {\n      dataJson: this.state.existingNetworks,\n      withLinks: false,\n      type: \"choose\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }) : null, React.createElement(Link, {\n      to: \"/welcome\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left footer-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Back\")));\n  }\n\n}\n\nexport default ChooseNetwork;","map":{"version":3,"sources":["C:\\Users\\hojoh\\Desktop\\Senior Design\\chariot\\gui\\src\\components\\networkManagement\\ChooseNetwork.js"],"names":["React","Component","Button","Link","NetworkDeviceCellScreenTemplate","getAllNetworksBaseUrl","xhr","XMLHttpRequest","ChooseNetwork","constructor","props","state","existingNetworks","componentDidMount","open","setRequestHeader","onreadystatechange","readyState","DONE","status","responseJsonArray","JSON","parse","response","updatedNetworksJsonArray","i","length","push","setState","send","render","console","log"],"mappings":";;AAAA;;;;;;;AAQA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,OAAOC,+BAAP,MAA4C,2CAA5C;AAEA,MAAMC,qBAAqB,GAAG,qDAA9B;AACA,MAAMC,GAAG,GAAG,IAAIC,cAAJ,EAAZ;;AAEA,MAAMC,aAAN,SAA4BP,SAA5B,CAAsC;AACpCQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,gBAAgB,EAAE;AADP,KAAb;AAGD;;AAEDC,EAAAA,iBAAiB,GAAI;AACnBP,IAAAA,GAAG,CAACQ,IAAJ,CAAS,KAAT,EAAgBT,qBAAhB;AACAC,IAAAA,GAAG,CAACS,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC,EAFmB,CAInB;;AACAT,IAAAA,GAAG,CAACU,kBAAJ,GAAyB,MAAM;AAC7B,UAAIV,GAAG,CAACW,UAAJ,KAAmBV,cAAc,CAACW,IAAtC,EAA4C;AAAE;AAC5C,YAAIZ,GAAG,CAACa,MAAJ,KAAe,GAAnB,EAAwB;AACtB,cAAIC,iBAAiB,GAAGC,IAAI,CAACC,KAAL,CAAWhB,GAAG,CAACiB,QAAf,CAAxB,CADsB,CAC4B;;AAElD,cAAIC,wBAAwB,GAAG,KAAKb,KAAL,CAAWC,gBAA1C;;AAEA,eAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,iBAAiB,CAACM,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;AACjDD,YAAAA,wBAAwB,CAACG,IAAzB,CAA8BP,iBAAiB,CAACK,CAAD,CAA/C;AACD;;AAED,eAAKG,QAAL,CAAc;AAAEhB,YAAAA,gBAAgB,EAAEY;AAApB,WAAd;AACD;AACF;AACF,KAdD;;AAgBAlB,IAAAA,GAAG,CAACuB,IAAJ;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKrB,KAAL,CAAWC,gBAAvB;AAEA,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEE;AAAG,MAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DAFF,EAMG,KAAKD,KAAL,CAAWC,gBAAX,GAA8B,oBAAC,+BAAD;AAAiC,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWC,gBAAtD;AAAwE,MAAA,SAAS,EAAE,KAAnF;AAA0F,MAAA,IAAI,EAAC,QAA/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA9B,GAA2K,IAN9K,EAQE,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAC,UAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,SAAhB;AAA0B,MAAA,SAAS,EAAC,0BAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CARF,CADF;AAcD;;AAjDmC;;AAqDtC,eAAeJ,aAAf","sourcesContent":["/*\n  This component handles the user having to choose a network to run the data collection episode on.\n  The body of the screen (network/device info) is generated through the NetworkDeviceCellScreenTemplate \n  child component. Since the buttons in this component links the user to other components, a callback \n  to update this component's state isn't necessary. \n\n*/\n\nimport React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom';\n\nimport NetworkDeviceCellScreenTemplate from '../shared/NetworkDeviceCellScreenTemplate';\n\nconst getAllNetworksBaseUrl = 'http://localhost:5000/chariot/api/v1.0/networks/all';\nconst xhr = new XMLHttpRequest();\n\nclass ChooseNetwork extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      existingNetworks: []\n    }\n  }\n\n  componentDidMount () {\n    xhr.open('GET', getAllNetworksBaseUrl);\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n    // Once a response is received\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === XMLHttpRequest.DONE) { // Once the request is done\n        if (xhr.status === 200) {\n          var responseJsonArray = JSON.parse(xhr.response); // Response is a dictionary \n\n          var updatedNetworksJsonArray = this.state.existingNetworks; \n\n          for (var i = 0; i < responseJsonArray.length; i++) {\n            updatedNetworksJsonArray.push(responseJsonArray[i]);\n          }\n\n          this.setState({ existingNetworks: updatedNetworksJsonArray });\n        }\n      }\n    }\n    \n    xhr.send();\n  }\n\n  render() {\n    console.log(this.state.existingNetworks);\n    \n    return (\n      <div className=\"container\">\n        <h1>Choose a Network</h1>\n        <p className=\"screenInfo\">\n          Select a network to begin data collection process.\n        </p>\n\n        {this.state.existingNetworks ? <NetworkDeviceCellScreenTemplate dataJson={this.state.existingNetworks} withLinks={false} type=\"choose\"></NetworkDeviceCellScreenTemplate> : null}\n\n        <Link to=\"/welcome\">\n          <Button variant=\"primary\" className=\"float-left footer-button\">Back</Button>\n        </Link>\n      </div>\n    );\n  }\n\n}\n\nexport default ChooseNetwork; "]},"metadata":{},"sourceType":"module"}