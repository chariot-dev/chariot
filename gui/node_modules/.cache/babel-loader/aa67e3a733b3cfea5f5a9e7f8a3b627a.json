{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hojoh\\\\Desktop\\\\Senior Design\\\\chariot\\\\gui\\\\src\\\\components\\\\shared\\\\NetworkDeviceCellScreenTemplate.js\";\n\n/*\n\n\n*/\nimport React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom';\n\nclass NetworkDeviceCellScreenTemplate extends Component {\n  constructor(props) {\n    super(props);\n\n    this.createCells = () => {\n      var networkLinks = [];\n\n      for (var i = 0; i < this.state.dataJson.length; i++) {\n        // For network/device page use\n        let deviceTags;\n        let curNetworkName;\n        let curNetworkDescription; // For database page use \n\n        let curDatabaseId;\n        let curDatabaseName;\n        let curDatabaseType;\n        var buttonElement = [];\n\n        switch (this.state.type) {\n          // For DeleteNetwork\n          case \"delete\":\n            deviceTags = []; // Reset list of devices for network-to-be-displayed\n\n            curNetworkName = this.state.dataJson[i][\"NetworkName\"];\n            curNetworkDescription = this.state.dataJson[i][\"Description\"];\n            buttonElement.push(React.createElement(Button, {\n              key: \"deleteNetworkButton\" + i,\n              className: \"float-right\",\n              variant: \"danger\",\n              size: \"sm\",\n              onClick: this.props.deleteNetwork.bind(this, curNetworkName),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 45\n              },\n              __self: this\n            }, \"Delete Network\"));\n            break;\n          // For ManageExistingNetworks\n\n          case \"manage\":\n            deviceTags = []; // Reset list of devices for network-to-be-displayed\n\n            curNetworkName = this.state.dataJson[i][\"NetworkName\"];\n            curNetworkDescription = this.state.dataJson[i][\"Description\"];\n            buttonElement.push(React.createElement(Link, {\n              key: \"manageNetworkButton\" + i,\n              to: {\n                pathname: '/addDeviceHome',\n                networkProps: {\n                  'Network Name': curNetworkName\n                }\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 57\n              },\n              __self: this\n            }, React.createElement(Button, {\n              className: \"float-right\",\n              variant: \"light\",\n              size: \"sm\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 58\n              },\n              __self: this\n            }, \"Add Device\")));\n            break;\n          // For ChooseNetwork\n\n          case \"chooseNetwork\":\n            deviceTags = []; // Reset list of devices for network-to-be-displayed\n\n            curNetworkName = this.state.dataJson[i][\"NetworkName\"];\n            curNetworkDescription = this.state.dataJson[i][\"Description\"];\n            buttonElement.push(React.createElement(Link, {\n              key: \"chooseNetworkButton\" + i,\n              to: {\n                pathname: '/chooseDatabaseConfig',\n                networkProps: {\n                  'Network Name': curNetworkName\n                }\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 71\n              },\n              __self: this\n            }, React.createElement(Button, {\n              className: \"float-right\",\n              variant: \"success\",\n              size: \"sm\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 72\n              },\n              __self: this\n            }, \"Choose Network\")));\n            break;\n          // For ChooseDatabaseConfig\n\n          case \"chooseDatabase\":\n            curDatabaseId = this.state.dataJson[i][\"dbId\"];\n            curDatabaseName = this.state.dataJson[i][\"databaseName\"];\n            curDatabaseType = this.state.dataJson[i][\"type\"];\n            buttonElement.push(React.createElement(Link, {\n              key: \"chooseDatabaseButton\" + i,\n              to: {\n                pathname: '/databaseConnection',\n                networkProps: {}\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 84\n              },\n              __self: this\n            }, React.createElement(Button, {\n              className: \"float-right\",\n              variant: \"success\",\n              size: \"sm\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 85\n              },\n              __self: this\n            }, \"Choose Database\")));\n            break;\n        }\n\n        if (this.state.withLinks) {\n          var curDeviceKey;\n          var curDeviceName; // Create links for network's corresponding devices\n\n          if (this.state.dataJson[i][\"Devices\"].length > 0) {\n            for (var k = 0; k < this.state.dataJson[i][\"Devices\"].length; k++) {\n              curDeviceKey = curNetworkName + \"Device\" + k;\n              curDeviceName = this.state.dataJson[i][\"Devices\"][k];\n              deviceTags.push(React.createElement(\"div\", {\n                key: curDeviceKey,\n                className: \"networksDeviceLink\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 103\n                },\n                __self: this\n              }, React.createElement(\"b\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 104\n                },\n                __self: this\n              }, \"Device \", k + 1, \": \"), React.createElement(Link, {\n                to: {\n                  pathname: \"/manageExistingDevices/devices/\" + curNetworkName + \"/\" + curDeviceName,\n                  networkProps: {\n                    'Network Name': curNetworkName,\n                    'Device Name': curDeviceName\n                  }\n                },\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 105\n                },\n                __self: this\n              }, curDeviceName), React.createElement(\"br\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 107\n                },\n                __self: this\n              })));\n            }\n          } // If now devices, say so\n          else {\n              deviceTags.push(React.createElement(\"div\", {\n                key: \"noDevices\",\n                className: \"networksDeviceLink\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 115\n                },\n                __self: this\n              }, \"No devices exist for this network.\"));\n            } // Create links for network, then create the jsx for networks/devices\n\n\n          networkLinks.push(React.createElement(\"div\", {\n            className: \"existingNetworkBox\",\n            key: i,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 123\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"existingNetworkCell\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 124\n            },\n            __self: this\n          }, buttonElement, React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128\n            },\n            __self: this\n          }, React.createElement(\"b\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 129\n            },\n            __self: this\n          }, \"Network Name: \"), React.createElement(Link, {\n            to: {\n              pathname: \"/manageExistingNetwork/\" + curNetworkName,\n              networkProps: {\n                'Network Name': curNetworkName\n              }\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 130\n            },\n            __self: this\n          }, curNetworkName), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 132\n            },\n            __self: this\n          }), React.createElement(\"b\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 133\n            },\n            __self: this\n          }, \"Description: \"), \" \", curNetworkDescription, React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 133\n            },\n            __self: this\n          })), deviceTags)));\n        } else {\n          // without links\n          if (this.state.dataJson[i]) {\n            if (this.state.dataJson[i][\"Devices\"].length > 0) {\n              for (var j = 0; j < this.state.dataJson[i][\"Devices\"].length; j++) {\n                curDeviceKey = curNetworkName + \"Device\" + j;\n                curDeviceName = this.state.dataJson[i][\"Devices\"][j];\n                deviceTags.push(React.createElement(\"div\", {\n                  key: curDeviceKey,\n                  className: \"networksDeviceLink\",\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 147\n                  },\n                  __self: this\n                }, React.createElement(\"b\", {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 148\n                  },\n                  __self: this\n                }, \"Device \", j + 1, \": \"), curDeviceName, React.createElement(\"br\", {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 148\n                  },\n                  __self: this\n                })));\n              }\n            } // If no devices, say so\n            else {\n                deviceTags.push(React.createElement(\"div\", {\n                  key: curDeviceKey,\n                  className: \"networksDeviceLink\",\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 156\n                  },\n                  __self: this\n                }, \"No devices exist for this network.\"));\n              }\n          } // Create links for network, then create the jsx for networks/devices\n\n\n          if (this.state.type !== \"chooseDatabase\") {\n            networkLinks.push(React.createElement(\"div\", {\n              className: \"existingNetworkBox\",\n              key: i,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 166\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              className: \"existingNetworkCell\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 167\n              },\n              __self: this\n            }, buttonElement, React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 171\n              },\n              __self: this\n            }, React.createElement(\"b\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 172\n              },\n              __self: this\n            }, \"Network Name: \"), \" \", curNetworkName, React.createElement(\"br\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 172\n              },\n              __self: this\n            }), React.createElement(\"b\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 173\n              },\n              __self: this\n            }, \"Description: \"), \" \", curNetworkDescription, React.createElement(\"br\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 173\n              },\n              __self: this\n            })), deviceTags)));\n          } else {\n            networkLinks.push(React.createElement(\"div\", {\n              className: \"existingNetworkBox\",\n              key: i,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 182\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              className: \"existingNetworkCell\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 183\n              },\n              __self: this\n            }, buttonElement, React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 187\n              },\n              __self: this\n            }, React.createElement(\"b\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 188\n              },\n              __self: this\n            }, \"Database ID: \"), \" \", curDatabaseID, React.createElement(\"br\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 188\n              },\n              __self: this\n            }), React.createElement(\"b\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 189\n              },\n              __self: this\n            }, \"Database Name: \"), \" \", curDatabaseName, React.createElement(\"br\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 189\n              },\n              __self: this\n            }), React.createElement(\"b\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 190\n              },\n              __self: this\n            }, \"Database Type: \"), \" \", curDatabaseType, React.createElement(\"br\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 190\n              },\n              __self: this\n            })), deviceTags)));\n          }\n        }\n      }\n\n      return networkLinks;\n    };\n\n    this.state = {\n      dataJson: this.props.dataJson,\n      withLinks: this.props.withLinks,\n      // withLinks = true means clicking on network/devices is possible\n      type: this.props.type // manage, delete, choose\n\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"networkDeviceCells\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, this.createCells());\n  }\n\n}\n\nexport default NetworkDeviceCellScreenTemplate;","map":{"version":3,"sources":["C:\\Users\\hojoh\\Desktop\\Senior Design\\chariot\\gui\\src\\components\\shared\\NetworkDeviceCellScreenTemplate.js"],"names":["React","Component","Button","Link","NetworkDeviceCellScreenTemplate","constructor","props","createCells","networkLinks","i","state","dataJson","length","deviceTags","curNetworkName","curNetworkDescription","curDatabaseId","curDatabaseName","curDatabaseType","buttonElement","type","push","deleteNetwork","bind","pathname","networkProps","withLinks","curDeviceKey","curDeviceName","k","j","curDatabaseID","render"],"mappings":";;AAAA;;;;AAKA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,SAASC,IAAT,QAAqB,kBAArB;;AAEA,MAAMC,+BAAN,SAA8CH,SAA9C,CAAwD;AACtDI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAUnBC,WAVmB,GAUL,MAAM;AAClB,UAAIC,YAAY,GAAG,EAAnB;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,MAAxC,EAAgDH,CAAC,EAAjD,EAAqD;AACnD;AACA,YAAII,UAAJ;AACA,YAAIC,cAAJ;AACA,YAAIC,qBAAJ,CAJmD,CAMnD;;AACA,YAAIC,aAAJ;AACA,YAAIC,eAAJ;AACA,YAAIC,eAAJ;AAEA,YAAIC,aAAa,GAAG,EAApB;;AAEA,gBAAQ,KAAKT,KAAL,CAAWU,IAAnB;AACE;AACA,eAAK,QAAL;AACEP,YAAAA,UAAU,GAAG,EAAb,CADF,CACmB;;AACjBC,YAAAA,cAAc,GAAG,KAAKJ,KAAL,CAAWC,QAAX,CAAoBF,CAApB,EAAuB,aAAvB,CAAjB;AACAM,YAAAA,qBAAqB,GAAG,KAAKL,KAAL,CAAWC,QAAX,CAAoBF,CAApB,EAAuB,aAAvB,CAAxB;AAEAU,YAAAA,aAAa,CAACE,IAAd,CACE,oBAAC,MAAD;AAAQ,cAAA,GAAG,EAAE,wBAAwBZ,CAArC;AAAwC,cAAA,SAAS,EAAC,aAAlD;AAAgE,cAAA,OAAO,EAAC,QAAxE;AAAiF,cAAA,IAAI,EAAC,IAAtF;AAA2F,cAAA,OAAO,EAAE,KAAKH,KAAL,CAAWgB,aAAX,CAAyBC,IAAzB,CAA8B,IAA9B,EAAoCT,cAApC,CAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF;AAKA;AACF;;AACA,eAAK,QAAL;AACED,YAAAA,UAAU,GAAG,EAAb,CADF,CACmB;;AACjBC,YAAAA,cAAc,GAAG,KAAKJ,KAAL,CAAWC,QAAX,CAAoBF,CAApB,EAAuB,aAAvB,CAAjB;AACAM,YAAAA,qBAAqB,GAAG,KAAKL,KAAL,CAAWC,QAAX,CAAoBF,CAApB,EAAuB,aAAvB,CAAxB;AAEAU,YAAAA,aAAa,CAACE,IAAd,CACE,oBAAC,IAAD;AAAM,cAAA,GAAG,EAAE,wBAAwBZ,CAAnC;AAAsC,cAAA,EAAE,EAAE;AAACe,gBAAAA,QAAQ,EAAC,gBAAV;AAA4BC,gBAAAA,YAAY,EAAC;AAAC,kCAAgBX;AAAjB;AAAzC,eAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACE,oBAAC,MAAD;AAAQ,cAAA,SAAS,EAAC,aAAlB;AAAgC,cAAA,OAAO,EAAC,OAAxC;AAAgD,cAAA,IAAI,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,CADF;AAOA;AACF;;AACA,eAAK,eAAL;AACED,YAAAA,UAAU,GAAG,EAAb,CADF,CACmB;;AACjBC,YAAAA,cAAc,GAAG,KAAKJ,KAAL,CAAWC,QAAX,CAAoBF,CAApB,EAAuB,aAAvB,CAAjB;AACAM,YAAAA,qBAAqB,GAAG,KAAKL,KAAL,CAAWC,QAAX,CAAoBF,CAApB,EAAuB,aAAvB,CAAxB;AAEAU,YAAAA,aAAa,CAACE,IAAd,CACE,oBAAC,IAAD;AAAM,cAAA,GAAG,EAAE,wBAAwBZ,CAAnC;AAAsC,cAAA,EAAE,EAAE;AAACe,gBAAAA,QAAQ,EAAC,uBAAV;AAAmCC,gBAAAA,YAAY,EAAC;AAAC,kCAAgBX;AAAjB;AAAhD,eAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACE,oBAAC,MAAD;AAAQ,cAAA,SAAS,EAAC,aAAlB;AAAgC,cAAA,OAAO,EAAC,SAAxC;AAAkD,cAAA,IAAI,EAAC,IAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,CADF;AAOA;AACF;;AACA,eAAK,gBAAL;AACEE,YAAAA,aAAa,GAAG,KAAKN,KAAL,CAAWC,QAAX,CAAoBF,CAApB,EAAuB,MAAvB,CAAhB;AACAQ,YAAAA,eAAe,GAAG,KAAKP,KAAL,CAAWC,QAAX,CAAoBF,CAApB,EAAuB,cAAvB,CAAlB;AACAS,YAAAA,eAAe,GAAI,KAAKR,KAAL,CAAWC,QAAX,CAAoBF,CAApB,EAAuB,MAAvB,CAAnB;AACAU,YAAAA,aAAa,CAACE,IAAd,CACE,oBAAC,IAAD;AAAM,cAAA,GAAG,EAAE,yBAAyBZ,CAApC;AAAuC,cAAA,EAAE,EAAE;AAACe,gBAAAA,QAAQ,EAAC,qBAAV;AAAiCC,gBAAAA,YAAY,EAAC;AAA9C,eAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACE,oBAAC,MAAD;AAAQ,cAAA,SAAS,EAAC,aAAlB;AAAgC,cAAA,OAAO,EAAC,SAAxC;AAAkD,cAAA,IAAI,EAAC,IAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,CADF;AAOA;AArDJ;;AAwDA,YAAI,KAAKf,KAAL,CAAWgB,SAAf,EAA0B;AACxB,cAAIC,YAAJ;AACA,cAAIC,aAAJ,CAFwB,CAIxB;;AACA,cAAI,KAAKlB,KAAL,CAAWC,QAAX,CAAoBF,CAApB,EAAuB,SAAvB,EAAkCG,MAAlC,GAA2C,CAA/C,EAAkD;AAChD,iBAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKnB,KAAL,CAAWC,QAAX,CAAoBF,CAApB,EAAuB,SAAvB,EAAkCG,MAAtD,EAA8DiB,CAAC,EAA/D,EAAmE;AACjEF,cAAAA,YAAY,GAAGb,cAAc,GAAG,QAAjB,GAA4Be,CAA3C;AACAD,cAAAA,aAAa,GAAG,KAAKlB,KAAL,CAAWC,QAAX,CAAoBF,CAApB,EAAuB,SAAvB,EAAkCoB,CAAlC,CAAhB;AACAhB,cAAAA,UAAU,CAACQ,IAAX,CACE;AAAK,gBAAA,GAAG,EAAEM,YAAV;AAAwB,gBAAA,SAAS,EAAC,oBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAWE,CAAC,GAAG,CAAf,OADF,EAEI,oBAAC,IAAD;AAAM,gBAAA,EAAE,EAAE;AAACL,kBAAAA,QAAQ,EAAC,oCAAoCV,cAApC,GAAqD,GAArD,GAA2Dc,aAArE;AAAoFH,kBAAAA,YAAY,EAAC;AAAC,oCAAgBX,cAAjB;AAAiC,mCAAec;AAAhD;AAAjG,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACGA,aADH,CAFJ,EAIW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJX,CADF;AAQD;AACF,WAbD,CAcA;AAdA,eAeK;AACHf,cAAAA,UAAU,CAACQ,IAAX,CACE;AAAK,gBAAA,GAAG,EAAC,WAAT;AAAqB,gBAAA,SAAS,EAAC,oBAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDADF;AAKD,aA1BuB,CA4BxB;;;AACAb,UAAAA,YAAY,CAACa,IAAb,CACE;AAAK,YAAA,SAAS,EAAC,oBAAf;AAAoC,YAAA,GAAG,EAAEZ,CAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE;AAAK,YAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAEGU,aAFH,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,EAEI,oBAAC,IAAD;AAAM,YAAA,EAAE,EAAE;AAACK,cAAAA,QAAQ,EAAC,4BAA4BV,cAAtC;AAAsDW,cAAAA,YAAY,EAAC;AAAC,gCAAgBX;AAAjB;AAAnE,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACGA,cADH,CAFJ,EAIW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJX,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BALF,OAKwBC,qBALxB,EAK8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAL9C,CAJF,EAWGF,UAXH,CADF,CADF;AAiBD,SA9CD,MA+CK;AAAE;AACL,cAAI,KAAKH,KAAL,CAAWC,QAAX,CAAoBF,CAApB,CAAJ,EAA4B;AAC1B,gBAAI,KAAKC,KAAL,CAAWC,QAAX,CAAoBF,CAApB,EAAuB,SAAvB,EAAkCG,MAAlC,GAA2C,CAA/C,EAAkD;AAChD,mBAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKpB,KAAL,CAAWC,QAAX,CAAoBF,CAApB,EAAuB,SAAvB,EAAkCG,MAAtD,EAA8DkB,CAAC,EAA/D,EAAmE;AACjEH,gBAAAA,YAAY,GAAGb,cAAc,GAAG,QAAjB,GAA4BgB,CAA3C;AACAF,gBAAAA,aAAa,GAAG,KAAKlB,KAAL,CAAWC,QAAX,CAAoBF,CAApB,EAAuB,SAAvB,EAAkCqB,CAAlC,CAAhB;AACAjB,gBAAAA,UAAU,CAACQ,IAAX,CACE;AAAK,kBAAA,GAAG,EAAEM,YAAV;AAAwB,kBAAA,SAAS,EAAC,oBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAWG,CAAC,GAAG,CAAf,OADF,EAC0BF,aAD1B,EACwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADxC,CADF;AAKD;AACF,aAVD,CAWA;AAXA,iBAYK;AACHf,gBAAAA,UAAU,CAACQ,IAAX,CACE;AAAK,kBAAA,GAAG,EAAEM,YAAV;AAAwB,kBAAA,SAAS,EAAC,oBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDADF;AAKD;AACF,WArBE,CAuBH;;;AACA,cAAI,KAAKjB,KAAL,CAAWU,IAAX,KAAoB,gBAAxB,EAA0C;AACxCZ,YAAAA,YAAY,CAACa,IAAb,CACE;AAAK,cAAA,SAAS,EAAC,oBAAf;AAAoC,cAAA,GAAG,EAAEZ,CAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACE;AAAK,cAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAEGU,aAFH,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,OACyBL,cADzB,EACwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADxC,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAFF,OAEwBC,qBAFxB,EAE8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAF9C,CAJF,EAQGF,UARH,CADF,CADF;AAcD,WAfD,MAgBK;AACHL,YAAAA,YAAY,CAACa,IAAb,CACE;AAAK,cAAA,SAAS,EAAC,oBAAf;AAAoC,cAAA,GAAG,EAAEZ,CAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACE;AAAK,cAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAEGU,aAFH,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF,OACwBY,aADxB,EACsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADtC,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAFF,OAE0Bd,eAF1B,EAE0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAF1C,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAHF,OAG0BC,eAH1B,EAG0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAH1C,CAJF,EASGL,UATH,CADF,CADF;AAeD;AACF;AAEF;;AAGD,aAAOL,YAAP;AACD,KAhMkB;;AAEjB,SAAKE,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWK,QADV;AAEXe,MAAAA,SAAS,EAAE,KAAKpB,KAAL,CAAWoB,SAFX;AAEsB;AACjCN,MAAAA,IAAI,EAAE,KAAKd,KAAL,CAAWc,IAHN,CAGW;;AAHX,KAAb;AAKD;;AA4LDY,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,EAAE,EAAC,oBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKzB,WAAL,EADH,CADF;AAKD;;AA1MqD;;AA6MxD,eAAeH,+BAAf","sourcesContent":["/*\n\n\n*/\n\nimport React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom';\n\nclass NetworkDeviceCellScreenTemplate extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataJson: this.props.dataJson,\n      withLinks: this.props.withLinks, // withLinks = true means clicking on network/devices is possible\n      type: this.props.type // manage, delete, choose\n    }\n  }\n\n\n  createCells = () => {\n    var networkLinks = [];\n\n    for (var i = 0; i < this.state.dataJson.length; i++) {\n      // For network/device page use\n      let deviceTags;\n      let curNetworkName;\n      let curNetworkDescription;\n\n      // For database page use \n      let curDatabaseId;\n      let curDatabaseName;\n      let curDatabaseType;\n\n      var buttonElement = [];\n\n      switch (this.state.type) {\n        // For DeleteNetwork\n        case \"delete\":\n          deviceTags = []; // Reset list of devices for network-to-be-displayed\n          curNetworkName = this.state.dataJson[i][\"NetworkName\"];\n          curNetworkDescription = this.state.dataJson[i][\"Description\"];\n    \n          buttonElement.push(\n            <Button key={\"deleteNetworkButton\" + i} className=\"float-right\" variant=\"danger\" size=\"sm\" onClick={this.props.deleteNetwork.bind(this, curNetworkName)}>\n              Delete Network\n            </Button>\n          )            \n          break;\n        // For ManageExistingNetworks\n        case \"manage\":\n          deviceTags = []; // Reset list of devices for network-to-be-displayed\n          curNetworkName = this.state.dataJson[i][\"NetworkName\"];\n          curNetworkDescription = this.state.dataJson[i][\"Description\"];\n    \n          buttonElement.push(\n            <Link key={\"manageNetworkButton\" + i} to={{pathname:'/addDeviceHome', networkProps:{'Network Name': curNetworkName}}}> \n              <Button className=\"float-right\" variant=\"light\" size=\"sm\">\n                Add Device\n              </Button>\n            </Link>\n          )\n          break;\n        // For ChooseNetwork\n        case \"chooseNetwork\":\n          deviceTags = []; // Reset list of devices for network-to-be-displayed\n          curNetworkName = this.state.dataJson[i][\"NetworkName\"];\n          curNetworkDescription = this.state.dataJson[i][\"Description\"];\n    \n          buttonElement.push(\n            <Link key={\"chooseNetworkButton\" + i} to={{pathname:'/chooseDatabaseConfig', networkProps:{'Network Name': curNetworkName}}}>\n              <Button className=\"float-right\" variant=\"success\" size=\"sm\">\n                Choose Network\n              </Button>\n            </Link>\n          )\n          break;\n        // For ChooseDatabaseConfig\n        case \"chooseDatabase\":\n          curDatabaseId = this.state.dataJson[i][\"dbId\"];\n          curDatabaseName = this.state.dataJson[i][\"databaseName\"];\n          curDatabaseType =  this.state.dataJson[i][\"type\"];\n          buttonElement.push(\n            <Link key={\"chooseDatabaseButton\" + i} to={{pathname:'/databaseConnection', networkProps:{}}}>\n              <Button className=\"float-right\" variant=\"success\" size=\"sm\">\n                Choose Database\n              </Button>\n            </Link>\n          )         \n          break;\n      }\n      \n      if (this.state.withLinks) {\n        var curDeviceKey;\n        var curDeviceName;\n\n        // Create links for network's corresponding devices\n        if (this.state.dataJson[i][\"Devices\"].length > 0) {\n          for (var k = 0; k < this.state.dataJson[i][\"Devices\"].length; k++) {\n            curDeviceKey = curNetworkName + \"Device\" + k;\n            curDeviceName = this.state.dataJson[i][\"Devices\"][k];       \n            deviceTags.push(\n              <div key={curDeviceKey} className=\"networksDeviceLink\">\n                <b>Device {k + 1}: </b>\n                  <Link to={{pathname:\"/manageExistingDevices/devices/\" + curNetworkName + \"/\" + curDeviceName, networkProps:{'Network Name': curNetworkName, 'Device Name': curDeviceName} }}>\n                    {curDeviceName}\n                  </Link><br></br>\n              </div>\n            );\n          }\n        }\n        // If now devices, say so\n        else {\n          deviceTags.push(\n            <div key=\"noDevices\" className=\"networksDeviceLink\">\n              No devices exist for this network.\n            </div>\n          );\n        }\n\n        // Create links for network, then create the jsx for networks/devices\n        networkLinks.push(\n          <div className=\"existingNetworkBox\" key={i}>\n            <div className=\"existingNetworkCell\">\n\n              {buttonElement}\n              \n              <div>\n                <b>Network Name: </b> \n                  <Link to={{pathname:\"/manageExistingNetwork/\" + curNetworkName, networkProps:{'Network Name': curNetworkName} }}>\n                    {curNetworkName}\n                  </Link><br></br>\n                <b>Description: </b> {curNetworkDescription}<br></br>\n              </div>\n              {deviceTags}\n            </div>\n          </div>\n        );\n      }\n      else { // without links\n        if (this.state.dataJson[i]) {\n          if (this.state.dataJson[i][\"Devices\"].length > 0) {\n            for (var j = 0; j < this.state.dataJson[i][\"Devices\"].length; j++) {\n              curDeviceKey = curNetworkName + \"Device\" + j;\n              curDeviceName = this.state.dataJson[i][\"Devices\"][j];       \n              deviceTags.push(\n                <div key={curDeviceKey} className=\"networksDeviceLink\">\n                  <b>Device {j + 1}: </b>{curDeviceName}<br></br>\n                </div>\n              );\n            }\n          }\n          // If no devices, say so\n          else {\n            deviceTags.push(\n              <div key={curDeviceKey} className=\"networksDeviceLink\">\n                No devices exist for this network.\n              </div>\n            );\n          }\n        }\n\n        // Create links for network, then create the jsx for networks/devices\n        if (this.state.type !== \"chooseDatabase\") {\n          networkLinks.push(\n            <div className=\"existingNetworkBox\" key={i}>\n              <div className=\"existingNetworkCell\">\n\n                {buttonElement}\n                \n                <div>\n                  <b>Network Name: </b> {curNetworkName}<br></br>\n                  <b>Description: </b> {curNetworkDescription}<br></br>\n                </div>\n                {deviceTags}\n              </div>\n            </div>\n          );\n        }\n        else {\n          networkLinks.push(\n            <div className=\"existingNetworkBox\" key={i}>\n              <div className=\"existingNetworkCell\">\n\n                {buttonElement}\n                \n                <div>\n                  <b>Database ID: </b> {curDatabaseID}<br></br>\n                  <b>Database Name: </b> {curDatabaseName}<br></br>\n                  <b>Database Type: </b> {curDatabaseType}<br></br>\n                </div>\n                {deviceTags}\n              </div>\n            </div>          \n          );\n        }\n      }\n\n    }\n\n\n    return networkLinks;\n  }\n\n\n  render() {\n    return (\n      <div id=\"networkDeviceCells\">\n        {this.createCells()}\n      </div>\n    );\n  }\n}\n\nexport default NetworkDeviceCellScreenTemplate; "]},"metadata":{},"sourceType":"module"}