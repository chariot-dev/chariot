{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hojoh\\\\Desktop\\\\Senior Design\\\\chariot\\\\gui\\\\src\\\\components\\\\deviceManagement\\\\ManageDeviceConfiguration.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport ConfirmationModalBody from '../shared/ConfirmationModalBody';\nimport SuccessModalBody from '../shared/SuccessModalBody';\nconst getDeviceConfigurationBaseUrl = 'http://localhost:5000/chariot/api/v1.0/network/device';\nconst modifyDeviceConfigurationBaseUrl = 'http://localhost:5000/chariot/api/v1.0/network/device';\nconst deleteDeviceBaseUrl = 'http://localhost:5000/chariot/api/v1.0/network/device';\nconst xhr = new XMLHttpRequest();\n\nclass ManageDeviceConfiguration extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.createDeviceConfigurationFields = () => {\n      var configurationFields = [];\n      console.log(this.state.originalDeviceProperties);\n\n      for (var key in this.state.originalDeviceProperties) {\n        configurationFields.push(React.createElement(\"div\", {\n          className: \"form-group\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }, key, \": \", React.createElement(\"input\", {\n          className: \"form-control\",\n          id: key,\n          name: key,\n          defaultValue: this.state.originalDeviceProperties[key],\n          onChange: this.handleChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        })));\n      }\n\n      return configurationFields;\n    };\n\n    this.toggleDeletionConfirmationModal = () => {\n      this.setState({\n        deleteConfirmIsOpen: !this.state.deleteConfirmIsOpen\n      });\n    };\n\n    this.toggleModifyConfirmationModal = () => {\n      this.setState({\n        saveConfirmIsOpen: !this.state.saveConfirmIsOpen\n      });\n    };\n\n    this.modifyDevice = () => {\n      xhr.open('PUT', modifyDeviceConfigurationBaseUrl + \"?networkName=\" + this.state.originalNetworkName + \"&deviceId=\" + this.state.originalDeviceName);\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          // Once the request is done\n          if (xhr.status === 200) {\n            this.setState({\n              saveConfirmIsOpen: false\n            });\n            this.setState({\n              saveSuccessIsOpen: !this.state.successIsOpen\n            });\n          } else {\n            console.log(xhr);\n            console.log(xhr.response);\n          }\n        }\n      };\n\n      var data = {};\n      var temp = [this.state.newDeviceProperties['Tag Population']]; // ======= When creating fields, no reference to field type, so some fields are would be sent as strings when they need to be ints. Also antenna beeds array. Need to fix ========\n\n      data = {\n        \"networkName\": this.state.originalNetworkName,\n        \"deviceId\": this.state.newDeviceProperties['Device Name'],\n        //\"newDeviceId\": this.state.newDeviceProperties['IP Address'], // Not needed because not changing name\n        \"ipAddress\": this.state.newDeviceProperties['IP Address'],\n        \"pollDelay\": this.state.newDeviceProperties['Poll Delay'],\n        \"antennas\": temp,\n        \"tag_population\": this.state.newDeviceProperties['Tag Population'],\n        \"report_every_n_tags\": this.state.newDeviceProperties['Report Every n Tags'],\n        \"tx_power\": this.state.newDeviceProperties['Tx Power'],\n        \"session\": this.state.newDeviceProperties['Session'],\n        \"start_inventory\": this.state.newDeviceProperties['Start Inventory'],\n        \"mode_identifier\": this.state.newDeviceProperties['Mode Identifier'],\n        \"EnableROSpecID\": this.state.newDeviceProperties['Enable ROS Spec ID'],\n        \"EnableSpecIndex\": this.state.newDeviceProperties['Enable Spec Index'],\n        \"EnableInventoryParameterSpecID\": this.state.newDeviceProperties['Enable Inventory Parameter Spec ID'],\n        \"EnableRFPhaseAngle\": this.state.newDeviceProperties['Enable RF Phase Angle']\n      };\n\n      if (this.state.originalDeviceName !== this.state.newDeviceProperties[\"Device Name\"]) {\n        data[\"newDeviceId\"] = this.state.newDeviceProperties['Device Name']; // Needed because changing name\n      }\n\n      console.log(data);\n      xhr.send(JSON.stringify(data));\n    };\n\n    this.toggleDeletionSuccessModal = () => {\n      xhr.open('DELETE', deleteDeviceBaseUrl + \"?networkName=\" + this.state.originalNetworkName + \"&deviceId=\" + this.state.originalDeviceName);\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          // Once the request is done\n          if (xhr.status === 200) {\n            this.setState({\n              deleteConfirmIsOpen: false\n            });\n            this.setState({\n              deleteSuccessIsOpen: !this.state.saveSuccessIsOpen\n            });\n          } else {\n            console.log(\"ERROR\");\n          }\n        }\n      };\n\n      xhr.send();\n    };\n\n    this.hideSaveConfirmModal = () => {\n      this.setState({\n        saveConfirmIsOpen: false\n      });\n    };\n\n    this.hideDeleteConfirmModal = () => {\n      this.setState({\n        deleteConfirmIsOpen: false\n      });\n    };\n\n    this.state = {\n      // These two state values are used to execute the GET call to get the device's original properties/configuration\n      originalDeviceName: this.props.location.networkProps[\"Device Name\"],\n      // this.props.location.deviceProps obtained from prop passed through from Link in ManageExistingNetworks jsx element\n      originalNetworkName: this.props.location.networkProps[\"Network Name\"],\n      originalDeviceProperties: {},\n      // Filled by componentDidMount()\n      newDeviceProperties: {},\n      saveConfirmIsOpen: false,\n      saveSuccessIsOpen: false,\n      deleteConfirmIsOpen: false,\n      deleteSuccessIsOpen: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    var updatedDeviceProperties = this.state.newDeviceProperties; // Store from current state\n\n    updatedDeviceProperties[event.target.name] = event.target.value; // Update the json\n\n    this.setState({\n      newDeviceProperties: updatedDeviceProperties\n    }); // Update the state\n  } // Gets run upon initial component render to load the default values of the text fields  \n\n\n  componentDidMount() {\n    xhr.open('GET', getDeviceConfigurationBaseUrl + '?networkName=' + this.state.originalNetworkName + '&deviceId=' + this.state.originalDeviceName);\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\"); // Once a response is received\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === XMLHttpRequest.DONE) {\n        if (xhr.status === 200) {\n          console.log(xhr.response);\n          var responseJsonArray = JSON.parse(xhr.response); // Response is a dictionary \n\n          var properties = {};\n          properties[\"Device Name\"] = this.state.originalDeviceName;\n          properties[\"IP Address\"] = responseJsonArray[\"ipAddress\"];\n          properties[\"Report Every n Tags\"] = responseJsonArray[\"report_every_n_tags\"];\n          properties[\"Session\"] = responseJsonArray[\"session\"];\n          properties[\"Start Inventory\"] = responseJsonArray[\"start_inventory\"];\n          properties[\"Mode Identifier\"] = responseJsonArray[\"mode_identifier\"];\n          properties[\"Tag Population\"] = responseJsonArray[\"tag_population\"];\n          properties[\"Poll Delay\"] = responseJsonArray[\"pollDelay\"];\n          properties[\"Tx Power\"] = responseJsonArray[\"tx_power\"];\n          properties[\"Enable Inventory Parameter Spec ID\"] = responseJsonArray[\"EnableInventoryParameterSpecID\"];\n          properties[\"Enable ROS Spec ID\"] = responseJsonArray[\"EnableROSpecID\"];\n          properties[\"Enable Spec Index\"] = responseJsonArray[\"EnableSpecIndex\"];\n          this.setState({\n            originalDeviceProperties: properties\n          }); // Initialize all to-be-saved properties to be the original, in the event not all properties are modified so can still be saved\n\n          this.setState({\n            newDeviceProperties: properties\n          });\n          console.log(properties);\n          console.log(responseJsonArray);\n        }\n      }\n    };\n\n    xhr.send();\n  }\n\n  render() {\n    console.log(this.state.newDeviceProperties);\n    return [React.createElement(\"div\", {\n      className: \"container\",\n      key: \"manageDeviceConfigurationScreen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, this.state.originalDeviceName, \" - Device Configuration\"), React.createElement(\"p\", {\n      className: \"screenInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, \"Modifying configuration settings of \", this.state.originalDeviceName, \" for \", this.state.originalNetworkName, \".\"), React.createElement(\"form\", {\n      id: \"modifyDeviceForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, Object.keys(this.state.newDeviceProperties).length === 0 ? null : this.createDeviceConfigurationFields()), React.createElement(Link, {\n      to: \"/manageExistingNetworks\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left footer-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"Back\")), React.createElement(Button, {\n      variant: \"danger\",\n      className: \"footer-button button-mid-bottom\",\n      onClick: this.toggleDeletionConfirmationModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, \"Delete Device\"), React.createElement(Button, {\n      variant: \"success\",\n      className: \"float-right footer-button\",\n      onClick: this.toggleModifyConfirmationModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, \"Save\")), React.createElement(Modal, {\n      show: this.state.saveConfirmIsOpen,\n      key: \"deviceSaveConfirmModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(ConfirmationModalBody, {\n      confirmationQuestion: \"Is the modified device configuration displayed below correct?\",\n      confirmationData: this.state.newDeviceProperties,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left\",\n      onClick: this.hideSaveConfirmModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, \"No\"), React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right\",\n      onClick: this.modifyDevice,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, \"Yes\"))), React.createElement(Modal, {\n      show: this.state.saveSuccessIsOpen,\n      key: \"deviceSaveSuccessModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(SuccessModalBody, {\n      successMessage: this.state.newDeviceProperties['Device Name'] + ' has successfully been modified.',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/welcome\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, \"Continue\")))), React.createElement(Modal, {\n      show: this.state.deleteConfirmIsOpen,\n      key: \"deviceDeletionConfirmModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, \"To confirm the deletion of the device, \", this.state.originalDeviceName, \", click 'Yes'.\"), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left\",\n      onClick: this.hideDeleteConfirmModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, \"No\"), React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right\",\n      onClick: this.toggleDeletionSuccessModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, \"Yes\"))), React.createElement(Modal, {\n      show: this.state.deleteSuccessIsOpen,\n      key: \"deviceDeletionSuccessModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, React.createElement(SuccessModalBody, {\n      successMessage: this.state.originalDeviceName + \" has been successfully removed from \" + this.state.originalNetworkName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/welcome\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"Continue\"))))];\n  }\n\n}\n\nexport default ManageDeviceConfiguration;","map":{"version":3,"sources":["C:\\Users\\hojoh\\Desktop\\Senior Design\\chariot\\gui\\src\\components\\deviceManagement\\ManageDeviceConfiguration.js"],"names":["React","Link","Button","Modal","ConfirmationModalBody","SuccessModalBody","getDeviceConfigurationBaseUrl","modifyDeviceConfigurationBaseUrl","deleteDeviceBaseUrl","xhr","XMLHttpRequest","ManageDeviceConfiguration","Component","constructor","props","createDeviceConfigurationFields","configurationFields","console","log","state","originalDeviceProperties","key","push","handleChange","toggleDeletionConfirmationModal","setState","deleteConfirmIsOpen","toggleModifyConfirmationModal","saveConfirmIsOpen","modifyDevice","open","originalNetworkName","originalDeviceName","setRequestHeader","onreadystatechange","readyState","DONE","status","saveSuccessIsOpen","successIsOpen","response","data","temp","newDeviceProperties","send","JSON","stringify","toggleDeletionSuccessModal","deleteSuccessIsOpen","hideSaveConfirmModal","hideDeleteConfirmModal","location","networkProps","bind","event","updatedDeviceProperties","target","name","value","componentDidMount","responseJsonArray","parse","properties","render","Object","keys","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\n\nimport ConfirmationModalBody from '../shared/ConfirmationModalBody';\nimport SuccessModalBody from '../shared/SuccessModalBody';\n\nconst getDeviceConfigurationBaseUrl = 'http://localhost:5000/chariot/api/v1.0/network/device';\nconst modifyDeviceConfigurationBaseUrl = 'http://localhost:5000/chariot/api/v1.0/network/device';\nconst deleteDeviceBaseUrl = 'http://localhost:5000/chariot/api/v1.0/network/device';\nconst xhr = new XMLHttpRequest();\n\n\nclass ManageDeviceConfiguration extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // These two state values are used to execute the GET call to get the device's original properties/configuration\n      originalDeviceName : this.props.location.networkProps[\"Device Name\"], // this.props.location.deviceProps obtained from prop passed through from Link in ManageExistingNetworks jsx element\n      originalNetworkName : this.props.location.networkProps[\"Network Name\"],\n      originalDeviceProperties: {}, // Filled by componentDidMount()\n      newDeviceProperties: {},\n      saveConfirmIsOpen: false,\n      saveSuccessIsOpen: false,\n      deleteConfirmIsOpen: false,\n      deleteSuccessIsOpen: false\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    var updatedDeviceProperties = this.state.newDeviceProperties; // Store from current state\n    updatedDeviceProperties[event.target.name] = event.target.value; // Update the json\n    \n    this.setState({ newDeviceProperties: updatedDeviceProperties }); // Update the state\n  }\n\n\n  // Gets run upon initial component render to load the default values of the text fields  \n  componentDidMount() {\n    xhr.open('GET', getDeviceConfigurationBaseUrl + '?networkName=' + this.state.originalNetworkName + '&deviceId=' + this.state.originalDeviceName);\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n    // Once a response is received\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === XMLHttpRequest.DONE) {\n        if (xhr.status === 200) {\n          console.log(xhr.response);\n          var responseJsonArray = JSON.parse(xhr.response); // Response is a dictionary \n\n          var properties = {};\n          properties[\"Device Name\"] = this.state.originalDeviceName;\n          properties[\"IP Address\"] = responseJsonArray[\"ipAddress\"];\n          properties[\"Report Every n Tags\"] = responseJsonArray[\"report_every_n_tags\"];\n          properties[\"Session\"] = responseJsonArray[\"session\"];\n          properties[\"Start Inventory\"] = responseJsonArray[\"start_inventory\"];\n          properties[\"Mode Identifier\"] = responseJsonArray[\"mode_identifier\"];\n          properties[\"Tag Population\"] = responseJsonArray[\"tag_population\"]; \n          properties[\"Poll Delay\"] = responseJsonArray[\"pollDelay\"];\n          properties[\"Tx Power\"] = responseJsonArray[\"tx_power\"];\n          properties[\"Enable Inventory Parameter Spec ID\"] = responseJsonArray[\"EnableInventoryParameterSpecID\"];\n          properties[\"Enable ROS Spec ID\"] = responseJsonArray[\"EnableROSpecID\"];\n          properties[\"Enable Spec Index\"] = responseJsonArray[\"EnableSpecIndex\"]; \n\n          this.setState({originalDeviceProperties: properties});\n\n          // Initialize all to-be-saved properties to be the original, in the event not all properties are modified so can still be saved\n          this.setState({newDeviceProperties: properties});\n          console.log(properties);\n          console.log(responseJsonArray);\n        }\n      }\n    }\n    \n    xhr.send();\n  }\n\n\n  createDeviceConfigurationFields = () => {\n    var configurationFields = [];\n\n    console.log(this.state.originalDeviceProperties);\n\n    for (var key in this.state.originalDeviceProperties) {\n      configurationFields.push(\n        <div className=\"form-group\">\n          {key}: <input className=\"form-control\" id={key} name={key} defaultValue={this.state.originalDeviceProperties[key]} onChange={this.handleChange}/>\n        </div>\n      );\n      \n    }\n\n    return configurationFields;\n  }\n\n\n  toggleDeletionConfirmationModal = () => {\n    this.setState({deleteConfirmIsOpen: !this.state.deleteConfirmIsOpen});\n  }\n\n  toggleModifyConfirmationModal = () => {\n    this.setState({saveConfirmIsOpen: !this.state.saveConfirmIsOpen});\n  }\n  \n  modifyDevice = () => {\n    xhr.open('PUT', modifyDeviceConfigurationBaseUrl + \"?networkName=\" + this.state.originalNetworkName + \"&deviceId=\" + this.state.originalDeviceName);\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === XMLHttpRequest.DONE) { // Once the request is done\n        if (xhr.status === 200) {\n          this.setState({\n            saveConfirmIsOpen: false\n          });\n          this.setState({\n            saveSuccessIsOpen: !this.state.successIsOpen\n          });      \n        }\n        else {\n          console.log(xhr);\n          console.log(xhr.response);\n        }\n      }\n    }    \n\n\n    var data = {};\n    var temp = [this.state.newDeviceProperties['Tag Population']];\n\n    // ======= When creating fields, no reference to field type, so some fields are would be sent as strings when they need to be ints. Also antenna beeds array. Need to fix ========\n    data = {\n      \"networkName\": this.state.originalNetworkName,\n      \"deviceId\": this.state.newDeviceProperties['Device Name'],\n      //\"newDeviceId\": this.state.newDeviceProperties['IP Address'], // Not needed because not changing name\n      \"ipAddress\": this.state.newDeviceProperties['IP Address'],\n      \"pollDelay\": this.state.newDeviceProperties['Poll Delay'],\n      \"antennas\": temp,\n      \"tag_population\": this.state.newDeviceProperties['Tag Population'],\n      \"report_every_n_tags\": this.state.newDeviceProperties['Report Every n Tags'],\n      \"tx_power\": this.state.newDeviceProperties['Tx Power'],\n      \"session\": this.state.newDeviceProperties['Session'],\n      \"start_inventory\": this.state.newDeviceProperties['Start Inventory'],\n      \"mode_identifier\": this.state.newDeviceProperties['Mode Identifier'],\n      \"EnableROSpecID\": this.state.newDeviceProperties['Enable ROS Spec ID'],\n      \"EnableSpecIndex\": this.state.newDeviceProperties['Enable Spec Index'],\n      \"EnableInventoryParameterSpecID\": this.state.newDeviceProperties['Enable Inventory Parameter Spec ID'],\n      \"EnableRFPhaseAngle\": this.state.newDeviceProperties['Enable RF Phase Angle']\n    }\n    if (this.state.originalDeviceName !== this.state.newDeviceProperties[\"Device Name\"]){\n      data[\"newDeviceId\"] = this.state.newDeviceProperties['Device Name']; // Needed because changing name\n    }\n\n    console.log(data);\n    xhr.send(JSON.stringify(data));\n\n  }\n\n  toggleDeletionSuccessModal = () => {\n    xhr.open('DELETE', deleteDeviceBaseUrl + \"?networkName=\" + this.state.originalNetworkName + \"&deviceId=\" + this.state.originalDeviceName);\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === XMLHttpRequest.DONE) { // Once the request is done\n        if (xhr.status === 200) {\n          this.setState({\n            deleteConfirmIsOpen: false\n          });\n          this.setState({\n            deleteSuccessIsOpen: !this.state.saveSuccessIsOpen\n          });    \n        }\n        else {\n          console.log(\"ERROR\");\n        }  \n      }\n    }\n\n    xhr.send();\n  }\n  \n  \n  hideSaveConfirmModal = () => {\n    this.setState({saveConfirmIsOpen: false});\n  }\n\n  hideDeleteConfirmModal = () => {\n    this.setState({deleteConfirmIsOpen: false});\n  }\n\n\n  render() {\n    console.log(this.state.newDeviceProperties);\n\n    return [\n      <div className=\"container\" key=\"manageDeviceConfigurationScreen\">\n        <h1>{this.state.originalDeviceName} - Device Configuration</h1>\n        <p className=\"screenInfo\">Modifying configuration settings of {this.state.originalDeviceName} for {this.state.originalNetworkName}.</p>\n\n        <form id=\"modifyDeviceForm\">\n          {Object.keys(this.state.newDeviceProperties).length === 0 ? null : this.createDeviceConfigurationFields()}\n        </form>\n\n        <Link to=\"/manageExistingNetworks\">\n          <Button variant=\"primary\" className=\"float-left footer-button\">Back</Button>\n        </Link>\n\n        <Button variant=\"danger\" className=\"footer-button button-mid-bottom\" onClick={this.toggleDeletionConfirmationModal}>Delete Device</Button>\n\n        <Button variant=\"success\" className=\"float-right footer-button\" onClick={this.toggleModifyConfirmationModal}>Save</Button>\n      </div>,\n\n      <Modal show={this.state.saveConfirmIsOpen} key=\"deviceSaveConfirmModal\">\n        <ConfirmationModalBody\n          confirmationQuestion='Is the modified device configuration displayed below correct?'\n          confirmationData = {this.state.newDeviceProperties}\n          >\n        </ConfirmationModalBody>\n\n        <Modal.Footer>\n          <Button variant=\"primary\" className=\"float-left\" onClick={this.hideSaveConfirmModal}>No</Button>\n          <Button variant=\"primary\" className=\"float-right\" onClick={this.modifyDevice}>Yes</Button>\n        </Modal.Footer>\n      </Modal>,\n\n      <Modal show={this.state.saveSuccessIsOpen} key=\"deviceSaveSuccessModal\">\n        <SuccessModalBody successMessage= {this.state.newDeviceProperties['Device Name'] + ' has successfully been modified.'}>\n        </SuccessModalBody>\n        <Modal.Footer>\n          <Link to=\"/welcome\">\n            <Button variant=\"primary\" className=\"float-right\">Continue</Button>\n          </Link>\n        </Modal.Footer>\n      </Modal>,\n\n      <Modal show={this.state.deleteConfirmIsOpen} key=\"deviceDeletionConfirmModal\">\n        <Modal.Body>\n          To confirm the deletion of the device, {this.state.originalDeviceName}, click 'Yes'.\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" className=\"float-left\" onClick={this.hideDeleteConfirmModal}>No</Button>\n          <Button variant=\"primary\" className=\"float-right\" onClick={this.toggleDeletionSuccessModal}>Yes</Button>\n        </Modal.Footer>\n      </Modal>,\n\n      <Modal show={this.state.deleteSuccessIsOpen} key=\"deviceDeletionSuccessModal\">\n        <SuccessModalBody successMessage= {this.state.originalDeviceName + \" has been successfully removed from \" + this.state.originalNetworkName}>\n        </SuccessModalBody>\n        <Modal.Footer>\n          <Link to=\"/welcome\">\n            <Button variant=\"primary\" className=\"float-right\">Continue</Button>\n          </Link>\n        </Modal.Footer>\n      </Modal>\n    ]\n  }\n}\n\nexport default ManageDeviceConfiguration;"]},"metadata":{},"sourceType":"module"}