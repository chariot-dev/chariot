{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Juan Garcia Lopez\\\\Desktop\\\\seniorDesign\\\\chariot\\\\gui\\\\src\\\\components\\\\databaseManagement\\\\DatabaseConnection.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport ConfirmationModalBody from '../shared/ConfirmationModalBody';\nimport SuccessModalBody from '../shared/SuccessModalBody';\nimport ErrorModalBody from '../shared/ErrorModalBody';\nconst databaseBaseUrl = \"http://localhost:5000/chariot/api/v1.0/database\";\n\nclass DatabaseConnection extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getSupportedDatabaseTypeOptions = () => {\n      var databaseOptionsElement = [];\n\n      for (var k = 0; k < this.state.supportedDatabaseTypes.length; k++) {\n        databaseOptionsElement.push(React.createElement(\"option\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, this.state.supportedDatabaseTypes[k]));\n      }\n\n      return databaseOptionsElement;\n    };\n\n    this.createDatabaseFields = () => {\n      var config = this.state.databaseConfig[this.state['Database Type']].settings;\n      var databaseSpecificForm = [];\n      console.log(config);\n\n      for (var i = 0; i < config.length; i++) {\n        var curFieldAlias = config[i].alias; // don't want the user to fill out the 'Type' on GUI, so removing it from here\n\n        if (curFieldAlias !== 'type') {\n          var curFieldDescription = config[i].description;\n          var curFieldType = config[i].inputType;\n          var curFieldTitle = config[i].title;\n          var curFieldIsRequired = config[i].required;\n          databaseSpecificForm.push(React.createElement(\"div\", {\n            className: \"form-group\",\n            key: curFieldAlias,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109\n            },\n            __self: this\n          }, curFieldIsRequired ? React.createElement(\"div\", {\n            className: \"requiredStar\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 110\n            },\n            __self: this\n          }, \"*\") : \"\", curFieldTitle, React.createElement(\"input\", {\n            type: curFieldType,\n            required: curFieldIsRequired,\n            className: curFieldType === \"checkbox\" ? 'deviceCreationFormCheckbox' : 'form-control',\n            id: curFieldAlias,\n            name: curFieldTitle,\n            onChange: this.handleChange,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 112\n            },\n            __self: this\n          })));\n        }\n      }\n\n      return databaseSpecificForm;\n    };\n\n    this.toggleErrorModal = () => {\n      this.setState({\n        errorIsOpen: !this.state.errorIsOpen\n      });\n    };\n\n    this.testConfigurationConnection = () => {\n      var formData = this.parseFromTextFields(); // Post request options\n\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      };\n      fetch(databaseBaseUrl + \"/test\", requestOptions).then(res => res.json()).then( // If post was successful, update state and display success modal\n      () => {\n        this.setState({\n          confirmIsOpen: false\n        });\n        this.setState({\n          successIsOpen: !this.state.successIsOpen\n        });\n      }, // If post was unsuccessful, update state and display error modal\n      error => {\n        // Once error message is set, then launch the error modal\n        this.setState({\n          errorMessage: error.message\n        }, () => {\n          this.setState({\n            errorIsOpen: !this.state.errorIsOpen\n          });\n        });\n      });\n    };\n\n    this.createDatabaseConfiguration = () => {\n      var formData = this.parseFromTextFields(); // Post request options\n\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      };\n      fetch(databaseBaseUrl, requestOptions).then(res => res.json()).then( // If post was successful, update state and display success modal\n      () => {\n        this.setState({\n          confirmIsOpen: false\n        });\n        this.setState({\n          successIsOpen: !this.state.successIsOpen\n        });\n      }, // If post was unsuccessful, update state and display error modal\n      error => {\n        // Once error message is set, then launch the error modal\n        this.setState({\n          errorMessage: error.message\n        }, () => {\n          this.setState({\n            errorIsOpen: !this.state.errorIsOpen\n          });\n        });\n      });\n    };\n\n    this.parseFromTextFields = () => {\n      var dbType = this.state[\"Database Type\"];\n      var formData = {};\n\n      for (var i = 0; i < this.state.databaseConfig[\"MongoDB\"].settings.length; i++) {\n        //need to match the databaseProperties keys (which align to title in databaseConfig)\n        var textFieldTitle = this.state.databaseConfig[dbType].settings[i].title;\n\n        if (textFieldTitle in this.state.databaseProperties) {\n          //user has entered a value for this field, add it to payload as the alias\n          formData[this.state.databaseConfig[dbType].settings[i].alias] = this.state.databaseProperties[textFieldTitle];\n        }\n      } //database type can't be parsed from text fields, so add that in separately\n\n\n      formData[\"type\"] = dbType;\n      return formData;\n    };\n\n    this.state = {\n      supportedDatabaseTypes: [],\n      'Database Type': '',\n      databaseConfig: {},\n      databaseProperties: {},\n      showDatabaseSpecificSettings: false,\n      errorIsOpen: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleDatabaseTypeChange = this.handleDatabaseTypeChange.bind(this);\n  } // Gets supported database types when page initially loads in order to dynamically fill in select-menu\n\n\n  componentDidMount() {\n    fetch(databaseBaseUrl + \"/supportedDatabases\").then(res => res.json()).then(result => {\n      var tempSupportedDatabaseTypes = [];\n\n      for (var key in result) {\n        tempSupportedDatabaseTypes.push(key);\n      }\n\n      this.setState({\n        supportedDatabaseTypes: tempSupportedDatabaseTypes\n      });\n    }, error => {\n      console.log(error.message);\n    });\n  } // Create the option elements for the select-menu\n\n\n  handleChange(event) {\n    var updatedDatabaseProperties = this.state.databaseProperties; // Store from current state\n\n    updatedDatabaseProperties[event.target.name] = event.target.value; // Update the json\n\n    this.setState({\n      databaseProperties: updatedDatabaseProperties\n    }); // Update the state\n  }\n  /*\n  As the database type the user selects changes, update that in the state.\n  */\n\n\n  handleDatabaseTypeChange(event) {\n    console.log(\"------- changed --------\");\n    var lastDatabaseType = this.state['Database Type'];\n\n    if (lastDatabaseType !== event.target.value) {\n      // If database type was changed\n      this.setState({\n        'Database Type': event.target.value\n      }, function () {\n        // Update state, then get config for the db type\n        fetch(databaseBaseUrl + \"/config?dbId=\" + this.state['Database Type']).then(res => res.json()).then(result => {\n          // Update state so can have reference to the config\n          this.setState({\n            databaseConfig: result\n          }, function () {\n            this.setState({\n              showDatabaseSpecificSettings: true\n            });\n          });\n        }, error => {\n          console.log(error);\n          this.setState({\n            errorIsOpen: true\n          });\n        });\n      });\n      this.setState({\n        showDatabaseSpecificSettings: false\n      }); // Reset to false after render to get ready for next render (if use changes database type)\n    }\n  }\n\n  render() {\n    console.log(this.state);\n    return [React.createElement(\"div\", {\n      className: \"container\",\n      key: \"databaseConnectionScreen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Database Connection\"), React.createElement(\"p\", {\n      className: \"screenInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \"Please fill in the following fields to connect to the database that will store the data.\"), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      required: true,\n      className: \"form-control\",\n      id: \"Database Type Select\",\n      name: \"Database Type\",\n      onChange: this.handleDatabaseTypeChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      selected: true,\n      disabled: true,\n      hidden: true,\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, \"Select a Database Type\"), this.getSupportedDatabaseTypeOptions())), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, this.state.showDatabaseSpecificSettings ? this.createDatabaseFields() : null, React.createElement(Link, {\n      to: \"/chooseDatabaseConfig\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right footer-button\",\n      type: \"submit\",\n      onClick: this.createDatabaseConfiguration,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, \"Create\"))), React.createElement(Link, {\n      to: \"/chooseNetwork\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left footer-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"Back\")), React.createElement(Button, {\n      variant: \"success\",\n      className: \"footer-button button-mid-bottom\",\n      onClick: this.testConfigurationConnection,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, \"Test Connection\")), React.createElement(Modal, {\n      show: this.state.errorIsOpen,\n      key: \"getDatabaseConfigError\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(ErrorModalBody, {\n      errorMessage: \"Could not get database configuration due to an error. Please try again.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left\",\n      onClick: this.toggleErrorModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, \"OK\")))];\n  }\n\n}\n\nexport default DatabaseConnection;","map":{"version":3,"sources":["C:\\Users\\Juan Garcia Lopez\\Desktop\\seniorDesign\\chariot\\gui\\src\\components\\databaseManagement\\DatabaseConnection.js"],"names":["React","Component","Link","Button","Modal","ConfirmationModalBody","SuccessModalBody","ErrorModalBody","databaseBaseUrl","DatabaseConnection","constructor","props","getSupportedDatabaseTypeOptions","databaseOptionsElement","k","state","supportedDatabaseTypes","length","push","createDatabaseFields","config","databaseConfig","settings","databaseSpecificForm","console","log","i","curFieldAlias","alias","curFieldDescription","description","curFieldType","inputType","curFieldTitle","title","curFieldIsRequired","required","handleChange","toggleErrorModal","setState","errorIsOpen","testConfigurationConnection","formData","parseFromTextFields","requestOptions","method","headers","body","JSON","stringify","fetch","then","res","json","confirmIsOpen","successIsOpen","error","errorMessage","message","createDatabaseConfiguration","dbType","textFieldTitle","databaseProperties","showDatabaseSpecificSettings","bind","handleDatabaseTypeChange","componentDidMount","result","tempSupportedDatabaseTypes","key","event","updatedDatabaseProperties","target","name","value","lastDatabaseType","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\n\nimport ConfirmationModalBody from '../shared/ConfirmationModalBody';\nimport SuccessModalBody from '../shared/SuccessModalBody';\nimport ErrorModalBody from '../shared/ErrorModalBody';\n\nconst databaseBaseUrl = \"http://localhost:5000/chariot/api/v1.0/database\"\n\nclass DatabaseConnection extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      supportedDatabaseTypes: [],\n      'Database Type' : '',\n      databaseConfig : {},\n      databaseProperties: {},\n      showDatabaseSpecificSettings: false,\n      errorIsOpen: false\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleDatabaseTypeChange = this.handleDatabaseTypeChange.bind(this);\n  }\n\n  // Gets supported database types when page initially loads in order to dynamically fill in select-menu\n  componentDidMount() {\n    fetch(databaseBaseUrl + \"/supportedDatabases\")\n    .then(res => res.json())\n    .then(\n      (result) => {\n        var tempSupportedDatabaseTypes = [];\n        for (var key in result) {\n          tempSupportedDatabaseTypes.push(key);\n        }\n        this.setState({supportedDatabaseTypes: tempSupportedDatabaseTypes});\n      },\n      (error) => {\n        console.log(error.message);\n      }\n    )\n  }\n\n  // Create the option elements for the select-menu\n  getSupportedDatabaseTypeOptions = () => {\n    var databaseOptionsElement = [];\n\n    for (var k = 0; k < this.state.supportedDatabaseTypes.length; k++) {\n      databaseOptionsElement.push(<option>{this.state.supportedDatabaseTypes[k]}</option>);\n    }\n\n    return databaseOptionsElement;\n  }\n\n  handleChange(event) {\n    var updatedDatabaseProperties = this.state.databaseProperties; // Store from current state\n    updatedDatabaseProperties[event.target.name] = event.target.value; // Update the json\n    \n    this.setState({ databaseProperties: updatedDatabaseProperties }); // Update the state\n  }\n\n  /*\n  As the database type the user selects changes, update that in the state.\n  */\n  handleDatabaseTypeChange(event) {\n    console.log(\"------- changed --------\");\n    var lastDatabaseType = this.state['Database Type'];\n\n    if (lastDatabaseType !== event.target.value) { // If database type was changed\n      this.setState({'Database Type': event.target.value }, function () { // Update state, then get config for the db type\n        fetch(databaseBaseUrl + \"/config?dbId=\" + this.state['Database Type'])\n        .then(res => res.json())\n        .then(\n          (result) => {\n            // Update state so can have reference to the config\n            this.setState({databaseConfig: result}, function () {\n              this.setState({ showDatabaseSpecificSettings: true});\n            });\n          },\n          (error) => {\n            console.log(error);\n            this.setState({ errorIsOpen: true});\n          }\n        )\n      });\n\n      this.setState({ showDatabaseSpecificSettings: false}); // Reset to false after render to get ready for next render (if use changes database type)\n    }\n  }\n\n  createDatabaseFields = () => {\n    var config = this.state.databaseConfig[this.state['Database Type']].settings;\n    var databaseSpecificForm = [];\n    console.log(config);\n    \n    for (var i = 0; i < config.length; i++) {\n      var curFieldAlias = config[i].alias;\n      // don't want the user to fill out the 'Type' on GUI, so removing it from here\n      if (curFieldAlias !== 'type') {\n        var curFieldDescription = config[i].description;\n        var curFieldType = config[i].inputType;\n        var curFieldTitle = config[i].title;\n        var curFieldIsRequired = config[i].required;\n\n        databaseSpecificForm.push(\n          <div className=\"form-group\" key={curFieldAlias}>\n            {curFieldIsRequired ? <div className=\"requiredStar\">*</div> : \"\"}\n            {curFieldTitle}\n            <input type={curFieldType}  required={curFieldIsRequired} className={curFieldType === \"checkbox\" ? 'deviceCreationFormCheckbox' : 'form-control'} id={curFieldAlias} name={curFieldTitle} onChange={this.handleChange}/>\n          </div>\n        );\n      }\n\n    }\n\n    return databaseSpecificForm;\n  }\n\n  toggleErrorModal = () => {\n    this.setState({ errorIsOpen: !this.state.errorIsOpen });\n  }\n\n  testConfigurationConnection = () => {\n    var formData = this.parseFromTextFields();\n    // Post request options\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(formData)\n    };\n\n    fetch(databaseBaseUrl + \"/test\", requestOptions)\n    .then(res => res.json())\n    .then(\n      // If post was successful, update state and display success modal\n      () => {\n        this.setState({\n          confirmIsOpen: false\n        });\n        this.setState({\n          successIsOpen: !this.state.successIsOpen\n        });\n      },\n      // If post was unsuccessful, update state and display error modal\n      (error) => {\n        // Once error message is set, then launch the error modal\n        this.setState({\n          errorMessage: error.message\n        }, () => {\n          this.setState({ errorIsOpen: !this.state.errorIsOpen });\n        });\n      }\n    )\n  };\n\n  //When the create button is clicked, take the values from the text fields and create a database configuration\n  createDatabaseConfiguration = () => {\n    var formData = this.parseFromTextFields();\n    // Post request options\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(formData)\n    };\n\n    fetch(databaseBaseUrl, requestOptions)\n    .then(res => res.json())\n    .then(\n      // If post was successful, update state and display success modal\n      () => {\n        this.setState({\n          confirmIsOpen: false\n        });\n        this.setState({\n          successIsOpen: !this.state.successIsOpen\n        });\n      },\n      // If post was unsuccessful, update state and display error modal\n      (error) => {\n        // Once error message is set, then launch the error modal\n        this.setState({\n          errorMessage: error.message\n        }, () => {\n          this.setState({ errorIsOpen: !this.state.errorIsOpen });\n        });\n      }\n    )\n  };\n\n  //Utility method meant to return values from each text field that is filled by user\n  parseFromTextFields = () => {\n    var dbType = this.state[\"Database Type\"];\n\n    var formData = {};\n\n    for (var i = 0; i < this.state.databaseConfig[\"MongoDB\"].settings.length; i++) {\n      //need to match the databaseProperties keys (which align to title in databaseConfig)\n      var textFieldTitle = this.state.databaseConfig[dbType].settings[i].title;\n      if (textFieldTitle in this.state.databaseProperties) {\n        //user has entered a value for this field, add it to payload as the alias\n        formData[this.state.databaseConfig[dbType].settings[i].alias] = this.state.databaseProperties[textFieldTitle]\n      }\n    }\n\n    //database type can't be parsed from text fields, so add that in separately\n    formData[\"type\"] = dbType;\n\n    return formData;\n  };\n\n\n  render() {\n    console.log(this.state);\n    return [\n      <div className=\"container\" key=\"databaseConnectionScreen\">\n        <h1>Database Connection</h1>\n        <p className=\"screenInfo\">Please fill in the following fields to connect to the database that will store the data.</p>\n\n        <div className=\"form-group\">\n              <select required className=\"form-control\" id=\"Database Type Select\" name=\"Database Type\" onChange={this.handleDatabaseTypeChange}>\n                <option selected disabled hidden value=\"\">Select a Database Type</option>\n                {this.getSupportedDatabaseTypeOptions()}\n              </select>\n          </div>\n\n\n        <form>\n          {this.state.showDatabaseSpecificSettings ? this.createDatabaseFields() : null}\n          <Link to=\"/chooseDatabaseConfig\">\n            <Button variant=\"primary\" className=\"float-right footer-button\" type=\"submit\"\n                    onClick={this.createDatabaseConfiguration}>Create</Button>\n          </Link>\n        </form>\n\n\n        <Link to=\"/chooseNetwork\">\n            <Button variant=\"primary\" className=\"float-left footer-button\">Back</Button>\n        </Link>\n\n        <Button variant=\"success\" className=\"footer-button button-mid-bottom\"\n                onClick={this.testConfigurationConnection}>Test Connection</Button>\n\n      </div>,\n\n      <Modal show={this.state.errorIsOpen} key=\"getDatabaseConfigError\">\n\n        <ErrorModalBody errorMessage='Could not get database configuration due to an error. Please try again.'>\n        </ErrorModalBody>\n\n        <Modal.Footer>\n          <Button variant=\"primary\" className=\"float-left\" onClick={this.toggleErrorModal}>OK</Button>\n        </Modal.Footer>\n      </Modal>\n\n    ]\n  }\n\n\n\n\n}\n\nexport default DatabaseConnection;"]},"metadata":{},"sourceType":"module"}