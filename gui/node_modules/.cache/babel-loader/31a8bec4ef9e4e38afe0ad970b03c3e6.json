{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hojoh\\\\Desktop\\\\Senior Design\\\\chariot\\\\gui\\\\src\\\\components\\\\networkManagement\\\\ChooseNetwork.js\";\n\n/*\n  This component handles the user having to choose a network to run the data collection episode on.\n  The body of the screen (network/device info) is generated through the NetworkDeviceCellScreenTemplate \n  child component. Since the buttons in this component links the user to other components, a callback \n  to update this component's state isn't necessary. \n\n*/\nimport React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom';\nimport NetworkDeviceCellScreenTemplate from '../shared/NetworkDeviceCellScreenTemplate';\nconst getAllNetworksBaseUrl = 'http://localhost:5000/chariot/api/v1.0/networks/all';\n\nclass ChooseNetwork extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      existingNetworks: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(getAllNetworksBaseUrl).then(res => res.json()).then( // On success\n    result => {\n      var responseJsonArray = result; // Response is a dictionary  \n\n      var updatedNetworksJsonArray = this.state.existingNetworks;\n\n      for (var i = 0; i < responseJsonArray.length; i++) {\n        updatedNetworksJsonArray.push(responseJsonArray[i]);\n      }\n\n      this.setState({\n        existingNetworks: updatedNetworksJsonArray\n      });\n    }, // On error\n    error => {\n      console.log(error.message);\n      /*\n        Have an error modal for being unable to get device types. Once button on the modal is clicked, Chariot goes back to welcome screen\n      */\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Choose a Network\"), React.createElement(\"p\", {\n      className: \"screenInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Select a network to begin data collection process.\"), this.state.existingNetworks ? React.createElement(NetworkDeviceCellScreenTemplate, {\n      dataJson: this.state.existingNetworks,\n      withLinks: false,\n      type: \"choose\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }) : null, React.createElement(Link, {\n      to: \"/welcome\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left footer-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Back\")));\n  }\n\n}\n\nexport default ChooseNetwork;","map":{"version":3,"sources":["C:\\Users\\hojoh\\Desktop\\Senior Design\\chariot\\gui\\src\\components\\networkManagement\\ChooseNetwork.js"],"names":["React","Component","Button","Link","NetworkDeviceCellScreenTemplate","getAllNetworksBaseUrl","ChooseNetwork","constructor","props","state","existingNetworks","componentDidMount","fetch","then","res","json","result","responseJsonArray","updatedNetworksJsonArray","i","length","push","setState","error","console","log","message","render"],"mappings":";;AAAA;;;;;;;AAQA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,OAAOC,+BAAP,MAA4C,2CAA5C;AAEA,MAAMC,qBAAqB,GAAG,qDAA9B;;AAEA,MAAMC,aAAN,SAA4BL,SAA5B,CAAsC;AACpCM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,gBAAgB,EAAE;AADP,KAAb;AAGD;;AAEDC,EAAAA,iBAAiB,GAAI;AACnBC,IAAAA,KAAK,CAACP,qBAAD,CAAL,CACCQ,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,EAGE;AACCG,IAAAA,MAAD,IAAY;AACV,UAAIC,iBAAiB,GAAGD,MAAxB,CADU,CACsB;;AAEhC,UAAIE,wBAAwB,GAAG,KAAKT,KAAL,CAAWC,gBAA1C;;AAEA,WAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,iBAAiB,CAACG,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;AACjDD,QAAAA,wBAAwB,CAACG,IAAzB,CAA8BJ,iBAAiB,CAACE,CAAD,CAA/C;AACD;;AAED,WAAKG,QAAL,CAAc;AAAEZ,QAAAA,gBAAgB,EAAEQ;AAApB,OAAd;AACD,KAdH,EAeE;AACCK,IAAAA,KAAD,IAAW;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AAGD;;;AAGA,KAvBH;AAyBD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEE;AAAG,MAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DAFF,EAMG,KAAKlB,KAAL,CAAWC,gBAAX,GAA8B,oBAAC,+BAAD;AAAiC,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWC,gBAAtD;AAAwE,MAAA,SAAS,EAAE,KAAnF;AAA0F,MAAA,IAAI,EAAC,QAA/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA9B,GAA2K,IAN9K,EAQE,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAC,UAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,SAAhB;AAA0B,MAAA,SAAS,EAAC,0BAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CARF,CADF;AAcD;;AAnDmC;;AAuDtC,eAAeJ,aAAf","sourcesContent":["/*\n  This component handles the user having to choose a network to run the data collection episode on.\n  The body of the screen (network/device info) is generated through the NetworkDeviceCellScreenTemplate \n  child component. Since the buttons in this component links the user to other components, a callback \n  to update this component's state isn't necessary. \n\n*/\n\nimport React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom';\n\nimport NetworkDeviceCellScreenTemplate from '../shared/NetworkDeviceCellScreenTemplate';\n\nconst getAllNetworksBaseUrl = 'http://localhost:5000/chariot/api/v1.0/networks/all';\n\nclass ChooseNetwork extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      existingNetworks: []\n    }\n  }\n\n  componentDidMount () {\n    fetch(getAllNetworksBaseUrl)\n    .then(res => res.json())\n    .then(\n      // On success\n      (result) => {\n        var responseJsonArray = result; // Response is a dictionary  \n\n        var updatedNetworksJsonArray = this.state.existingNetworks;\n\n        for (var i = 0; i < responseJsonArray.length; i++) {\n          updatedNetworksJsonArray.push(responseJsonArray[i]);\n        }\n\n        this.setState({ existingNetworks: updatedNetworksJsonArray });\n      },\n      // On error\n      (error) => {\n        console.log(error.message);\n\n   \n       /*\n         Have an error modal for being unable to get device types. Once button on the modal is clicked, Chariot goes back to welcome screen\n       */ \n      }\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Choose a Network</h1>\n        <p className=\"screenInfo\">\n          Select a network to begin data collection process.\n        </p>\n\n        {this.state.existingNetworks ? <NetworkDeviceCellScreenTemplate dataJson={this.state.existingNetworks} withLinks={false} type=\"choose\"></NetworkDeviceCellScreenTemplate> : null}\n\n        <Link to=\"/welcome\">\n          <Button variant=\"primary\" className=\"float-left footer-button\">Back</Button>\n        </Link>\n      </div>\n    );\n  }\n\n}\n\nexport default ChooseNetwork; "]},"metadata":{},"sourceType":"module"}