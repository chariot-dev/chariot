{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hojoh\\\\Desktop\\\\Senior Design\\\\chariot\\\\gui\\\\src\\\\components\\\\networkManagement\\\\AddNetwork.js\";\n\n/*\n  AddNetwork.js\n\n  This component the represents the screen where the user will initially configure the name\n  and description of their network.\n\n*/\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport ConfirmationModalBody from '../shared/ConfirmationModalBody';\nimport SuccessModalBody from '../shared/SuccessModalBody';\nimport ErrorModalBody from '../shared/ErrorModalBody';\nconst postCreateNetworkBaseUrl = 'http://localhost:5000/chariot/api/v1.0/network';\nconst xhr = new XMLHttpRequest();\n\nclass AddNetwork extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleErrorModal = () => {\n      this.setState({\n        confirmIsOpen: false\n      });\n      this.setState({\n        errorIsOpen: !this.state.errorIsOpen\n      });\n    };\n\n    this.createNetworkAndToggleSuccessModal = () => {\n      xhr.open('POST', postCreateNetworkBaseUrl);\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n      xhr.onreadystatechange = () => {\n        // Call a function when the state changes.\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          if (xhr.status === 200) {\n            this.setState({\n              confirmIsOpen: false\n            });\n            this.setState({\n              successIsOpen: !this.state.successIsOpen\n            });\n          } else {\n            this.setState({\n              errorIsOpen: !this.state.errorIsOpen\n            });\n          }\n        }\n      };\n\n      var data = {\n        \"networkName\": this.state.networkProperties[\"Network Name\"],\n        \"description\": this.state.networkProperties[\"Network Description\"]\n      };\n      xhr.send(JSON.stringify(data));\n    };\n\n    this.state = {\n      networkProperties: {\n        \"Network Name\": \"\",\n        \"Network Description\": \"\"\n      },\n      isSubmitted: false,\n      confirmIsOpen: false,\n      successIsOpen: false,\n      errorIsOpen: false\n    };\n    this.toggleConfirmationModal = this.toggleConfirmationModal.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    var updatedNetworkProperties = this.state.networkProperties; // Store from current state\n\n    updatedNetworkProperties[event.target.name] = event.target.value; // Update the json\n\n    this.setState({\n      networkProperties: updatedNetworkProperties\n    }); // Update the state\n  }\n\n  toggleConfirmationModal(event) {\n    this.setState({\n      confirmIsOpen: !this.state.confirmIsOpen\n    });\n    event.preventDefault();\n  }\n\n  render() {\n    return [React.createElement(\"div\", {\n      className: \"container\",\n      key: \"addNetworkForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Add a New Network\"), React.createElement(\"p\", {\n      className: \"screenInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Please fill in the fields below to create a network. Then, click \\\"Next\\\".\"), React.createElement(\"form\", {\n      id: \"createNetworkForm\",\n      onSubmit: this.toggleConfirmationModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Network Name: \", React.createElement(\"input\", {\n      required: true,\n      className: \"form-control\",\n      id: \"networkNameInput\",\n      name: \"Network Name\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Network Description: \", React.createElement(\"textarea\", {\n      required: true,\n      className: \"form-control\",\n      id: \"networkDescriptionInput\",\n      rows: \"5\",\n      name: \"Network Description\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    })), React.createElement(Link, {\n      to: \"/networkManager\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left footer-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Back\")), React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right footer-button\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Next\"))), React.createElement(Modal, {\n      show: this.state.confirmIsOpen,\n      key: \"addNetworkConfirmation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(ConfirmationModalBody, {\n      confirmationQuestion: \"Is this information for your network correct?\",\n      confirmationData: this.state.networkProperties,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left\",\n      onClick: this.toggleConfirmationModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"No\"), React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right\",\n      onClick: this.createNetworkAndToggleSuccessModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Yes\"))), React.createElement(Modal, {\n      show: this.state.successIsOpen,\n      key: \"addNetworkSuccessModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(SuccessModalBody, {\n      successMessage: \"Your network was succesfully added! Would you like to add a device to this network as well?\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/networkManager\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"No\")), React.createElement(Link, {\n      to: {\n        pathname: '/addDeviceHome',\n        networkProps: {\n          'Network Name': this.state.networkProperties['Network Name']\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Yes\")))), React.createElement(Modal, {\n      show: this.state.errorIsOpen,\n      key: \"addNetworkErrorModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(ErrorModalBody, {\n      errorMessage: \"Your network was not created. Please go back, verify that the information is correct, and then try again.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left\",\n      onClick: this.toggleErrorModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"OK\")))];\n  }\n\n}\n\nexport default AddNetwork;","map":{"version":3,"sources":["C:\\Users\\hojoh\\Desktop\\Senior Design\\chariot\\gui\\src\\components\\networkManagement\\AddNetwork.js"],"names":["React","Component","Link","Modal","Button","ConfirmationModalBody","SuccessModalBody","ErrorModalBody","postCreateNetworkBaseUrl","xhr","XMLHttpRequest","AddNetwork","constructor","props","toggleErrorModal","setState","confirmIsOpen","errorIsOpen","state","createNetworkAndToggleSuccessModal","open","setRequestHeader","onreadystatechange","readyState","DONE","status","successIsOpen","data","networkProperties","send","JSON","stringify","isSubmitted","toggleConfirmationModal","bind","handleChange","event","updatedNetworkProperties","target","name","value","preventDefault","render","pathname","networkProps"],"mappings":"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","sourcesContent":["/*\n  AddNetwork.js\n\n  This component the represents the screen where the user will initially configure the name\n  and description of their network.\n\n*/\n\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\nimport ConfirmationModalBody from '../shared/ConfirmationModalBody';\nimport SuccessModalBody from '../shared/SuccessModalBody';\nimport ErrorModalBody from '../shared/ErrorModalBody';\n\nconst postCreateNetworkBaseUrl = 'http://localhost:5000/chariot/api/v1.0/network';\nconst xhr = new XMLHttpRequest();\n\nclass AddNetwork extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      networkProperties: {\n        \"Network Name\": \"\",\n        \"Network Description\": \"\"\n      },\n      isSubmitted: false,\n      confirmIsOpen: false,\n      successIsOpen: false,\n      errorIsOpen: false\n    }\n\n    this.toggleConfirmationModal = this.toggleConfirmationModal.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  \n  handleChange(event) {\n    var updatedNetworkProperties = this.state.networkProperties; // Store from current state\n    updatedNetworkProperties[event.target.name] = event.target.value; // Update the json\n    \n    this.setState({ networkProperties: updatedNetworkProperties }); // Update the state\n  }\n\n  toggleConfirmationModal(event) {\n    this.setState({\n      confirmIsOpen: !this.state.confirmIsOpen\n    });\n    event.preventDefault();\n  }\n\n  toggleErrorModal = () => {\n    this.setState({\n      confirmIsOpen: false\n    });\n    this.setState({\n      errorIsOpen: !this.state.errorIsOpen\n    });\n  }\n\n  createNetworkAndToggleSuccessModal = () => {\n    xhr.open('POST', postCreateNetworkBaseUrl);\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n    xhr.onreadystatechange = () => { // Call a function when the state changes.\n      if (xhr.readyState === XMLHttpRequest.DONE) {\n        if (xhr.status === 200) {\n          this.setState({\n            confirmIsOpen: false\n          });\n          this.setState({\n            successIsOpen: !this.state.successIsOpen\n          });\n        }\n        else {\n          this.setState({ errorIsOpen: !this.state.errorIsOpen });\n        }\n      }\n    }\n\n    var data = {\n      \"networkName\": this.state.networkProperties[\"Network Name\"],\n      \"description\": this.state.networkProperties[\"Network Description\"]\n    }\n\n    xhr.send(JSON.stringify(data));\n  }\n\n  render() {\n    return [\n      <div className=\"container\" key=\"addNetworkForm\">\n        <h1>Add a New Network</h1>\n          <p className=\"screenInfo\">Please fill in the fields below to create a network. Then, click \"Next\".</p>\n          \n          <form id=\"createNetworkForm\" onSubmit={this.toggleConfirmationModal}>\n            <div className=\"form-group\">\n              Network Name: <input required className=\"form-control\" id=\"networkNameInput\" name=\"Network Name\" onChange={this.handleChange}/>\n            </div>\n            <div className=\"form-group\">\n              Network Description: <textarea required className=\"form-control\" id=\"networkDescriptionInput\" rows=\"5\" name=\"Network Description\" onChange={this.handleChange}></textarea>\n            </div>\n            <Link to=\"/networkManager\">\n              <Button variant=\"primary\" className=\"float-left footer-button\">Back</Button>\n            </Link>\n            <Button variant=\"primary\" className=\"float-right footer-button\" type=\"submit\">Next</Button>\n        </form>\n      </div>,\n\n      <Modal show={this.state.confirmIsOpen} key=\"addNetworkConfirmation\">\n          <ConfirmationModalBody\n            confirmationQuestion='Is this information for your network correct?'\n            confirmationData = {this.state.networkProperties}\n            >\n          </ConfirmationModalBody>\n          \n        <Modal.Footer>\n          <Button variant=\"primary\" className=\"float-left\" onClick={this.toggleConfirmationModal}>No</Button>\n          <Button variant=\"primary\" className=\"float-right\" onClick={this.createNetworkAndToggleSuccessModal}>Yes</Button>\n        </Modal.Footer>\n      </Modal>,\n\n      <Modal show={this.state.successIsOpen} key=\"addNetworkSuccessModal\">\n        <SuccessModalBody successMessage=\"Your network was succesfully added! Would you like to add a device to this network as well?\">\n        </SuccessModalBody>\n\n        <Modal.Footer>\n          <Link to=\"/networkManager\">\n            <Button variant=\"primary\" className=\"float-left\">No</Button>\n          </Link>\n          <Link to={{ pathname:'/addDeviceHome', networkProps:{'Network Name': this.state.networkProperties['Network Name']} }}>\n            <Button variant=\"primary\" className=\"float-right\">Yes</Button>\n          </Link>\n        </Modal.Footer>\n      </Modal>,\n\n      <Modal show={this.state.errorIsOpen} key=\"addNetworkErrorModal\">\n\n        <ErrorModalBody errorMessage=\"Your network was not created. Please go back, verify that the information is correct, and then try again.\">\n        </ErrorModalBody>\n\n        <Modal.Footer>\n          <Button variant=\"primary\" className=\"float-left\" onClick={this.toggleErrorModal}>OK</Button>\n        </Modal.Footer>\n      </Modal>\n    ]\n  }\n\n}\n\nexport default AddNetwork; "]},"metadata":{},"sourceType":"module"}