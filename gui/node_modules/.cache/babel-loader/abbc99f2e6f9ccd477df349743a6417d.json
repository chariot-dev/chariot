{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hojoh\\\\Desktop\\\\Senior Design\\\\chariot\\\\gui\\\\src\\\\components\\\\databaseManagement\\\\DatabaseConnection.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport ConfirmationModalBody from '../shared/ConfirmationModalBody';\nimport SuccessModalBody from '../shared/SuccessModalBody'; //import ErrorModalBody from '../shared/ErrorModalBody';\n\nclass DatabaseConnection extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleSuccessModal = () => {\n      this.setState({\n        confirmIsOpen: false\n      });\n      this.setState({\n        successIsOpen: !this.state.successIsOpen\n      });\n    };\n\n    console.log(this.props.location.networkProps);\n    this.state = {\n      chosenNetwork: this.props.location.networkProps['Network Name'],\n      networkDevices: this.props.location.networkProps['Devices'],\n      formControls: {\n        \"IP Address\": '',\n        \"Name\": '',\n        \"Password\": ''\n      },\n      successMessage: '',\n      confirmIsOpen: false,\n      successIsOpen: false\n    };\n    this.testConnection = this.testConnection.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.toggleConfirmationModal = this.toggleConfirmationModal.bind(this);\n    this.handleCancelConfirmation = this.handleCancelConfirmation.bind(this);\n  }\n  /*\n    Updates prop values (account-related) as they are entered by the user.\n  */\n\n\n  handleChange(event) {\n    var updatedFormControls = this.state.formControls; // Store from current state\n\n    updatedFormControls[event.target.name] = event.target.value; // Update the json\n\n    this.setState({\n      formControls: updatedFormControls\n    }); // Update the state\n  }\n\n  toggleConfirmationModal(event) {\n    this.setState({\n      confirmIsOpen: !this.state.confirmIsOpen\n    });\n    event.preventDefault();\n  }\n\n  handleCancelConfirmation(event) {\n    this.setState({\n      isSubmitted: !this.state.isSubmitted,\n      confirmIsOpen: !this.state.confirmIsOpen\n    });\n    event.preventDefault(); // To prevent screen from rerendering\n  }\n\n  testConnection(event) {\n    //currently assuming that connection will always be established, display that connection is successful for 3 seconds\n    setTimeout(() => this.setState({\n      message: 'Connection Successful!'\n    }), 3000);\n  }\n\n  render() {\n    return [React.createElement(\"div\", {\n      className: \"container\",\n      key: \"databaseConnectionScreen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Database Connection\"), React.createElement(\"p\", {\n      className: \"screenInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Please fill in the following fields to connect to the database that will store the data.\"), React.createElement(\"form\", {\n      onSubmit: this.toggleConfirmationModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      required: true,\n      type: \"text\",\n      className: \"form-control\",\n      id: \"IP Address\",\n      name: \"IP Address\",\n      placeholder: \"IP Address\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      required: true,\n      type: \"text\",\n      className: \"form-control\",\n      id: \"Name\",\n      name: \"Name\",\n      placeholder: \"Name\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      required: true,\n      type: \"password\",\n      className: \"form-control\",\n      id: \"Password\",\n      name: \"Password\",\n      placeholder: \"Password\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    })), React.createElement(Link, {\n      to: \"/chooseNetwork\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left footer-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Back\")), React.createElement(Button, {\n      variant: \"success\",\n      className: \"footer-button button-mid-bottom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Test Connection\"), React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right footer-button\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Connect\"))), React.createElement(Modal, {\n      show: this.state.confirmIsOpen,\n      key: \"databaseConnectionConfirmModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(ConfirmationModalBody, {\n      confirmationQuestion: \"If the information below about your database is correct, please click \\\"Confirm\\\".\",\n      confirmationData: this.state.formControls,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left\",\n      onClick: this.handleCancelConfirmation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"No\"), React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right\",\n      onClick: this.toggleSuccessModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Confirm\"))), React.createElement(Modal, {\n      show: this.state.successIsOpen,\n      key: \"databaseConnectionSuccessModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(SuccessModalBody, {\n      successMessage: \"Successfully connected to your database. To begin your data collection episode, please click \\\"Continue\\\"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: {\n        pathname: '/dataCollectionEpisodeStatus',\n        networkProps: {\n          'Network Name': this.state.chosenNetwork,\n          'Devices': this.state.networkDevices\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Continue\"))))];\n  }\n\n}\n\nexport default DatabaseConnection;","map":{"version":3,"sources":["C:\\Users\\hojoh\\Desktop\\Senior Design\\chariot\\gui\\src\\components\\databaseManagement\\DatabaseConnection.js"],"names":["React","Component","Link","Button","Modal","ConfirmationModalBody","SuccessModalBody","DatabaseConnection","constructor","props","toggleSuccessModal","setState","confirmIsOpen","successIsOpen","state","console","log","location","networkProps","chosenNetwork","networkDevices","formControls","successMessage","testConnection","bind","handleChange","toggleConfirmationModal","handleCancelConfirmation","event","updatedFormControls","target","name","value","preventDefault","isSubmitted","setTimeout","message","render","pathname"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\n\nimport ConfirmationModalBody from '../shared/ConfirmationModalBody';\nimport SuccessModalBody from '../shared/SuccessModalBody';\n//import ErrorModalBody from '../shared/ErrorModalBody';\n\nclass DatabaseConnection extends Component {\n  constructor(props) {\n    super(props);\n\n    console.log(this.props.location.networkProps);\n    this.state = {\n      chosenNetwork: this.props.location.networkProps['Network Name'],\n      networkDevices: this.props.location.networkProps['Devices'],\n      formControls: {\n          \"IP Address\": '',\n          \"Name\": '',\n          \"Password\": ''\n      },\n      \n      successMessage : '',\n      confirmIsOpen: false,\n      successIsOpen: false\n    }\n\n    this.testConnection = this.testConnection.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.toggleConfirmationModal = this.toggleConfirmationModal.bind(this);\n    this.handleCancelConfirmation = this.handleCancelConfirmation.bind(this);\n  }\n\n  \n  /*\n    Updates prop values (account-related) as they are entered by the user.\n  */\n  handleChange(event) {\n    var updatedFormControls = this.state.formControls; // Store from current state\n    updatedFormControls[event.target.name] = event.target.value; // Update the json\n    \n    this.setState({ formControls: updatedFormControls }); // Update the state\n  }\n\n  toggleConfirmationModal(event) {\n    this.setState({\n      confirmIsOpen: !this.state.confirmIsOpen\n    });\n    event.preventDefault();\n  }\n\n\n  handleCancelConfirmation(event) {\n    this.setState({\n      isSubmitted: !this.state.isSubmitted,\n      confirmIsOpen: !this.state.confirmIsOpen\n    });    \n    event.preventDefault(); // To prevent screen from rerendering\n  }\n\n\n  testConnection(event) {\n    //currently assuming that connection will always be established, display that connection is successful for 3 seconds\n    setTimeout(() => this.setState({ message: 'Connection Successful!' }), 3000);\n  }\n\n  toggleSuccessModal = () => {\n    this.setState({\n      confirmIsOpen: false\n    });\n    this.setState({\n      successIsOpen: !this.state.successIsOpen\n    });\n\n  }\n\n  render() {\n    return [\n      <div className=\"container\" key=\"databaseConnectionScreen\">\n        <h1>Database Connection</h1>\n        <p className=\"screenInfo\">Please fill in the following fields to connect to the database that will store the data.</p>\n\n        <form onSubmit={this.toggleConfirmationModal}>\n          <div className=\"form-group\">\n            <input required type=\"text\" className=\"form-control\" id=\"IP Address\" name=\"IP Address\" placeholder=\"IP Address\" onChange={this.handleChange}/>\n          </div>\n          <div className=\"form-group\">\n            <input required type=\"text\" className=\"form-control\" id=\"Name\" name=\"Name\" placeholder=\"Name\" onChange={this.handleChange}/>\n          </div>\n          <div className=\"form-group\">\n            <input required type=\"password\" className=\"form-control\" id=\"Password\" name=\"Password\" placeholder=\"Password\" onChange={this.handleChange}/>\n          </div>         \n          <Link to=\"/chooseNetwork\">\n            <Button variant=\"primary\" className=\"float-left footer-button\">Back</Button>\n          </Link>\n\n          <Button variant=\"success\" className=\"footer-button button-mid-bottom\">Test Connection</Button>\n\n          <Button variant=\"primary\" className=\"float-right footer-button\" type=\"submit\">Connect</Button>\n\n        </form>\n\n\n      </div>,\n\n      <Modal show={this.state.confirmIsOpen} key=\"databaseConnectionConfirmModal\">\n\n        <ConfirmationModalBody\n          confirmationQuestion= 'If the information below about your database is correct, please click \"Confirm\".'\n          confirmationData = {this.state.formControls}\n          >\n        </ConfirmationModalBody>\n\n      <Modal.Footer>\n        <Button variant=\"primary\" className=\"float-left\" onClick={this.handleCancelConfirmation}>No</Button>\n        <Button variant=\"primary\" className=\"float-right\" onClick={this.toggleSuccessModal}>Confirm</Button>\n      </Modal.Footer>\n    </Modal>,\n\n    <Modal show={this.state.successIsOpen} key=\"databaseConnectionSuccessModal\">\n\n      <SuccessModalBody successMessage='Successfully connected to your database. To begin your data collection episode, please click \"Continue\"'>\n      </SuccessModalBody>\n\n      <Modal.Footer>\n        <Link to={{pathname:'/dataCollectionEpisodeStatus', networkProps:{'Network Name': this.state.chosenNetwork, 'Devices': this.state.networkDevices}}}>\n          <Button variant=\"primary\" className=\"float-right\">Continue</Button>\n        </Link>\n      </Modal.Footer>\n    </Modal>\n\n\n    ]\n  }\n\n\n}\n\nexport default DatabaseConnection;"]},"metadata":{},"sourceType":"module"}