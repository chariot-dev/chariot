{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hojoh\\\\Desktop\\\\Senior Design\\\\chariot\\\\gui\\\\src\\\\components\\\\dataCollection\\\\DataCollectionEpisodeStatus.js\";\nimport React, { Component } from 'react';\nimport { Table, Tooltip } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport greenCircleImg from \"../images/green_circle.png\";\nimport yellowCircleImg from \"../images/yellow_circle.png\";\nimport redCircleImg from \"../images/red_circle.png\";\nimport { LineChart, Line, XAxis, YAxis, Legend, Label } from 'recharts';\n\nclass DataCollectionEpisodeStatus extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addDataPoint = () => {\n      var updatedData = this.state.data;\n      updatedData.push({\n        timeInSeconds: (this.state.data.length + 1).toString(),\n        uv: Math.floor(Math.random() * 10000) + 1,\n        pv: Math.floor(Math.random() * 10000) + 1,\n        amt: Math.floor(Math.random() * 10000) + 1\n      });\n      this.setState({\n        data: updatedData\n      });\n      console.log(this.state.data);\n    };\n\n    this.state = {\n      chosenNetwork: this.props.location.networkProps['Network Name'],\n      networkDevices: this.props.location.networkProps['Devices'],\n      data: [{\n        timeInSeconds: '1',\n        uv: 4000,\n        pv: 2400,\n        amt: 2400\n      }, {\n        timeInSeconds: '2',\n        uv: 3000,\n        pv: 1000,\n        amt: 2210\n      }, {\n        timeInSeconds: '3',\n        uv: 2000,\n        pv: 9800,\n        amt: 2290\n      }, {\n        timeInSeconds: '4',\n        uv: 2780,\n        pv: 3908,\n        amt: 2000\n      }, {\n        timeInSeconds: '5',\n        uv: 1890,\n        pv: 4800,\n        amt: 2181\n      }, {\n        timeInSeconds: '6',\n        uv: 2390,\n        pv: 3800,\n        amt: 2500\n      }, {\n        timeInSeconds: '7',\n        uv: 3490,\n        pv: 4300,\n        amt: 2100\n      }, {\n        timeInSeconds: '8',\n        uv: 3400,\n        pv: 4000,\n        amt: 2200\n      }, {\n        timeInSeconds: '9',\n        uv: 1700,\n        pv: 3000,\n        amt: 2000\n      }, {\n        timeInSeconds: '10',\n        uv: 1800,\n        pv: 4100,\n        amt: 2600\n      }, {\n        timeInSeconds: '11',\n        uv: 2300,\n        pv: 3400,\n        amt: 2800\n      }, {\n        timeInSeconds: '12',\n        uv: 2560,\n        pv: 3790,\n        amt: 2900\n      }]\n    };\n  }\n\n  getDeviceStatus(curDeviceName) {\n    var networkName = this.state.chosenNetwork; // API CALL TO GET DEVICE STATUS ON THE NETWORK\n\n    var deviceStatus = false;\n\n    switch (deviceStatus) {\n      case true:\n        return React.createElement(\"img\", {\n          src: greenCircleImg,\n          alt: \"redCircleImage\",\n          className: \"deviceStatusImg\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        });\n\n      case false:\n        return React.createElement(\"img\", {\n          src: redCircleImg,\n          alt: \"redCircleImage\",\n          className: \"deviceStatusImg\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        });\n\n      default:\n        return React.createElement(\"img\", {\n          src: redCircleImg,\n          alt: \"redCircleImage\",\n          className: \"deviceStatusImg\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        });\n    }\n  }\n\n  generateDevicesStatusTable() {\n    var devicesTableElement = [];\n\n    for (var i = 0; i < this.state.networkDevices.length; i++) {\n      var curDeviceName = this.state.networkDevices[i];\n      console.log(this.state.networkDevices[i]); // Create status row for current device. First cell is device name, second cell will use API call to determine device's status presently\n\n      devicesTableElement.push(React.createElement(\"tr\", {\n        key: curDeviceName + \"StatusRow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, curDeviceName), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \" \", this.getDeviceStatus(curDeviceName), \" \")));\n    }\n\n    return React.createElement(React.Fragment, null, React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      colSpan: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, this.state.chosenNetwork)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Device Name\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Device Status\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, devicesTableElement)), React.createElement(LineChart, {\n      width: 600,\n      height: 300,\n      data: this.state.data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(XAxis, {\n      label: {\n        value: \"Time (in seconds)\",\n        position: \"insideBottomRight\",\n        dy: 10\n      },\n      dataKey: \"timeInSeconds\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(YAxis, {\n      label: {\n        value: \"Device Data\",\n        position: \"insideLeft\",\n        angle: -90\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(Tooltip, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(Legend, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"pv\",\n      stroke: \"#8884d8\",\n      activeDot: {\n        r: 8\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#82ca9d\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })));\n  }\n\n  render() {\n    return [React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Data Collection Episode\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Data collection episode for \", this.state.chosenNetwork, \".\"), React.createElement(\"div\", {\n      id: \"devicesCollectionStatus\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, this.generateDevicesStatusTable()), React.createElement(Link, {\n      to: {\n        pathname: '/welcome'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"danger\",\n      className: \"float-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"End Data Collection\")), React.createElement(Button, {\n      onClick: this.addDataPoint,\n      variant: \"primary\",\n      className: \"float-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Add Data Point\"))];\n  }\n\n}\n\nexport default DataCollectionEpisodeStatus;","map":{"version":3,"sources":["C:\\Users\\hojoh\\Desktop\\Senior Design\\chariot\\gui\\src\\components\\dataCollection\\DataCollectionEpisodeStatus.js"],"names":["React","Component","Table","Tooltip","Link","Button","greenCircleImg","yellowCircleImg","redCircleImg","LineChart","Line","XAxis","YAxis","Legend","Label","DataCollectionEpisodeStatus","constructor","props","addDataPoint","updatedData","state","data","push","timeInSeconds","length","toString","uv","Math","floor","random","pv","amt","setState","console","log","chosenNetwork","location","networkProps","networkDevices","getDeviceStatus","curDeviceName","networkName","deviceStatus","generateDevicesStatusTable","devicesTableElement","i","value","position","dy","angle","r","render","pathname"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,KAAT,EAAgBC,OAAhB,QAA+B,iBAA/B;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AAEA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,KAA1B,EAAiCC,KAAjC,EAAwCC,MAAxC,EAAgDC,KAAhD,QAA6D,UAA7D;;AAEA,MAAMC,2BAAN,SAA0Cd,SAA1C,CAAoD;AAClDe,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAmFnBC,YAnFmB,GAmFJ,MAAM;AACnB,UAAIC,WAAW,GAAG,KAAKC,KAAL,CAAWC,IAA7B;AACAF,MAAAA,WAAW,CAACG,IAAZ,CAAiB;AAACC,QAAAA,aAAa,EAAE,CAAC,KAAKH,KAAL,CAAWC,IAAX,CAAgBG,MAAhB,GAAuB,CAAxB,EAA2BC,QAA3B,EAAhB;AAAuDC,QAAAA,EAAE,EAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAA3B,IAAoC,CAAhG;AAAoGC,QAAAA,EAAE,EAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAA3B,IAAoC,CAA7I;AAAiJE,QAAAA,GAAG,EAAGJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAA3B,IAAoC;AAA3L,OAAjB;AACA,WAAKG,QAAL,CAAc;AAACX,QAAAA,IAAI,EAAEF;AAAP,OAAd;AACAc,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKd,KAAL,CAAWC,IAAvB;AACD,KAxFkB;;AAEjB,SAAKD,KAAL,GAAa;AACXe,MAAAA,aAAa,EAAE,KAAKlB,KAAL,CAAWmB,QAAX,CAAoBC,YAApB,CAAiC,cAAjC,CADJ;AAEXC,MAAAA,cAAc,EAAE,KAAKrB,KAAL,CAAWmB,QAAX,CAAoBC,YAApB,CAAiC,SAAjC,CAFL;AAGXhB,MAAAA,IAAI,EAAE,CACJ;AAACE,QAAAA,aAAa,EAAE,GAAhB;AAAqBG,QAAAA,EAAE,EAAE,IAAzB;AAA+BI,QAAAA,EAAE,EAAE,IAAnC;AAAyCC,QAAAA,GAAG,EAAE;AAA9C,OADI,EAEJ;AAACR,QAAAA,aAAa,EAAE,GAAhB;AAAqBG,QAAAA,EAAE,EAAE,IAAzB;AAA+BI,QAAAA,EAAE,EAAE,IAAnC;AAAyCC,QAAAA,GAAG,EAAE;AAA9C,OAFI,EAGJ;AAACR,QAAAA,aAAa,EAAE,GAAhB;AAAqBG,QAAAA,EAAE,EAAE,IAAzB;AAA+BI,QAAAA,EAAE,EAAE,IAAnC;AAAyCC,QAAAA,GAAG,EAAE;AAA9C,OAHI,EAIJ;AAACR,QAAAA,aAAa,EAAE,GAAhB;AAAqBG,QAAAA,EAAE,EAAE,IAAzB;AAA+BI,QAAAA,EAAE,EAAE,IAAnC;AAAyCC,QAAAA,GAAG,EAAE;AAA9C,OAJI,EAKJ;AAACR,QAAAA,aAAa,EAAE,GAAhB;AAAqBG,QAAAA,EAAE,EAAE,IAAzB;AAA+BI,QAAAA,EAAE,EAAE,IAAnC;AAAyCC,QAAAA,GAAG,EAAE;AAA9C,OALI,EAMJ;AAACR,QAAAA,aAAa,EAAE,GAAhB;AAAqBG,QAAAA,EAAE,EAAE,IAAzB;AAA+BI,QAAAA,EAAE,EAAE,IAAnC;AAAyCC,QAAAA,GAAG,EAAE;AAA9C,OANI,EAOJ;AAACR,QAAAA,aAAa,EAAE,GAAhB;AAAqBG,QAAAA,EAAE,EAAE,IAAzB;AAA+BI,QAAAA,EAAE,EAAE,IAAnC;AAAyCC,QAAAA,GAAG,EAAE;AAA9C,OAPI,EAQJ;AAACR,QAAAA,aAAa,EAAE,GAAhB;AAAqBG,QAAAA,EAAE,EAAE,IAAzB;AAA+BI,QAAAA,EAAE,EAAE,IAAnC;AAAyCC,QAAAA,GAAG,EAAE;AAA9C,OARI,EASJ;AAACR,QAAAA,aAAa,EAAE,GAAhB;AAAqBG,QAAAA,EAAE,EAAE,IAAzB;AAA+BI,QAAAA,EAAE,EAAE,IAAnC;AAAyCC,QAAAA,GAAG,EAAE;AAA9C,OATI,EAUJ;AAACR,QAAAA,aAAa,EAAE,IAAhB;AAAsBG,QAAAA,EAAE,EAAE,IAA1B;AAAgCI,QAAAA,EAAE,EAAE,IAApC;AAA0CC,QAAAA,GAAG,EAAE;AAA/C,OAVI,EAWJ;AAACR,QAAAA,aAAa,EAAE,IAAhB;AAAsBG,QAAAA,EAAE,EAAE,IAA1B;AAAgCI,QAAAA,EAAE,EAAE,IAApC;AAA0CC,QAAAA,GAAG,EAAE;AAA/C,OAXI,EAYJ;AAACR,QAAAA,aAAa,EAAE,IAAhB;AAAsBG,QAAAA,EAAE,EAAE,IAA1B;AAAgCI,QAAAA,EAAE,EAAE,IAApC;AAA0CC,QAAAA,GAAG,EAAE;AAA/C,OAZI;AAHK,KAAb;AAkBD;;AAEDQ,EAAAA,eAAe,CAACC,aAAD,EAAgB;AAC7B,QAAIC,WAAW,GAAG,KAAKrB,KAAL,CAAWe,aAA7B,CAD6B,CAG7B;;AACA,QAAIO,YAAY,GAAG,KAAnB;;AAEA,YAAOA,YAAP;AACE,WAAK,IAAL;AACE,eAAO;AAAK,UAAA,GAAG,EAAEpC,cAAV;AAA0B,UAAA,GAAG,EAAC,gBAA9B;AAA+C,UAAA,SAAS,EAAC,iBAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AACF,WAAK,KAAL;AACE,eAAO;AAAK,UAAA,GAAG,EAAEE,YAAV;AAAwB,UAAA,GAAG,EAAC,gBAA5B;AAA6C,UAAA,SAAS,EAAC,iBAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AACF;AACE,eAAO;AAAK,UAAA,GAAG,EAAEA,YAAV;AAAwB,UAAA,GAAG,EAAC,gBAA5B;AAA6C,UAAA,SAAS,EAAC,iBAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AANJ;AAQD;;AAEDmC,EAAAA,0BAA0B,GAAG;AAC3B,QAAIC,mBAAmB,GAAG,EAA1B;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKzB,KAAL,CAAWkB,cAAX,CAA0Bd,MAA9C,EAAsDqB,CAAC,EAAvD,EAA2D;AACzD,UAAIL,aAAa,GAAG,KAAKpB,KAAL,CAAWkB,cAAX,CAA0BO,CAA1B,CAApB;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKd,KAAL,CAAWkB,cAAX,CAA0BO,CAA1B,CAAZ,EAFyD,CAIzD;;AACAD,MAAAA,mBAAmB,CAACtB,IAApB,CACE;AAAI,QAAA,GAAG,EAAEkB,aAAa,GAAG,WAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKA,aAAL,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAM,KAAKD,eAAL,CAAqBC,aAArB,CAAN,MAFF,CADF;AAMD;;AAED,WACE,0CACE,oBAAC,KAAD;AAAO,MAAA,OAAO,MAAd;AAAe,MAAA,QAAQ,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,OAAO,EAAC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiB,KAAKpB,KAAL,CAAWe,aAA5B,CADF,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFF,CAJF,CADF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGS,mBADH,CAVF,CADF,EAgBE,oBAAC,SAAD;AAAW,MAAA,KAAK,EAAE,GAAlB;AAAuB,MAAA,MAAM,EAAE,GAA/B;AAAoC,MAAA,IAAI,EAAE,KAAKxB,KAAL,CAAWC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE;AAACyB,QAAAA,KAAK,EAAE,mBAAR;AAA6BC,QAAAA,QAAQ,EAAE,mBAAvC;AAA4DC,QAAAA,EAAE,EAAE;AAAhE,OAAd;AAAmF,MAAA,OAAO,EAAC,eAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE;AAACF,QAAAA,KAAK,EAAE,aAAR;AAAuBC,QAAAA,QAAQ,EAAE,YAAjC;AAA+CE,QAAAA,KAAK,EAAE,CAAC;AAAvD,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAII,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,EAKI,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,UAAX;AAAsB,MAAA,OAAO,EAAC,IAA9B;AAAmC,MAAA,MAAM,EAAC,SAA1C;AAAoD,MAAA,SAAS,EAAE;AAACC,QAAAA,CAAC,EAAE;AAAJ,OAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,EAMI,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,UAAX;AAAsB,MAAA,OAAO,EAAC,IAA9B;AAAmC,MAAA,MAAM,EAAC,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,CAhBF,CADF;AA2BD;;AASDC,EAAAA,MAAM,GAAG;AACP,WAAO,CACL;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAAgC,KAAK/B,KAAL,CAAWe,aAA3C,MAFF,EAGE;AAAK,MAAA,EAAE,EAAC,yBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKQ,0BAAL,EADH,CAHF,EASE,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAE;AAACS,QAAAA,QAAQ,EAAC;AAAV,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,QAAhB;AAAyB,MAAA,SAAS,EAAC,aAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,CATF,EAaE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAKlC,YAAtB;AAAmC,MAAA,OAAO,EAAC,SAA3C;AAAqD,MAAA,SAAS,EAAC,YAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAbF,CADK,CAAP;AAkBD;;AA9GiD;;AAiHpD,eAAeH,2BAAf","sourcesContent":["import React, {Component} from 'react';\nimport { Table, Tooltip } from 'react-bootstrap';\nimport {Link} from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\n\nimport greenCircleImg from \"../images/green_circle.png\";\nimport yellowCircleImg from \"../images/yellow_circle.png\";\nimport redCircleImg from \"../images/red_circle.png\";\nimport { LineChart, Line, XAxis, YAxis, Legend, Label } from 'recharts';\n\nclass DataCollectionEpisodeStatus extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chosenNetwork: this.props.location.networkProps['Network Name'],\n      networkDevices: this.props.location.networkProps['Devices'],\n      data: [\n        {timeInSeconds: '1', uv: 4000, pv: 2400, amt: 2400},\n        {timeInSeconds: '2', uv: 3000, pv: 1000, amt: 2210},\n        {timeInSeconds: '3', uv: 2000, pv: 9800, amt: 2290},\n        {timeInSeconds: '4', uv: 2780, pv: 3908, amt: 2000},\n        {timeInSeconds: '5', uv: 1890, pv: 4800, amt: 2181},\n        {timeInSeconds: '6', uv: 2390, pv: 3800, amt: 2500},\n        {timeInSeconds: '7', uv: 3490, pv: 4300, amt: 2100},\n        {timeInSeconds: '8', uv: 3400, pv: 4000, amt: 2200},\n        {timeInSeconds: '9', uv: 1700, pv: 3000, amt: 2000},\n        {timeInSeconds: '10', uv: 1800, pv: 4100, amt: 2600},\n        {timeInSeconds: '11', uv: 2300, pv: 3400, amt: 2800},\n        {timeInSeconds: '12', uv: 2560, pv: 3790, amt: 2900},\n      ]\n    }\n  }\n\n  getDeviceStatus(curDeviceName) {\n    var networkName = this.state.chosenNetwork;\n\n    // API CALL TO GET DEVICE STATUS ON THE NETWORK\n    var deviceStatus = false;\n\n    switch(deviceStatus) {\n      case true:\n        return <img src={greenCircleImg} alt=\"redCircleImage\" className=\"deviceStatusImg\"/>;\n      case false:\n        return <img src={redCircleImg} alt=\"redCircleImage\" className=\"deviceStatusImg\"/>;\n      default:\n        return <img src={redCircleImg} alt=\"redCircleImage\" className=\"deviceStatusImg\"/>;\n    }\n  }\n\n  generateDevicesStatusTable() {\n    var devicesTableElement = [];\n\n    for (var i = 0; i < this.state.networkDevices.length; i++) {\n      var curDeviceName = this.state.networkDevices[i];\n      console.log(this.state.networkDevices[i]);\n\n      // Create status row for current device. First cell is device name, second cell will use API call to determine device's status presently\n      devicesTableElement.push(\n        <tr key={curDeviceName + \"StatusRow\"}>\n          <td>{curDeviceName}</td>\n          <td> {this.getDeviceStatus(curDeviceName)} </td>\n        </tr>\n      );\n    }\n\n    return (\n      <>\n        <Table striped bordered>\n          <thead>\n            <tr>\n              <th colSpan=\"2\">{this.state.chosenNetwork}</th>\n            </tr>\n            <tr>\n              <td>Device Name</td>\n              <td>Device Status</td>\n            </tr>\n          </thead>\n          <tbody>\n            {devicesTableElement}\n          </tbody>\n        </Table>\n\n        <LineChart width={600} height={300} data={this.state.data}>\n            <XAxis label={{value: \"Time (in seconds)\", position: \"insideBottomRight\", dy: 10}} dataKey=\"timeInSeconds\"/>\n            <YAxis label={{value: \"Device Data\", position: \"insideLeft\", angle: -90}}/>\n            <Tooltip/>\n            <Legend/>\n            <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#8884d8\" activeDot={{r: 8}}/>\n            <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\"/>\n        </LineChart>\n      </>\n    );\n  }\n  \n  addDataPoint = () => {\n    var updatedData = this.state.data;\n    updatedData.push({timeInSeconds: (this.state.data.length+1).toString(), uv: (Math.floor(Math.random() * 10000) + 1), pv: (Math.floor(Math.random() * 10000) + 1), amt: (Math.floor(Math.random() * 10000) + 1)});\n    this.setState({data: updatedData});\n    console.log(this.state.data);\n  }\n\n  render() {\n    return [\n      <div className=\"container\">\n        <h1>Data Collection Episode</h1>\n        <p>Data collection episode for {this.state.chosenNetwork}.</p>\n        <div id=\"devicesCollectionStatus\">\n          {this.generateDevicesStatusTable()}\n        \n        </div>\n\n        {/* Does nothing except go back to welcome screen for now */}\n        <Link to={{pathname:'/welcome'}}>\n          <Button variant=\"danger\" className=\"float-right\">End Data Collection</Button>\n        </Link>\n\n        <Button onClick={this.addDataPoint}variant=\"primary\" className=\"float-left\">Add Data Point</Button>\n\n      </div>\n    ]\n  }\n}\n\nexport default DataCollectionEpisodeStatus;"]},"metadata":{},"sourceType":"module"}