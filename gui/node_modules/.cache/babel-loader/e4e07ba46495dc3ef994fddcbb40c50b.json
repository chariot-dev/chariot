{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hojoh\\\\Desktop\\\\Senior Design\\\\chariot\\\\gui\\\\src\\\\components\\\\databaseManagement\\\\ChooseDatabaseConfig.js\";\nimport React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom';\nimport NetworkDeviceCellScreenTemplate from '../shared/NetworkDeviceCellScreenTemplate';\nconst getAllDbConfigsBaseUrl = 'http://localhost:5000/chariot/api/v1.0/database/all';\n\nclass ChooseDatabaseConfig extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      existingConfigs: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(getAllDbConfigsBaseUrl).then(res => res.json()).then( // On success\n    result => {\n      var responseJson = result; // Response is a dictionary\n\n      var updatedDbJsonArray = this.state.existingConfigs;\n      console.log(Object.keys(responseJson));\n      console.log(responseJson[\"myTestDB\"]);\n\n      for (var key of Object.keys(responseJson)) {\n        console.log(key);\n        updatedDbJsonArray.push(responseJson[key]);\n      }\n\n      console.log(updatedDbJsonArray);\n      this.setState({\n        existingConfigs: updatedDbJsonArray\n      }, () => {\n        console.log(this.state.existingConfigs);\n      });\n    }, // On error\n    error => {\n      console.log(error.message);\n      /*\n        Have an error modal for being unable to get device types. Once button on the modal is clicked, Chariot goes back to welcome screen\n      */\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Choose a Database\"), React.createElement(\"p\", {\n      className: \"screenInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Select a database to begin data collection process.\"), this.state.existingConfigs ? React.createElement(NetworkDeviceCellScreenTemplate, {\n      dataJson: this.state.existingConfigs,\n      withLinks: false,\n      type: \"chooseDatabase\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }) : null, React.createElement(Link, {\n      to: \"/welcome\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left footer-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Back\")));\n  }\n\n}\n\nexport default ChooseDatabaseConfig;","map":{"version":3,"sources":["C:\\Users\\hojoh\\Desktop\\Senior Design\\chariot\\gui\\src\\components\\databaseManagement\\ChooseDatabaseConfig.js"],"names":["React","Component","Button","Link","NetworkDeviceCellScreenTemplate","getAllDbConfigsBaseUrl","ChooseDatabaseConfig","constructor","props","state","existingConfigs","componentDidMount","fetch","then","res","json","result","responseJson","updatedDbJsonArray","console","log","Object","keys","key","push","setState","error","message","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,OAAOC,+BAAP,MAA4C,2CAA5C;AAEA,MAAMC,sBAAsB,GAAG,qDAA/B;;AAEA,MAAMC,oBAAN,SAAmCL,SAAnC,CAA6C;AAC3CM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,eAAe,EAAE;AADN,KAAb;AAGD;;AAEDC,EAAAA,iBAAiB,GAAI;AACnBC,IAAAA,KAAK,CAACP,sBAAD,CAAL,CACCQ,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,EAGE;AACCG,IAAAA,MAAD,IAAY;AACV,UAAIC,YAAY,GAAGD,MAAnB,CADU,CACiB;;AAE3B,UAAIE,kBAAkB,GAAG,KAAKT,KAAL,CAAWC,eAApC;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,IAAP,CAAYL,YAAZ,CAAZ;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYH,YAAY,CAAC,UAAD,CAAxB;;AAEA,WAAK,IAAIM,GAAT,IAAgBF,MAAM,CAACC,IAAP,CAAYL,YAAZ,CAAhB,EAA2C;AACzCE,QAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACAL,QAAAA,kBAAkB,CAACM,IAAnB,CAAwBP,YAAY,CAACM,GAAD,CAApC;AACD;;AAEDJ,MAAAA,OAAO,CAACC,GAAR,CAAYF,kBAAZ;AAEA,WAAKO,QAAL,CAAc;AAAEf,QAAAA,eAAe,EAAEQ;AAAnB,OAAd,EAAuD,MAAM;AAC3DC,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKX,KAAL,CAAWC,eAAvB;AACD,OAFD;AAGD,KArBH,EAsBE;AACCgB,IAAAA,KAAD,IAAW;AACTP,MAAAA,OAAO,CAACC,GAAR,CAAYM,KAAK,CAACC,OAAlB;AAED;;;AAGA,KA7BH;AA+BD;;AAEDC,EAAAA,MAAM,GAAG;AAEP,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,EAEE;AAAG,MAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DAFF,EAMG,KAAKnB,KAAL,CAAWC,eAAX,GAA6B,oBAAC,+BAAD;AAAiC,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWC,eAAtD;AAAuE,MAAA,SAAS,EAAE,KAAlF;AAAyF,MAAA,IAAI,EAAC,gBAA9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA7B,GAAiL,IANpL,EAQE,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAC,UAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,SAAhB;AAA0B,MAAA,SAAS,EAAC,0BAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CARF,CADF;AAcD;;AA1D0C;;AA8D7C,eAAeJ,oBAAf","sourcesContent":["import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom';\n\nimport NetworkDeviceCellScreenTemplate from '../shared/NetworkDeviceCellScreenTemplate';\n\nconst getAllDbConfigsBaseUrl = 'http://localhost:5000/chariot/api/v1.0/database/all';\n\nclass ChooseDatabaseConfig extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      existingConfigs: []\n    }\n  }\n\n  componentDidMount () {\n    fetch(getAllDbConfigsBaseUrl)\n    .then(res => res.json())\n    .then(\n      // On success\n      (result) => {\n        var responseJson = result; // Response is a dictionary\n\n        var updatedDbJsonArray = this.state.existingConfigs;\n        console.log(Object.keys(responseJson));\n        console.log(responseJson[\"myTestDB\"]);\n\n        for (var key of Object.keys(responseJson)) {\n          console.log(key);\n          updatedDbJsonArray.push(responseJson[key]);\n        }\n\n        console.log(updatedDbJsonArray);\n\n        this.setState({ existingConfigs: updatedDbJsonArray }, () => {\n          console.log(this.state.existingConfigs);\n        });\n      },\n      // On error\n      (error) => {\n        console.log(error.message);\n\n       /*\n         Have an error modal for being unable to get device types. Once button on the modal is clicked, Chariot goes back to welcome screen\n       */\n      }\n    )\n  }\n\n  render() {\n\n    return (\n      <div className=\"container\">\n        <h1>Choose a Database</h1>\n        <p className=\"screenInfo\">\n          Select a database to begin data collection process.\n        </p>\n\n        {this.state.existingConfigs ? <NetworkDeviceCellScreenTemplate dataJson={this.state.existingConfigs} withLinks={false} type=\"chooseDatabase\"></NetworkDeviceCellScreenTemplate> : null}\n\n        <Link to=\"/welcome\">\n          <Button variant=\"primary\" className=\"float-left footer-button\">Back</Button>\n        </Link>\n      </div>\n    );\n  }\n\n}\n\nexport default ChooseDatabaseConfig;"]},"metadata":{},"sourceType":"module"}