{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hojoh\\\\Desktop\\\\Senior Design\\\\chariot\\\\gui\\\\src\\\\components\\\\networkManagement\\\\DeleteNetwork.js\";\n\n/*\n  The component that handles the functinality for deleting a network. The body of the screen (network/device info)\n  is generated through NetworkDeviceCellScreenTemplate as the child component, and uses a callback to update this \n  component's state. deleteNetwork={this.deleteConfirmation.bind(this)} is passed as a callback to \n  NetworkDeviceCellScreenTemplate. When the 'Delete Network' is pressed in the child (NetworkDeviceCellScreenTemplate), \n  it calls this.props.deleteNetwork.bind(this, curNetworkName), which in turn, calls deleteConfirmation(selectedNetwork) \n  in the parent (this component).\n*/\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport NetworkDeviceCellScreenTemplate from '../shared/NetworkDeviceCellScreenTemplate';\nimport SuccessModalBody from '../shared/SuccessModalBody';\nconst getAllNetworksBaseUrl = 'http://localhost:5000/chariot/api/v1.0/networks/all';\nconst deleteNetworkBaseUrl = 'http://localhost:5000/chariot/api/v1.0/network';\nconst xhr = new XMLHttpRequest();\n\nclass DeleteNetwork extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleSuccessModal = () => {\n      xhr.open('DELETE', deleteNetworkBaseUrl + \"?networkName=\" + this.state.selectedNetworkToDelete);\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          // Once the request is done\n          if (xhr.status === 200) {\n            this.setState({\n              confirmIsOpen: false\n            });\n            this.setState({\n              successIsOpen: !this.state.successIsOpen\n            });\n          } else {\n            console.log(\"ERROR\");\n          }\n        }\n      };\n\n      xhr.send();\n    };\n\n    this.state = {\n      existingNetworks: [],\n      confirmIsOpen: false,\n      selectedNetworkToDelete: null,\n      successIsOpen: false\n    };\n    this.hideConfirmationModal = this.hideConfirmationModal.bind(this);\n  }\n\n  componentDidMount() {\n    xhr.open('GET', getAllNetworksBaseUrl);\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\"); // Once a response is received\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === XMLHttpRequest.DONE) {\n        // Once the request is done\n        if (xhr.status === 200) {\n          var responseJsonArray = JSON.parse(xhr.response); // Response is a dictionary \n\n          var updatedNetworksJsonArray = this.state.existingNetworks;\n\n          for (var i = 0; i < responseJsonArray.length; i++) {\n            updatedNetworksJsonArray.push(responseJsonArray[i]);\n          }\n\n          this.setState({\n            existingNetworks: updatedNetworksJsonArray\n          });\n        }\n      }\n    };\n\n    xhr.send();\n  }\n\n  deleteConfirmation(selectedNetwork) {\n    this.setState({\n      confirmIsOpen: true\n    });\n    this.setState({\n      selectedNetworkToDelete: selectedNetwork\n    });\n    console.log(selectedNetwork);\n  }\n\n  hideConfirmationModal(event) {\n    this.setState({\n      confirmIsOpen: !this.state.confirmIsOpen\n    });\n    event.preventDefault();\n  }\n\n  render() {\n    return [React.createElement(\"div\", {\n      className: \"container\",\n      key: \"deleteNetworkScreen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Delete an Existing Network\"), React.createElement(\"p\", {\n      className: \"screenInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Select a network to delete. Deleting a network will also delete its corresponding devices.\"), this.state.existingNetworks ? React.createElement(NetworkDeviceCellScreenTemplate, {\n      dataJson: this.state.existingNetworks,\n      withLinks: false,\n      type: \"delete\",\n      deleteNetwork: this.deleteConfirmation.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }) : null, React.createElement(Link, {\n      to: \"/networkManager\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left footer-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Back\"))), React.createElement(Modal, {\n      show: this.state.confirmIsOpen,\n      key: \"networkDeletionConfirmModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"To confirm the deletion of the network, \", this.state.selectedNetworkToDelete, \", click 'Yes'.\"), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left\",\n      onClick: this.hideConfirmationModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"No\"), React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right\",\n      onClick: this.toggleSuccessModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Yes\"))), React.createElement(Modal, {\n      show: this.state.successIsOpen,\n      key: \"networkDeletionSuccessModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(SuccessModalBody, {\n      successMessage: \"The network has been deleted!\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/welcome\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Continue\"))))];\n  }\n\n}\n\nexport default DeleteNetwork;","map":{"version":3,"sources":["C:\\Users\\hojoh\\Desktop\\Senior Design\\chariot\\gui\\src\\components\\networkManagement\\DeleteNetwork.js"],"names":["React","Component","Link","Button","Modal","NetworkDeviceCellScreenTemplate","SuccessModalBody","getAllNetworksBaseUrl","deleteNetworkBaseUrl","xhr","XMLHttpRequest","DeleteNetwork","constructor","props","toggleSuccessModal","open","state","selectedNetworkToDelete","setRequestHeader","onreadystatechange","readyState","DONE","status","setState","confirmIsOpen","successIsOpen","console","log","send","existingNetworks","hideConfirmationModal","bind","componentDidMount","responseJsonArray","JSON","parse","response","updatedNetworksJsonArray","i","length","push","deleteConfirmation","selectedNetwork","event","preventDefault","render"],"mappings":"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","sourcesContent":["/*\n  The component that handles the functinality for deleting a network. The body of the screen (network/device info)\n  is generated through NetworkDeviceCellScreenTemplate as the child component, and uses a callback to update this \n  component's state. deleteNetwork={this.deleteConfirmation.bind(this)} is passed as a callback to \n  NetworkDeviceCellScreenTemplate. When the 'Delete Network' is pressed in the child (NetworkDeviceCellScreenTemplate), \n  it calls this.props.deleteNetwork.bind(this, curNetworkName), which in turn, calls deleteConfirmation(selectedNetwork) \n  in the parent (this component).\n*/\n\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\n\nimport NetworkDeviceCellScreenTemplate from '../shared/NetworkDeviceCellScreenTemplate';\n\nimport SuccessModalBody from '../shared/SuccessModalBody';\n\nconst getAllNetworksBaseUrl = 'http://localhost:5000/chariot/api/v1.0/networks/all';\nconst deleteNetworkBaseUrl = 'http://localhost:5000/chariot/api/v1.0/network';\nconst xhr = new XMLHttpRequest();\n\nclass DeleteNetwork extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      existingNetworks: [],\n      confirmIsOpen: false,\n      selectedNetworkToDelete: null,\n      successIsOpen: false\n    }\n\n    this.hideConfirmationModal = this.hideConfirmationModal.bind(this);\n  } \n\n  componentDidMount() {\n    xhr.open('GET', getAllNetworksBaseUrl);\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n    // Once a response is received\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === XMLHttpRequest.DONE) { // Once the request is done\n        if (xhr.status === 200) {\n          var responseJsonArray = JSON.parse(xhr.response); // Response is a dictionary \n\n          var updatedNetworksJsonArray = this.state.existingNetworks; \n\n          for (var i = 0; i < responseJsonArray.length; i++) {\n            updatedNetworksJsonArray.push(responseJsonArray[i]);\n          }\n\n          this.setState({ existingNetworks: updatedNetworksJsonArray });\n        }\n      }\n    }\n    \n    xhr.send();\n  }\n\n\n  deleteConfirmation(selectedNetwork) {\n    this.setState({confirmIsOpen: true});\n    this.setState({selectedNetworkToDelete: selectedNetwork});\n    console.log(selectedNetwork)\n  }\n\n\n  hideConfirmationModal(event) {\n    this.setState({\n      confirmIsOpen: !this.state.confirmIsOpen\n    });    \n    event.preventDefault();\n  }\n\n\n  toggleSuccessModal = () => {\n    xhr.open('DELETE', deleteNetworkBaseUrl + \"?networkName=\" + this.state.selectedNetworkToDelete);\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === XMLHttpRequest.DONE) { // Once the request is done\n        if (xhr.status === 200) {\n          this.setState({\n            confirmIsOpen: false\n          });\n          this.setState({\n            successIsOpen: !this.state.successIsOpen\n          });      \n        }\n        else {\n          console.log(\"ERROR\");\n        }\n      }\n    }\n\n    xhr.send();\n  }\n\n\n  render() {\n    return [\n      <div className=\"container\" key=\"deleteNetworkScreen\">\n        <h1>Delete an Existing Network</h1>\n        <p className=\"screenInfo\">\n          Select a network to delete. Deleting a network will also delete its corresponding devices.\n        </p>\n\n        {/* {this.state.existingNetworkNames ? this.createNetworkLinks() : null} */}\n\n        {this.state.existingNetworks ? <NetworkDeviceCellScreenTemplate dataJson={this.state.existingNetworks} withLinks={false} type=\"delete\" deleteNetwork={this.deleteConfirmation.bind(this)}></NetworkDeviceCellScreenTemplate> : null}\n        \n        <Link to=\"/networkManager\">\n          <Button variant=\"primary\" className=\"float-left footer-button\">Back</Button>\n        </Link>\n      </div>,\n\n      <Modal show={this.state.confirmIsOpen} key=\"networkDeletionConfirmModal\">\n        <Modal.Body>\n          To confirm the deletion of the network, {this.state.selectedNetworkToDelete}, click 'Yes'.\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" className=\"float-left\" onClick={this.hideConfirmationModal}>No</Button>\n          <Button variant=\"primary\" className=\"float-right\" onClick={this.toggleSuccessModal}>Yes</Button>\n        </Modal.Footer>\n      </Modal>,\n\n      <Modal show={this.state.successIsOpen} key=\"networkDeletionSuccessModal\">\n\n        <SuccessModalBody successMessage=\"The network has been deleted!\">\n        </SuccessModalBody>\n\n        <Modal.Footer>\n          <Link to=\"/welcome\">\n            <Button variant=\"primary\" className=\"float-right\">Continue</Button>\n          </Link>\n        </Modal.Footer>\n      </Modal>\n    ]\n  }\n\n}\n\nexport default DeleteNetwork; "]},"metadata":{},"sourceType":"module"}