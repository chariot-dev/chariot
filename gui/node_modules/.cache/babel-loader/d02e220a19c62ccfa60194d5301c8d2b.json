{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hojoh\\\\Desktop\\\\Senior Design\\\\chariot\\\\gui\\\\src\\\\components\\\\networkManagement\\\\AddNetwork.js\";\n\n/*\n  AddNetwork.js\n\n  This component the represents the screen where the user will initially configure the name\n  and description of their network.\n\n*/\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport ConfirmationModalBody from '../shared/ConfirmationModalBody';\nimport SuccessModalBody from '../shared/SuccessModalBody';\nimport ErrorModalBody from '../shared/ErrorModalBody';\nconst postCreateNetworkBaseUrl = 'http://localhost:5000/chariot/api/v1.0/network';\n\nclass AddNetwork extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleErrorModal = () => {\n      this.setState({\n        confirmIsOpen: false\n      });\n      this.setState({\n        errorIsOpen: !this.state.errorIsOpen\n      });\n    };\n\n    this.createNetworkAndToggleSuccessModal = () => {\n      // Post request's body\n      var data = {\n        \"networkName\": this.state.networkProperties[\"Network Name\"],\n        \"description\": this.state.networkProperties[\"Network Description\"]\n      }; // Post request options\n\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }; // Execute the post request to 'postCreateNetworkBaseUrl' with 'requestOptions' using fetch\n\n      fetch(postCreateNetworkBaseUrl, requestOptions).then(res => res.json()).then( // If post was successful, update state and display success modal\n      () => {\n        this.setState({\n          confirmIsOpen: false\n        });\n        this.setState({\n          successIsOpen: !this.state.successIsOpen\n        });\n      }, // If post was unsuccessful, update state and display error modal\n      error => {\n        // Once error message is set, then launch the error modal\n        this.setState({\n          errorMessage: error.message\n        }, () => {\n          this.setState({\n            errorIsOpen: !this.state.errorIsOpen\n          });\n        });\n      });\n    };\n\n    this.state = {\n      networkProperties: {\n        \"Network Name\": \"\",\n        \"Network Description\": \"\"\n      },\n      isSubmitted: false,\n      confirmIsOpen: false,\n      successIsOpen: false,\n      errorIsOpen: false,\n      errorMessage: ''\n    };\n    this.toggleConfirmationModal = this.toggleConfirmationModal.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    var updatedNetworkProperties = this.state.networkProperties; // Store from current state\n\n    updatedNetworkProperties[event.target.name] = event.target.value; // Update the json\n\n    this.setState({\n      networkProperties: updatedNetworkProperties\n    }); // Update the state\n  }\n\n  toggleConfirmationModal(event) {\n    this.setState({\n      confirmIsOpen: !this.state.confirmIsOpen\n    });\n    event.preventDefault();\n  }\n\n  render() {\n    return [React.createElement(\"div\", {\n      className: \"container\",\n      key: \"addNetworkForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Add a New Network\"), React.createElement(\"p\", {\n      className: \"screenInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Please fill in the fields below to create a network. Then, click \\\"Next\\\".\"), React.createElement(\"form\", {\n      id: \"createNetworkForm\",\n      onSubmit: this.toggleConfirmationModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"requiredStar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"*\"), \"Network Name: \", React.createElement(\"input\", {\n      required: true,\n      className: \"form-control\",\n      id: \"networkNameInput\",\n      name: \"Network Name\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"requiredStar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"*\"), \"Network Description: \", React.createElement(\"textarea\", {\n      required: true,\n      className: \"form-control\",\n      id: \"networkDescriptionInput\",\n      rows: \"5\",\n      name: \"Network Description\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    })), React.createElement(Link, {\n      to: \"/networkManager\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left footer-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Back\")), React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right footer-button\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Next\"))), React.createElement(Modal, {\n      show: this.state.confirmIsOpen,\n      key: \"addNetworkConfirmation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(ConfirmationModalBody, {\n      confirmationQuestion: \"Is this information for your network correct?\",\n      confirmationData: this.state.networkProperties,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left\",\n      onClick: this.toggleConfirmationModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"No\"), React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right\",\n      onClick: this.createNetworkAndToggleSuccessModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Yes\"))), React.createElement(Modal, {\n      show: this.state.successIsOpen,\n      key: \"addNetworkSuccessModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(SuccessModalBody, {\n      successMessage: \"Your network was succesfully added! Would you like to add a device to this network as well?\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/networkManager\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"No\")), React.createElement(Link, {\n      to: {\n        pathname: '/addDeviceHome',\n        networkProps: {\n          'Network Name': this.state.networkProperties['Network Name']\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Yes\")))), React.createElement(Modal, {\n      show: this.state.errorIsOpen,\n      key: \"addNetworkErrorModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(ErrorModalBody, {\n      errorMessage: this.state.errorMessage + \". Please ensure that the server is running, the inputted values are valid, and try again.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"float-left\",\n      onClick: this.toggleErrorModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"OK\")))];\n  }\n\n}\n\nexport default AddNetwork;","map":{"version":3,"sources":["C:\\Users\\hojoh\\Desktop\\Senior Design\\chariot\\gui\\src\\components\\networkManagement\\AddNetwork.js"],"names":["React","Component","Link","Modal","Button","ConfirmationModalBody","SuccessModalBody","ErrorModalBody","postCreateNetworkBaseUrl","AddNetwork","constructor","props","toggleErrorModal","setState","confirmIsOpen","errorIsOpen","state","createNetworkAndToggleSuccessModal","data","networkProperties","requestOptions","method","headers","body","JSON","stringify","fetch","then","res","json","successIsOpen","error","errorMessage","message","isSubmitted","toggleConfirmationModal","bind","handleChange","event","updatedNetworkProperties","target","name","value","preventDefault","render","pathname","networkProps"],"mappings":"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","sourcesContent":["/*\n  AddNetwork.js\n\n  This component the represents the screen where the user will initially configure the name\n  and description of their network.\n\n*/\n\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\nimport ConfirmationModalBody from '../shared/ConfirmationModalBody';\nimport SuccessModalBody from '../shared/SuccessModalBody';\nimport ErrorModalBody from '../shared/ErrorModalBody';\n\nconst postCreateNetworkBaseUrl = 'http://localhost:5000/chariot/api/v1.0/network';\n\nclass AddNetwork extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      networkProperties: {\n        \"Network Name\": \"\",\n        \"Network Description\": \"\"\n      },\n      isSubmitted: false,\n      confirmIsOpen: false,\n      successIsOpen: false,\n      errorIsOpen: false,\n      errorMessage: ''\n    }\n\n    this.toggleConfirmationModal = this.toggleConfirmationModal.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  \n  handleChange(event) {\n    var updatedNetworkProperties = this.state.networkProperties; // Store from current state\n    updatedNetworkProperties[event.target.name] = event.target.value; // Update the json\n    \n    this.setState({ networkProperties: updatedNetworkProperties }); // Update the state\n  }\n\n  toggleConfirmationModal(event) {\n    this.setState({\n      confirmIsOpen: !this.state.confirmIsOpen\n    });\n    event.preventDefault();\n  }\n\n  toggleErrorModal = () => {\n    this.setState({\n      confirmIsOpen: false\n    });\n    this.setState({\n      errorIsOpen: !this.state.errorIsOpen\n    });\n  }\n\n  createNetworkAndToggleSuccessModal = () => {\n    // Post request's body\n    var data = {\n      \"networkName\": this.state.networkProperties[\"Network Name\"],\n      \"description\": this.state.networkProperties[\"Network Description\"]\n    }\n\n    // Post request options\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data)\n    };\n\n    // Execute the post request to 'postCreateNetworkBaseUrl' with 'requestOptions' using fetch\n    fetch(postCreateNetworkBaseUrl, requestOptions)\n    .then(res => res.json())\n    .then(\n      // If post was successful, update state and display success modal\n      () => {\n        this.setState({\n          confirmIsOpen: false\n        });\n        this.setState({\n          successIsOpen: !this.state.successIsOpen\n        });\n      },\n      // If post was unsuccessful, update state and display error modal\n      (error) => {\n        // Once error message is set, then launch the error modal\n        this.setState({\n          errorMessage: error.message \n        }, () => {\n          this.setState({ errorIsOpen: !this.state.errorIsOpen });\n        });\n      }\n    )\n  }\n\n  render() {\n    return [\n      <div className=\"container\" key=\"addNetworkForm\">\n        <h1>Add a New Network</h1>\n          <p className=\"screenInfo\">Please fill in the fields below to create a network. Then, click \"Next\".</p>\n          \n          <form id=\"createNetworkForm\" onSubmit={this.toggleConfirmationModal}>\n            <div className=\"form-group\">\n              <div className=\"requiredStar\">*</div>\n              Network Name: <input required className=\"form-control\" id=\"networkNameInput\" name=\"Network Name\" onChange={this.handleChange}/>\n            </div>\n            <div className=\"form-group\">\n              <div className=\"requiredStar\">*</div>\n              Network Description: <textarea required className=\"form-control\" id=\"networkDescriptionInput\" rows=\"5\" name=\"Network Description\" onChange={this.handleChange}></textarea>\n            </div>\n            <Link to=\"/networkManager\">\n              <Button variant=\"primary\" className=\"float-left footer-button\">Back</Button>\n            </Link>\n            <Button variant=\"primary\" className=\"float-right footer-button\" type=\"submit\">Next</Button>\n        </form>\n      </div>,\n\n      <Modal show={this.state.confirmIsOpen} key=\"addNetworkConfirmation\">\n          <ConfirmationModalBody\n            confirmationQuestion='Is this information for your network correct?'\n            confirmationData = {this.state.networkProperties}\n            >\n          </ConfirmationModalBody>\n          \n        <Modal.Footer>\n          <Button variant=\"primary\" className=\"float-left\" onClick={this.toggleConfirmationModal}>No</Button>\n          <Button variant=\"primary\" className=\"float-right\" onClick={this.createNetworkAndToggleSuccessModal}>Yes</Button>\n        </Modal.Footer>\n      </Modal>,\n\n      <Modal show={this.state.successIsOpen} key=\"addNetworkSuccessModal\">\n        <SuccessModalBody successMessage=\"Your network was succesfully added! Would you like to add a device to this network as well?\">\n        </SuccessModalBody>\n\n        <Modal.Footer>\n          <Link to=\"/networkManager\">\n            <Button variant=\"primary\" className=\"float-left\">No</Button>\n          </Link>\n          <Link to={{pathname:'/addDeviceHome', networkProps:{'Network Name': this.state.networkProperties['Network Name']} }}>\n            <Button variant=\"primary\" className=\"float-right\">Yes</Button>\n          </Link>\n        </Modal.Footer>\n      </Modal>,\n\n      <Modal show={this.state.errorIsOpen} key=\"addNetworkErrorModal\">\n        <ErrorModalBody errorMessage={this.state.errorMessage + \". Please ensure that the server is running, the inputted values are valid, and try again.\" }>\n        </ErrorModalBody>\n\n        <Modal.Footer>\n          <Button variant=\"primary\" className=\"float-left\" onClick={this.toggleErrorModal}>OK</Button>\n        </Modal.Footer>\n      </Modal>\n    ]\n  }\n\n}\n\nexport default AddNetwork; "]},"metadata":{},"sourceType":"module"}