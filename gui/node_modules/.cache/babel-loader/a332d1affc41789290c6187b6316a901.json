{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hojoh\\\\Desktop\\\\Senior Design\\\\chariot\\\\gui\\\\src\\\\components\\\\deviceManagement\\\\AddDeviceVars.js\";\n\n/*\n  AddDeviceVars.js\n\n  This component is shown inside the AddDeviceHome component containing the dynamically generated\n  configuration fields of a device depending on the user's choice of device.\n\n*/\nimport React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\n\nclass AddDeviceVars extends Component {\n  constructor(props) {\n    super(props); // Initializing newDeviceTypeConfigVals (the json to hold the config values of the device-specific parameters)\n\n    this.createDeviceFields = () => {\n      var deviceSpecificForm = [];\n      var deviceSettings = this.state.newDeviceTypeConfigVals;\n\n      for (var key in deviceSettings) {\n        var curFieldAlias = deviceSettings[key].alias;\n        var curFieldIsRequired = deviceSettings[key].required;\n        var valueType = deviceSettings[key].inputType;\n        deviceSpecificForm.push(React.createElement(\"div\", {\n          className: \"form-group\",\n          key: curFieldAlias,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }, curFieldIsRequired ? React.createElement(\"div\", {\n          className: \"requiredStar\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        }, \"*\") : \"\", valueType === \"checkbox\" ? null : key, React.createElement(\"input\", {\n          type: valueType,\n          required: curFieldIsRequired,\n          className: valueType === \"checkbox\" ? 'deviceCreationFormCheckbox' : 'form-control',\n          id: curFieldAlias,\n          name: key,\n          onChange: this.handleChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }), valueType === \"checkbox\" ? key : null));\n      }\n\n      return deviceSpecificForm;\n    };\n\n    var deviceConfig = props.params.newDeviceTypeGeneralVals.newDeviceTypeConfig[props.params.newDeviceTypeGeneralVals['Device Type']];\n    var _deviceSettings = deviceConfig[\"settings\"];\n    var initializedNewDeviceTypeConfigVals = {};\n    console.log(_deviceSettings.length);\n\n    for (var i = 0; i < _deviceSettings.length; i++) {\n      var fieldJsonObj = {};\n      var curFieldTitle;\n\n      var _curFieldAlias;\n\n      var curFieldDescription;\n\n      var _curFieldIsRequired;\n\n      if (_deviceSettings[i].settingsList) {\n        for (var k = 0; k < _deviceSettings[i].settingsList.length; k++) {\n          curFieldTitle = _deviceSettings[i].settingsList[k].title;\n          _curFieldAlias = _deviceSettings[i].settingsList[k].alias;\n          curFieldDescription = _deviceSettings[i].settingsList[k].description;\n          _curFieldIsRequired = _deviceSettings[i].settingsList[k].required;\n          var curFieldType = _deviceSettings[i].settingsList[k].inputType;\n          fieldJsonObj[\"value\"] = \"\";\n          fieldJsonObj[\"alias\"] = _curFieldAlias;\n          fieldJsonObj['description'] = curFieldDescription;\n          fieldJsonObj[\"required\"] = _curFieldIsRequired;\n          fieldJsonObj[\"inputType\"] = curFieldType;\n          initializedNewDeviceTypeConfigVals[curFieldTitle] = fieldJsonObj;\n          console.log(curFieldTitle);\n        }\n      } else {\n        curFieldTitle = _deviceSettings[i].title;\n        _curFieldAlias = _deviceSettings[i].alias; // for now, hide deviceType field since it was chosen by the dropdown\n\n        if (_curFieldAlias !== \"deviceType\") {\n          curFieldDescription = _deviceSettings[i].description;\n          _curFieldIsRequired = _deviceSettings[i].required;\n          fieldJsonObj[\"value\"] = \"\";\n          fieldJsonObj[\"alias\"] = _curFieldAlias;\n          fieldJsonObj['description'] = curFieldDescription;\n          fieldJsonObj[\"required\"] = _curFieldIsRequired; // speedwayR420 needs this check\n\n          if (\"inputType\" in _deviceSettings[i]) {\n            fieldJsonObj[\"inputType\"] = _deviceSettings[i].inputType;\n          }\n\n          initializedNewDeviceTypeConfigVals[curFieldTitle] = fieldJsonObj;\n          console.log(curFieldTitle);\n        }\n      }\n\n      console.log(initializedNewDeviceTypeConfigVals);\n    } // Setting the initial state\n\n\n    this.state = {\n      newDeviceTypeGeneralVals: {\n        'Device Nickname': props.params.newDeviceTypeGeneralVals['Device Nickname'],\n        'Device Description': props.params.newDeviceTypeGeneralVals['Device Description'],\n        'Device Type': props.params.newDeviceTypeGeneralVals['Device Type'],\n        newDeviceTypeConfig: props.params.newDeviceTypeGeneralVals.newDeviceTypeConfig\n      },\n      newDeviceTypeConfigVals: initializedNewDeviceTypeConfigVals,\n      isSubmitted: false\n    };\n    console.log(initializedNewDeviceTypeConfigVals);\n    this.handleChange = this.handleChange.bind(this);\n    this.sendSpecificToForm = this.sendSpecificToForm.bind(this);\n  }\n\n  handleChange(event) {\n    var updatedNewDeviceTypeConfigVals = this.state.newDeviceTypeConfigVals; // Store from current state\n\n    updatedNewDeviceTypeConfigVals[event.target.name].value = event.target.value; // Update the json\n\n    this.setState({\n      newDeviceTypeConfigVals: updatedNewDeviceTypeConfigVals\n    }); // Update the state\n  } // Couldn't call onFormSubmit() explicitly on click. Needed event.preventDefault()\n\n\n  sendSpecificToForm(event) {\n    this.props.onFormSubmit(this.state);\n    event.preventDefault();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"screenInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Now please fill in the configuration fields for the \", this.state.newDeviceTypeGeneralVals['Device Type'], \" device.\"), this.createDeviceFields(), React.createElement(Button, {\n      type: \"submit\",\n      variant: \"primary\",\n      className: \"float-right footer-button\",\n      onClick: this.sendSpecificToForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Next\"));\n  }\n\n}\n\nexport default AddDeviceVars;","map":{"version":3,"sources":["C:\\Users\\hojoh\\Desktop\\Senior Design\\chariot\\gui\\src\\components\\deviceManagement\\AddDeviceVars.js"],"names":["React","Component","Button","AddDeviceVars","constructor","props","createDeviceFields","deviceSpecificForm","deviceSettings","state","newDeviceTypeConfigVals","key","curFieldAlias","alias","curFieldIsRequired","required","valueType","inputType","push","handleChange","deviceConfig","params","newDeviceTypeGeneralVals","newDeviceTypeConfig","initializedNewDeviceTypeConfigVals","console","log","length","i","fieldJsonObj","curFieldTitle","curFieldDescription","settingsList","k","title","description","curFieldType","isSubmitted","bind","sendSpecificToForm","event","updatedNewDeviceTypeConfigVals","target","name","value","setState","onFormSubmit","preventDefault","render"],"mappings":"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","sourcesContent":["/*\n  AddDeviceVars.js\n\n  This component is shown inside the AddDeviceHome component containing the dynamically generated\n  configuration fields of a device depending on the user's choice of device.\n\n*/\n\nimport React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\n\nclass AddDeviceVars extends Component {\n  constructor (props) {\n    super(props);\n    \n    // Initializing newDeviceTypeConfigVals (the json to hold the config values of the device-specific parameters)\n    var deviceConfig = props.params.newDeviceTypeGeneralVals.newDeviceTypeConfig[props.params.newDeviceTypeGeneralVals['Device Type']];\n    var deviceSettings = deviceConfig[\"settings\"];\n    var initializedNewDeviceTypeConfigVals = {};\n\n    console.log(deviceSettings.length);\n\n    for (var i = 0; i < deviceSettings.length; i++) {\n      var fieldJsonObj = {};\n      var curFieldTitle;\n      var curFieldAlias;\n      var curFieldDescription;\n      var curFieldIsRequired;\n\n      if (deviceSettings[i].settingsList) {\n        for (var k = 0; k < deviceSettings[i].settingsList.length; k++) {\n          curFieldTitle = deviceSettings[i].settingsList[k].title;\n          curFieldAlias = deviceSettings[i].settingsList[k].alias;\n          curFieldDescription = deviceSettings[i].settingsList[k].description;\n          curFieldIsRequired = deviceSettings[i].settingsList[k].required;\n          var curFieldType = deviceSettings[i].settingsList[k].inputType;\n\n          fieldJsonObj[\"value\"] = \"\";\n          fieldJsonObj[\"alias\"] = curFieldAlias;\n          fieldJsonObj['description'] = curFieldDescription;\n          fieldJsonObj[\"required\"] = curFieldIsRequired;\n          fieldJsonObj[\"inputType\"] = curFieldType;\n\n          initializedNewDeviceTypeConfigVals[curFieldTitle] = (fieldJsonObj);\n\n          console.log(curFieldTitle);\n        }\n      }\n      else {\n        curFieldTitle = deviceSettings[i].title;\n        curFieldAlias = deviceSettings[i].alias;\n\n        // for now, hide deviceType field since it was chosen by the dropdown\n        if (curFieldAlias !== \"deviceType\") {\n          curFieldDescription = deviceSettings[i].description;\n          curFieldIsRequired = deviceSettings[i].required;\n\n          fieldJsonObj[\"value\"] = \"\";\n          fieldJsonObj[\"alias\"] = curFieldAlias;\n          fieldJsonObj['description'] = curFieldDescription;\n          fieldJsonObj[\"required\"] = curFieldIsRequired;\n\n          // speedwayR420 needs this check\n          if (\"inputType\" in deviceSettings[i]) {\n            fieldJsonObj[\"inputType\"] = deviceSettings[i].inputType\n          }\n\n          initializedNewDeviceTypeConfigVals[curFieldTitle] = (fieldJsonObj);\n\n          console.log(curFieldTitle);\n        }\n      }\n\n      console.log(initializedNewDeviceTypeConfigVals);\n    }\n\n    // Setting the initial state\n    this.state = {\n      newDeviceTypeGeneralVals: {\n        'Device Nickname': props.params.newDeviceTypeGeneralVals['Device Nickname'],\n        'Device Description': props.params.newDeviceTypeGeneralVals['Device Description'],\n        'Device Type': props.params.newDeviceTypeGeneralVals['Device Type'],\n        newDeviceTypeConfig: props.params.newDeviceTypeGeneralVals.newDeviceTypeConfig\n      },\n      newDeviceTypeConfigVals: initializedNewDeviceTypeConfigVals,\n      isSubmitted: false\n    }\n\n    console.log(initializedNewDeviceTypeConfigVals);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.sendSpecificToForm = this.sendSpecificToForm.bind(this);\n  }\n\n\n  handleChange(event) {\n    var updatedNewDeviceTypeConfigVals = this.state.newDeviceTypeConfigVals; // Store from current state\n    updatedNewDeviceTypeConfigVals[event.target.name].value = event.target.value; // Update the json\n    this.setState({ newDeviceTypeConfigVals: updatedNewDeviceTypeConfigVals }); // Update the state\n  }\n\n\n  // Couldn't call onFormSubmit() explicitly on click. Needed event.preventDefault()\n  sendSpecificToForm(event) {\n    this.props.onFormSubmit(this.state);\n    event.preventDefault();\n  }\n\n\n  createDeviceFields = () => {\n    var deviceSpecificForm = [];\n    var deviceSettings = this.state.newDeviceTypeConfigVals;\n\n    for (var key in deviceSettings) {\n      var curFieldAlias = deviceSettings[key].alias;\n      var curFieldIsRequired = deviceSettings[key].required;\n      var valueType = deviceSettings[key].inputType;\n\n      deviceSpecificForm.push(\n        <div className=\"form-group\" key={curFieldAlias}>\n          {curFieldIsRequired ? <div className=\"requiredStar\">*</div> : \"\"}\n          {valueType === \"checkbox\" ? null : key}\n          <input type={valueType}  required={curFieldIsRequired} className={valueType === \"checkbox\" ? 'deviceCreationFormCheckbox' : 'form-control'} id={curFieldAlias} name={key} onChange={this.handleChange}/>\n          {valueType === \"checkbox\" ? key : null}\n        </div>\n      );\n    }\n\n    return (deviceSpecificForm);\n  }\n\n\n  render() {\n    return (\n      <div>\n        <p className=\"screenInfo\">Now please fill in the configuration fields for the {this.state.newDeviceTypeGeneralVals['Device Type']} device.</p>\n\n        {this.createDeviceFields()}\n\n        <Button type=\"submit\" variant=\"primary\" className=\"float-right footer-button\" onClick={this.sendSpecificToForm}>Next</Button>\n      </div>\n    );\n  }\n}\n\nexport default AddDeviceVars;"]},"metadata":{},"sourceType":"module"}